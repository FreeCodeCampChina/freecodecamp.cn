{
  "name": "Basic Algorithm Scripting",
  "order": 8,
  "time": "50 hours",
  "helpRoom": "HelpJavaScript",
  "challenges": [
    {
      "id": "bd7158d2c442eddfbeb5bd1f",
      "title": "Get Set for our Algorithm Challenges",
      "description": [
        [
          "//i.imgur.com/sJkp30a.png",
          "An image of a algorithm challenge showing directions, tests, and the code editor.",
          "我们的算法挑战教你用程序员的思维去思考问题。",
          ""
        ],
        [
          "//i.imgur.com/d8LuRNh.png",
          "A mother bird kicks a baby bird out of her nest.",
          "之前的挑战向你介绍了编程的概念。接下来的挑战，你将会用你学到的东西来解决开放性的问题。",
          ""
        ],
        [
          "//i.imgur.com/WBetuBa.jpg",
          "A programmer punching through his laptop screen in frustration.",
          "算法挑战有点难度，有些挑战可能需要你花上几个小时来完成。你也许会沮丧，但是千万别放弃！",
          ""
        ],
        [
          "//i.imgur.com/p2TpOQd.jpg",
          "A cute dog jumping over a hurdle and winking and pointing his paw at you.",
          "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。<br>别担心，没啥难的。",
          ""
        ]
      ],
      "challengeSeed": [],
      "tests": [],
      "type": "Waypoint",
      "challengeType": 7,
      "isRequired": false
    },
    {
      "id": "a202eed8fc186c8434cb6d61",
      "title": "Reverse a String",
      "description": [
        "翻转字符串",
        "先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。",
        "你的结果必须得是一个字符串",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function reverseString(str) {",
        "  // 请把你的代码写在这里",
        "  return str;",
        "}",
        "",
        "reverseString(\"hello\");"
      ],
      "tests": [
        "assert(typeof reverseString(\"hello\") === \"string\", 'message: <code>reverseString(\"hello\")</code> 应该返回一个字符串');",
        "assert(reverseString(\"hello\") === \"olleh\", 'message: <code>reverseString(\"hello\")</code> 应该返回 <code>\"olleh\"</code>.');",
        "assert(reverseString(\"Howdy\") === \"ydwoH\", 'message: <code>reverseString(\"Howdy\")</code> 应该返回 <code>\"ydwoH\"</code>.');",
        "assert(reverseString(\"Greetings from Earth\") === \"htraE morf sgniteerG\", 'message: <code>reverseString(\"Greetings from Earth\")</code> 应该返回 <code>\"htraE morf sgniteerG\"</code>.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function reverseString(str) {\n  return str.split('').reverse().join(\"\");\n}\n\nreverseString('hello');\n"
      ],
      "MDNlinks": [
        "Global String Object",
        "String.split()",
        "Array.reverse()",
        "Array.join()"
      ],
      "challengeType": 5
    },
    {
      "id": "a302f7aae1aa3152a5b413bc",
      "title": "Factorialize a Number",
      "description": [
        "计算一个整数的阶乘",
        "如果用字母n来代表一个整数，阶乘代表着所有小于或等于n的整数的乘积。",
        "阶乘通常简写成 <code>n!</code>",
        "例如: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code>",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function factorialize(num) {",
        "  // 请把你的代码写在这里",
        "  return num;",
        "}",
        "",
        "factorialize(5);"
      ],
      "tests": [
        "assert(typeof factorialize(5) === 'number', 'message: <code>factorialize(5)</code> 应该返回一个数字');",
        "assert(factorialize(5) === 120, 'message: <code>factorialize(5)</code> 应该返回 120.');",
        "assert(factorialize(10) === 3628800, 'message: <code>factorialize(10)</code> 应该返回 3628800.');",
        "assert(factorialize(20) === 2432902008176640000, 'message: <code>factorialize(20)</code> 应该返回 2432902008176640000.');",
        "assert(factorialize(0) === 1, 'message: <code>factorialize(0)</code> 应该返回 1.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function factorialize(num) {\n  return num < 1 ? 1 : num * factorialize(num-1);\n}\n\nfactorialize(5);\n"
      ],
      "MDNlinks": [
        "Arithmetic Operators"
      ],
      "challengeType": 5
    },
    {
      "id": "aaa48de84e1ecc7c742e1124",
      "title": "Check for Palindromes",
      "description": [
        "检查回文字符串",
        "如果给定的字符串是回文，返回<code>true</code>，反之，返回<code>false</code>。",
        "如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是<dfn>palindrome</dfn>(回文)。",
        "<strong>注意</strong>你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。",
        "函数参数的值可以为<code>\"racecar\"</code>，<code>\"RaceCar\"</code>和<code>\"race CAR\"</code>。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function palindrome(str) {",
        "  // 请把你的代码写在这里",
        "  return true;",
        "}",
        "",
        "",
        "",
        "palindrome(\"eye\");"
      ],
      "tests": [
        "assert(typeof palindrome(\"eye\") === \"boolean\", 'message: <code>palindrome(\"eye\")</code> 应该返回一个布尔值');",
        "assert(palindrome(\"eye\") === true, 'message: <code>palindrome(\"eye\")</code> 应该返回 true.');",
        "assert(palindrome(\"race car\") === true, 'message: <code>palindrome(\"race car\")</code> 应该返回 true.');",
        "assert(palindrome(\"not a palindrome\") === false, 'message: <code>palindrome(\"not a palindrome\")</code> 应该返回 false.');",
        "assert(palindrome(\"A man, a plan, a canal. Panama\") === true, 'message: <code>palindrome(\"A man, a plan, a canal. Panama\")</code> 应该返回 true.');",
        "assert(palindrome(\"never odd or even\") === true, 'message: <code>palindrome(\"never odd or even\")</code> 应该返回 true.');",
        "assert(palindrome(\"nope\") === false, 'message: <code>palindrome(\"nope\")</code> 应该返回 false.');",
        "assert(palindrome(\"almostomla\") === false, 'message: <code>palindrome(\"almostomla\")</code> 应该返回 false.');",
        "assert(palindrome(\"My age is 0, 0 si ega ym.\") === true, 'message: <code>palindrome(\"My age is 0, 0 si ega ym.\")</code> 应该返回 true.');",
        "assert(palindrome(\"1 eye for of 1 eye.\") === false, 'message: <code>palindrome(\"1 eye for of 1 eye.\")</code> 应该返回 false.');",
        "assert(palindrome(\"0_0 (: /-\\ :) 0-0\") === true, 'message: <code>palindrome(\"0_0 (: /-\\ :) 0-0\")</code> 应该返回 true.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function palindrome(str) {\n  var string = str.toLowerCase().split(/[^A-Za-z0-9]/gi).join('');\n  var aux = string.split('');\n  if (aux.join('') === aux.reverse().join('')){\n    return true;\n  }\n\n  return false;\n}"
      ],
      "MDNlinks": [
        "String.replace()",
        "String.toLowerCase()"
      ],
      "challengeType": 5
    },
    {
      "id": "a26cbbe9ad8655a977e1ceb5",
      "title": "Find the Longest Word in a String",
      "description": [
        "找出最长单词",
        "在句子中找出最长的单词，并返回它的长度。",
        "函数的返回值应该是一个数字。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function findLongestWord(str) {",
        "  // 请把你的代码写在这里",
        "  return str.length;",
        "}",
        "",
        "findLongestWord(\"The quick brown fox jumped over the lazy dog\");"
      ],
      "tests": [
        "assert(typeof findLongestWord(\"The quick brown fox jumped over the lazy dog\") === \"number\", 'message: <code>findLongestWord(\"The quick brown fox jumped over the lazy dog\")</code> 应该返回一个数字');",
        "assert(findLongestWord(\"The quick brown fox jumped over the lazy dog\") === 6, 'message: <code>findLongestWord(\"The quick brown fox jumped over the lazy dog\")</code> 应该返回 6.');",
        "assert(findLongestWord(\"May the force be with you\") === 5, 'message: <code>findLongestWord(\"May the force be with you\")</code> 应该返回 5.');",
        "assert(findLongestWord(\"Google do a barrel roll\") === 6, 'message: <code>findLongestWord(\"Google do a barrel roll\")</code> 应该返回 6.');",
        "assert(findLongestWord(\"What is the average airspeed velocity of an unladen swallow\") === 8, 'message: <code>findLongestWord(\"What is the average airspeed velocity of an unladen swallow\")</code> 应该返回 8.');",
        "assert(findLongestWord(\"What if we try a super-long word such as otorhinolaryngology\") === 19, 'message: <code>findLongestWord(\"What if we try a super-long word such as otorhinolaryngology\")</code> 应该返回 19.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function findLongestWord(str) {\n  return str.split(' ').sort(function(a, b) { return b.length - a.length;})[0].length;\n}\n\nfindLongestWord('The quick brown fox jumped over the lazy dog');\n"
      ],
      "MDNlinks": [
        "String.split()",
        "String.length"
      ],
      "challengeType": 5
    },
    {
      "id": "ab6137d4e35944e21037b769",
      "title": "Title Case a Sentence",
      "description": [
        "句中单词首字母大写",
        "确保字符串的每个单词首字母都大写，其余部分小写。",
        "像'the'和'of'这样的连接符同理。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function titleCase(str) {",
        "  // 请把你的代码写在这里",
        "  return str;",
        "}",
        "",
        "titleCase(\"I'm a little tea pot\");"
      ],
      "tests": [
        "assert(typeof titleCase(\"I'm a little tea pot\") === \"string\", 'message: <code>titleCase(\"I&#39;m a little tea pot\")</code> 应该返回一个字符串');",
        "assert(titleCase(\"I'm a little tea pot\") === \"I'm A Little Tea Pot\", 'message: <code>titleCase(\"I&#39;m a little tea pot\")</code> 应该返回 \"I&#39;m A Little Tea Pot\".');",
        "assert(titleCase(\"sHoRt AnD sToUt\") === \"Short And Stout\", 'message: <code>titleCase(\"sHoRt AnD sToUt\")</code> 应该返回 \"Short And Stout\".');",
        "assert(titleCase(\"HERE IS MY HANDLE HERE IS MY SPOUT\") === \"Here Is My Handle Here Is My Spout\", 'message: <code>titleCase(\"HERE IS MY HANDLE HERE IS MY SPOUT\")</code> 应该返回 \"Here Is My Handle Here Is My Spout\".');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function titleCase(str) {\n  return str.split(' ').map(function(word) {\n    return word.charAt(0).toUpperCase() + word.substring(1).toLowerCase();\n  }).join(' ');\n}\n\ntitleCase(\"I'm a little tea pot\");\n"
      ],
      "MDNlinks": [
        "String.split()"
      ],
      "challengeType": 5
    },
    {
      "id": "a789b3483989747d63b0e427",
      "title": "Return Largest Numbers in Arrays",
      "description": [
        "找出多个数组中的最大数",
        "右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。",
        "提示：你可以用for循环来迭代数组，并通过<code>arr[i]</code>的方式来访问数组的每个元素。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function largestOfFour(arr) {",
        "  // 请把你的代码写在这里",
        "  return arr;",
        "}",
        "",
        "largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);"
      ],
      "tests": [
        "assert(largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]).constructor === Array, 'message: <code>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回一个数组');",
        "assert.deepEqual(largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]]), [27,5,39,1001], 'message: <code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回 <code>[27,5,39,1001]</code>.');",
        "assert.deepEqual(largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]]), [9,35,97,1000000], 'message: <code>largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])</code> 应该返回 <code>[9, 35, 97, 1000000]</code>.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function largestOfFour(arr) {\n  return arr.map(function(subArr) {\n    return Math.max.apply(null, subArr);\n  });\n}\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);\n"
      ],
      "MDNlinks": [
        "Comparison Operators"
      ],
      "challengeType": 5
    },
    {
      "id": "acda2fb1324d9b0fa741e6b5",
      "title": "Confirm the Ending",
      "description": [
        "检查字符串结尾",
        "判断一个字符串(<code>str</code>)是否以指定的字符串(<code>target</code>)结尾。",
        "如果是，返回true;如果不是，返回false。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function confirmEnding(str, target) {",
        "  // 请把你的代码写在这里",
        "  return str;",
        "}",
        "",
        "confirmEnding(\"Bastian\", \"n\");"
      ],
      "tests": [
        "assert(confirmEnding(\"Bastian\", \"n\") === true, 'message: <code>confirmEnding(\"Bastian\", \"n\")</code> 应该返回 true.');",
        "assert(confirmEnding(\"Connor\", \"n\") === false, 'message: <code>confirmEnding(\"Connor\", \"n\")</code> 应该返回 false.');",
        "assert(confirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\", \"specification\") === false, 'message: <code>confirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\"&#44; \"specification\"&#41;</code> 应该返回 false.');",
        "assert(confirmEnding(\"He has to give me a new name\", \"name\") === true, 'message: <code>confirmEnding(\"He has to give me a new name\", \"name\")</code> 应该返回 true.');",
        "assert(confirmEnding(\"He has to give me a new name\", \"me\") === true, 'message: <code>confirmEnding(\"He has to give me a new name\", \"me\")</code> 应该返回 true.');",
        "assert(confirmEnding(\"He has to give me a new name\", \"na\") === false, 'message: <code>confirmEnding(\"He has to give me a new name\", \"na\")</code> 应该返回 false.');",
        "assert(confirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\") === false, 'message: <code>confirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\")</code> 应该返回 false.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function confirmEnding(str, target) {\n  return str.substring(str.length-target.length) === target;\n};\n"
      ],
      "MDNlinks": [
        "String.substr()"
      ],
      "challengeType": 5
    },
    {
      "id": "afcc8d540bea9ea2669306b6",
      "title": "Repeat a string repeat a string",
      "description": [
        "重复输出字符串",
        "（重要的事情说3遍）",
        "重复一个指定的字符串 <code>num</code>次，如果<code>num</code>是一个负数则返回一个空字符串。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function repeat(str, num) {",
        "  // 请把你的代码写在这里",
        "  return str;",
        "}",
        "",
        "repeat(\"abc\", 3);"
      ],
      "tests": [
        "assert(repeat(\"*\", 3) === \"***\", 'message: <code>repeat(\"*\", 3)</code> 应该返回 <code>\"***\"</code>.');",
        "assert(repeat(\"abc\", 3) === \"abcabcabc\", 'message: <code>repeat(\"abc\", 3)</code> 应该返回 <code>\"abcabcabc\"</code>.');",
        "assert(repeat(\"abc\", 4) === \"abcabcabcabc\", 'message: <code>repeat(\"abc\", 4)</code> 应该返回 <code>\"abcabcabcabc\"</code>.');",
        "assert(repeat(\"abc\", 1) === \"abc\", 'message: <code>repeat(\"abc\", 1)</code> 应该返回 <code>\"abc\"</code>.');",
        "assert(repeat(\"*\", 8) === \"********\", 'message: <code>repeat(\"*\", 8)</code> 应该返回 <code>\"********\"</code>.');",
        "assert(repeat(\"abc\", -2) === \"\", 'message: <code>repeat(\"abc\", -2)</code> 应该返回 <code>\"\"</code>.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function repeat(str, num) {\n  if (num < 0) return '';\n  return num === 1 ? str : str + repeat(str, num-1);\n}\n\nrepeat('abc', 3);\n"
      ],
      "MDNlinks": [
        "Global String Object"
      ],
      "challengeType": 5
    },
    {
      "id": "ac6993d51946422351508a41",
      "title": "Truncate a string",
      "description": [
        "截断字符串",
        "（用瑞兹来截断对面的退路）",
        "如果字符串的长度比指定的参数<code>num</code>长，则把多余的部分用<code>...</code>来表示。",
        "切记，插入到字符串尾部的三个点号也会计入字符串的长度。",
        "但是，如果指定的参数<code>num</code>小于或等于3，则添加的三个点号不会计入字符串的长度。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function truncate(str, num) {",
        "  // 请把你的代码写在这里",
        "  return str;",
        "}",
        "",
        "truncate(\"A-tisket a-tasket A green and yellow basket\", 11);"
      ],
      "tests": [
        "assert(truncate(\"A-tisket a-tasket A green and yellow basket\", 11) === \"A-tisket...\", 'message: <code>truncate(\"A-tisket a-tasket A green and yellow basket\", 11)</code> 应该返回 \"A-tisket...\".');",
        "assert(truncate(\"Peter Piper picked a peck of pickled peppers\", 14) === \"Peter Piper...\", 'message: <code>truncate(\"Peter Piper picked a peck of pickled peppers\", 14)</code> 应该返回 \"Peter Piper...\".');",
        "assert(truncate(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length) === \"A-tisket a-tasket A green and yellow basket\", 'message: <code>truncate(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length)</code> 应该返回 \"A-tisket a-tasket A green and yellow basket\".');",
        "assert(truncate('A-tisket a-tasket A green and yellow basket', 'A-tisket a-tasket A green and yellow basket'.length + 2) === 'A-tisket a-tasket A green and yellow basket', 'message: <code>truncate(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length + 2)</code> 应该返回 \"A-tisket a-tasket A green and yellow basket\".');",
        "assert(truncate(\"A-\", 1) === \"A...\", 'message: <code>truncate(\"A-\", 1)</code> 应该返回 \"A...\".');",
        "assert(truncate(\"Absolutely Longer\", 2) === \"Ab...\", 'message: <code>truncate(\"Absolutely Longer\", 2)</code> 应该返回 \"Ab...\".');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function truncate(str, num) {\n  if(str.length > num ) {\n    if(num > 3) {\n      return str.slice(0, num - 3) + '...';\n    } else {\n      return str.slice(0,num) + '...';\n    }\n  } \n  return str;\n}"
      ],
      "MDNlinks": [
        "String.slice()"
      ],
      "challengeType": 5
    },
    {
      "id": "a9bd25c716030ec90084d8a1",
      "title": "Chunky Monkey",
      "description": [
        "猴子吃香蕉, 分割数组",
        "（猴子吃香蕉可是掰成好几段来吃哦）",
        "把一个数组<code>arr</code>按照指定的数组大小<code>size</code>分割成若干个数组块。",
        "例如:chunk([1,2,3,4],2)=[[1,2],[3,4]];",
        "chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function chunk(arr, size) {",
        "  // 请把你的代码写在这里",
        "  return arr;",
        "}",
        "",
        "chunk([\"a\", \"b\", \"c\", \"d\"], 2);"
      ],
      "tests": [
        "assert.deepEqual(chunk([\"a\", \"b\", \"c\", \"d\"], 2), [[\"a\", \"b\"], [\"c\", \"d\"]], 'message: <code>chunk([\"a\", \"b\", \"c\", \"d\"], 2)</code> 应该返回 <code>[[\"a\", \"b\"], [\"c\", \"d\"]]</code>.');",
        "assert.deepEqual(chunk([0, 1, 2, 3, 4, 5], 3), [[0, 1, 2], [3, 4, 5]], 'message: <code>chunk([0, 1, 2, 3, 4, 5], 3)</code> 应该返回 <code>[[0, 1, 2], [3, 4, 5]]</code>.');",
        "assert.deepEqual(chunk([0, 1, 2, 3, 4, 5], 2), [[0, 1], [2, 3], [4, 5]], 'message: <code>chunk([0, 1, 2, 3, 4, 5], 2)</code> 应该返回 <code>[[0, 1], [2, 3], [4, 5]]</code>.');",
        "assert.deepEqual(chunk([0, 1, 2, 3, 4, 5], 4), [[0, 1, 2, 3], [4, 5]], 'message: <code>chunk([0, 1, 2, 3, 4, 5], 4)</code> 应该返回 <code>[[0, 1, 2, 3], [4, 5]]</code>.');",
        "assert.deepEqual(chunk([0, 1, 2, 3, 4, 5, 6], 3), [[0, 1, 2], [3, 4, 5], [6]], 'message: <code>chunk([0, 1, 2, 3, 4, 5, 6], 3)</code> 应该返回 <code>[[0, 1, 2], [3, 4, 5], [6]]</code>.');",
        "assert.deepEqual(chunk([0, 1, 2, 3, 4, 5, 6, 7, 8], 4), [[0, 1, 2, 3], [4, 5, 6, 7], [8]], 'message: <code>chunk([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)</code> 应该返回 <code>[[0, 1, 2, 3], [4, 5, 6, 7], [8]]</code>.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function chunk(arr, size) {\n  var out = [];\n  for (var i = 0; i < arr.length; i+=size) {\n    out.push(arr.slice(i,i+size));\n  }\n  return out;\n}\n\nchunk(['a', 'b', 'c', 'd'], 2);\n"
      ],
      "MDNlinks": [
        "Array.push()",
        "Array.slice()"
      ],
      "challengeType": 5
    },
    {
      "id": "ab31c21b530c0dafa9e241ee",
      "title": "Slasher Flick",
      "description": [
        "截断数组",
        "返回一个数组被截断<code>n</code>个元素后还剩余的元素，截断从索引0开始。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function slasher(arr, howMany) {",
        "  // 请把你的代码写在这里",
        "  return arr;",
        "}",
        "",
        "slasher([1, 2, 3], 2);"
      ],
      "tests": [
        "assert.deepEqual(slasher([1, 2, 3], 2), [3], 'message: <code>slasher([1, 2, 3], 2)</code> 应该返回 <code>[3]</code>.');",
        "assert.deepEqual(slasher([1, 2, 3], 0), [1, 2, 3], 'message: <code>slasher([1, 2, 3], 0)</code> 应该返回 <code>[1, 2, 3]</code>.');",
        "assert.deepEqual(slasher([1, 2, 3], 9), [], 'message: <code>slasher([1, 2, 3], 9)</code> 应该返回 <code>[]</code>.');",
        "assert.deepEqual(slasher([1, 2, 3], 4), [], 'message: <code>slasher([1, 2, 3], 4)</code> 应该返回 <code>[]</code>.');",
        "assert.deepEqual(slasher(['burgers', 'fries', 'shake'], 1), ['fries', 'shake'], 'message: <code>slasher([\"burgers\", \"fries\", \"shake\"], 1)</code> 应该返回 <code>[\"fries\", \"shake\"]</code>.');",
        "assert.deepEqual(slasher([1, 2, 'chicken', 3, 'potatoes', 'cheese', 4], 5), ['cheese', 4], 'message: <code>slasher([1, 2, \"chicken\", 3, \"potatoes\", \"cheese\", 4], 5)</code> 应该返回 <code>[\"cheese\", 4]</code>.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function slasher(arr, howMany) {\n  // it doesn't always pay to be first\n  return arr.slice(howMany);\n}\n\nslasher([1, 2, 3], 2);\n"
      ],
      "MDNlinks": [
        "Array.slice()",
        "Array.splice()"
      ],
      "challengeType": 5
    },
    {
      "id": "af2170cad53daa0770fabdea",
      "title": "Mutations",
      "description": [
        "比较字符串",
        "（蛤蟆可以吃队友，也可以吃对手）",
        "如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。",
        "举例，<code>[\"hello\", \"Hello\"]</code>应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。",
        "<code>[\"hello\", \"hey\"]</code>应该返回false，因为字符串\"hello\"并不包含字符\"y\"。",
        "<code>[\"Alien\", \"line\"]</code>应该返回true，因为\"line\"中所有字符都可以在\"Alien\"找到。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function mutation(arr) {",
        "  // 请把你的代码写在这里",
        "  return arr;",
        "}",
        "",
        "mutation([\"hello\", \"hey\"]);"
      ],
      "tests": [
        "assert(mutation([\"hello\", \"hey\"]) === false, 'message: <code>mutation([\"hello\", \"hey\"])</code> 应该返回 false.');",
        "assert(mutation([\"hello\", \"Hello\"]) === true, 'message: <code>mutation([\"hello\", \"Hello\"])</code> 应该返回 true.');",
        "assert(mutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"]) === true, 'message: <code>mutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"])</code> 应该返回 true.');",
        "assert(mutation([\"Mary\", \"Army\"]) === true, 'message: <code>mutation([\"Mary\", \"Army\"])</code> 应该返回 true.');",
        "assert(mutation([\"Mary\", \"Aarmy\"]) === true, 'message: <code>mutation([\"Mary\", \"Aarmy\"])</code> 应该返回 true.');",
        "assert(mutation([\"Alien\", \"line\"]) === true, 'message: <code>mutation([\"Alien\", \"line\"])</code> 应该返回 true.');",
        "assert(mutation([\"floor\", \"for\"]) === true, 'message: <code>mutation([\"floor\", \"for\"])</code> 应该返回 true.');",
        "assert(mutation([\"hello\", \"neo\"]) === false, 'message: <code>mutation([\"hello\", \"neo\"])</code> 应该返回 false.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function mutation(arr) {\n  var hash = Object.create(null);\n  arr[0].toLowerCase().split('').forEach(function(c) {\n    hash[c] = true;\n  });\n  return !arr[1].toLowerCase().split('').filter(function(c) {\n    return !hash[c];\n  }).length;\n}\n\nmutation(['hello', 'hey']);\n"
      ],
      "MDNlinks": [
        "String.indexOf()"
      ],
      "challengeType": 5
    },
    {
      "id": "adf08ec01beb4f99fc7a68f2",
      "title": "Falsy Bouncer",
      "description": [
        "过滤数组假值",
        "（真假美猴王）",
        "删除数组中的所有假值。",
        "在JavaScript中，假值有<code>false</code>、<code>null</code>、<code>0</code>、<code>\"\"</code>、<code>undefined</code> 和 <code>NaN</code>。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function bouncer(arr) {",
        "  // 请把你的代码写在这里",
        "  return arr;",
        "}",
        "",
        "bouncer([7, \"ate\", \"\", false, 9]);"
      ],
      "tests": [
        "assert.deepEqual(bouncer([7, \"ate\", \"\", false, 9]), [7, \"ate\", 9], 'message: <code>bouncer([7, \"ate\", \"\", false, 9])</code> 应该返回 <code>[7, \"ate\", 9]</code>.');",
        "assert.deepEqual(bouncer([\"a\", \"b\", \"c\"]), [\"a\", \"b\", \"c\"], 'message: <code>bouncer([\"a\", \"b\", \"c\"])</code> 应该返回 <code>[\"a\", \"b\", \"c\"]</code>.');",
        "assert.deepEqual(bouncer([false, null, 0, NaN, undefined, \"\"]), [], 'message: <code>bouncer([false, null, 0, NaN, undefined, \"\"])</code> 应该返回 <code>[]</code>.');",
        "assert.deepEqual(bouncer([1, null, NaN, 2, undefined]), [1, 2], 'message: <code>bouncer([1, null, NaN, 2, undefined])</code> 应该返回 <code>[1, 2]</code>.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function bouncer(arr) {\n  // Don't show a false ID to this bouncer.\n  return arr.filter(function(e) {return e;});\n}\n\nbouncer([7, 'ate', '', false, 9]);\n"
      ],
      "MDNlinks": [
        "Boolean Objects",
        "Array.filter()"
      ],
      "challengeType": 5
    },
    {
      "id": "a39963a4c10bc8b4d4f06d7e",
      "title": "Seek and Destroy",
      "description": [
        "摧毁数组",
        "<strong>金克斯的迫击炮！</strong>",
        "实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function destroyer(arr) {",
        "  // 请把你的代码写在这里",
        "  return arr;",
        "}",
        "",
        "destroyer([1, 2, 3, 1, 2, 3], 2, 3);"
      ],
      "tests": [
        "assert.deepEqual(destroyer([1, 2, 3, 1, 2, 3], 2, 3), [1, 1], 'message: <code>destroyer([1, 2, 3, 1, 2, 3], 2, 3)</code> 应该返回 <code>[1, 1]</code>.');",
        "assert.deepEqual(destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3), [1, 5, 1], 'message: <code>destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3)</code> 应该返回 <code>[1, 5, 1]</code>.');",
        "assert.deepEqual(destroyer([3, 5, 1, 2, 2], 2, 3, 5), [1], 'message: <code>destroyer([3, 5, 1, 2, 2], 2, 3, 5)</code> 应该返回 <code>[1]</code>.');",
        "assert.deepEqual(destroyer([2, 3, 2, 3], 2, 3), [], 'message: <code>destroyer([2, 3, 2, 3], 2, 3)</code> 应该返回 <code>[]</code>.');",
        "assert.deepEqual(destroyer([\"tree\", \"hamburger\", 53], \"tree\", 53), [\"hamburger\"], 'message: <code>destroyer([\"tree\", \"hamburger\", 53], \"tree\", 53)</code> 应该返回 <code>[\"hamburger\"]</code>.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function destroyer(arr) {\n  var hash = Object.create(null);\n  [].slice.call(arguments, 1).forEach(function(e) {\n    hash[e] = true;\n  });\n  // Remove all the values\n  return arr.filter(function(e) { return !(e in hash);});\n}\n\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3);\n"
      ],
      "MDNlinks": [
        "Arguments object",
        "Array.filter()"
      ],
      "challengeType": 5
    },
    {
      "id": "a24c1a4622e3c05097f71d67",
      "title": "Where do I belong",
      "description": [
        "数组排序并找出元素索引",
        "<strong>我身在何处？</strong>",
        "先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。",
        "举例：<code>where([1,2,3,4], 1.5)</code> 应该返回 <code>1</code>。因为<code>1.5</code>插入到数组<code>[1,2,3,4]</code>后变成<code>[1,1.5,2,3,4]</code>，而<code>1.5</code>对应的索引值就是<code>1</code>。",
        "同理，<code>where([20,3,5], 19)</code> 应该返回 <code>2</code>。因为数组会先排序为 <code>[3,5,20]</code>，<code>19</code>插入到数组<code>[3,5,20]</code>后变成<code>[3,5,19,20]</code>，而<code>19</code>对应的索引值就是<code>2</code>。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function where(arr, num) {",
        "  // 请把你的代码写在这里",
        "  return num;",
        "}",
        "",
        "where([40, 60], 50);"
      ],
      "tests": [
        "assert(where([10, 20, 30, 40, 50], 35) === 3, 'message: <code>where([10, 20, 30, 40, 50], 35)</code> 应该返回 <code>3</code>.');",
        "assert(where([10, 20, 30, 40, 50], 30) === 2, 'message: <code>where([10, 20, 30, 40, 50], 30)</code> 应该返回 <code>2</code>.');",
        "assert(where([40, 60], 50) === 1, 'message: <code>where([40, 60], 50)</code> 应该返回 <code>1</code>.');",
        "assert(where([3, 10, 5], 3) === 0, 'message: <code>where([3, 10, 5], 3)</code> 应该返回 <code>0</code>.');",
        "assert(where([5, 3, 20, 3], 5) === 2, 'message: <code>where([5, 3, 20, 3], 5)</code> 应该返回 <code>2</code>.');",
        "assert(where([2, 20, 10], 19) === 2, 'message: <code>where([2, 20, 10], 19)</code> 应该返回 <code>2</code>.');",
        "assert(where([2, 5, 10], 15) === 3, 'message: <code>where([2, 5, 10], 15)</code> 应该返回 <code>3</code>.');"
      ],
      "type": "bonfire",
      "isRequired": true,
      "solutions": [
        "function where(arr, num) {\n  arr = arr.sort(function(a, b){return a-b;});\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] >= num)\n      {\n        return i;\n      }\n  }\n  return arr.length;\n}"
      ],
      "MDNlinks": [
        "Array.sort()"
      ],
      "challengeType": 5
    },
    {
      "id": "56533eb9ac21ba0edf2244e2",
      "title": "Caesars Cipher",
      "description": [
        "凯撒密码",
        "（让上帝的归上帝，凯撒的归凯撒）",
        "下面我们来介绍风靡全球的凯撒密码<code>Caesar cipher</code>，又叫移位密码。",
        "移位密码也就是密码中的字母会按照指定的数量来做移位。",
        "一个常见的案例就是<a href=\"http://www.baike.com/wiki/ROT13&prd=so_1_doc\" target='_blank'>ROT13</a>密码，字母会移位13个位置。由'A' &harr; 'N', 'B' &harr;  'O'，以此类推。",
        "写一个<a href=\"http://www.baike.com/wiki/ROT13&prd=so_1_doc\" target='_blank'>ROT13</a>函数，实现输入加密字符串，输出解密字符串。",
        "所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。",
        "当你完成不了挑战的时候，记得开大招'Read-Search-Ask'。"
      ],
      "challengeSeed": [
        "function rot13(str) { // LBH QVQ VG!",
        "  // 请把你的代码写在这里",
        "  return str;",
        "}",
        "",
        "rot13(\"SERR PBQR PNZC\");  // 你可以修改这一行来测试你的代码"
      ],
      "tail": [
        ""
      ],
      "solutions": [
        "var lookup = {\n  'A': 'N','B': 'O','C': 'P','D': 'Q',\n  'E': 'R','F': 'S','G': 'T','H': 'U',\n  'I': 'V','J': 'W','K': 'X','L': 'Y',\n  'M': 'Z','N': 'A','O': 'B','P': 'C',\n  'Q': 'D','R': 'E','S': 'F','T': 'G',\n  'U': 'H','V': 'I','W': 'J','X': 'K',\n  'Y': 'L','Z': 'M' \n};\n\nfunction rot13(encodedStr) {\n  var codeArr = encodedStr.split(\"\");  // String to Array\n  var decodedArr = []; // Your Result goes here\n  // Only change code below this line\n  \n  decodedArr = codeArr.map(function(letter) {\n    if(lookup.hasOwnProperty(letter)) {\n      letter = lookup[letter];\n    }\n    return letter;\n  });\n\n  // Only change code above this line\n  return decodedArr.join(\"\"); // Array to String\n}"
      ],
      "tests": [
        "assert(rot13(\"SERR PBQR PNZC\") === \"FREE CODE CAMP\", 'message: <code>rot13(\"SERR PBQR PNZC\")</code> 应该解码为 <code>\"FREE CODE CAMP\"</code>');",
        "assert(rot13(\"SERR CVMMN!\") === \"FREE PIZZA!\", 'message: <code>rot13(\"SERR CVMMN!\")</code> 应该解码为 <code>\"FREE PIZZA!\"</code>');",
        "assert(rot13(\"SERR YBIR?\") === \"FREE LOVE?\", 'message: <code>rot13(\"SERR YBIR?\")</code> 应该解码为 <code>\"FREE LOVE?\"</code>');",
        "assert(rot13(\"GUR DHVPX OEBJA QBT WHZCRQ BIRE GUR YNML SBK.\") === \"THE QUICK BROWN DOG JUMPED OVER THE LAZY FOX.\", 'message: <code>rot13(\"GUR DHVPX OEBJA QBT WHZCRQ BIRE GUR YNML SBK.\")</code> 应该解码为 <code>\"THE QUICK BROWN DOG JUMPED OVER THE LAZY FOX.\"</code>');"
      ],
      "type": "bonfire",
      "MDNlinks": [
        "String.charCodeAt()",
        "String.fromCharCode()"
      ],
      "challengeType": 5,
      "isRequired": true,
      "releasedOn": "January 1, 2016"
    }
  ]
}
