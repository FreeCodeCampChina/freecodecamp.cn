{
  "name": "Object Oriented and Functional Programming",
  "order": 7,
  "time": "2 hours",
  "helpRoom": "HelpJavaScript",
  "note": [
    "Methods",
    "Closures",
    "Factories",
    "Pure Functions",
    "Currying Functions",
    "Functors",
    "Currying Functions"
  ],
  "challenges": [
    {
      "id": "cf1111c1c15feddfaeb1bdef",
      "title": "Declare JavaScript Objects as Variables",
      "description": [
        "在我们深入 <strong>面向对象编程之前</strong> ，让我们先回顾一下Javascript的 <strong>对象（Object）</strong> ",
        "任务：给你的 <code>motorBike</code> 对象添加 <code>wheels</code>, <code>engines</code> 和 <code>seats</code> 属性，并且设置他们的数量。"
      ],
      "challengeSeed": [
        "var car = {",
        "  \"wheels\":4,",
        "  \"engines\":1,",
        "  \"seats\":5",
        "};",
        "",
        "var motorBike = {",
        "",
        "  // 只能在这一行下面写代码",
        "",
        "};"
      ],
      "tail": [
        "(function() {return JSON.stringify(motorBike);})();"
      ],
      "solutions": [
        "var car = {\n  \"wheels\":4,\n  \"engines\":1,\n  \"seats\":5\n};\n\nvar motorBike = {\n  \"wheels\": 4,\n  \"engines\": 1,\n  \"seats\": 2\n};"
      ],
      "tests": [
        "assert(typeof motorBike.engines === 'number', 'message: <code>motorBike</code> 应该有一个 <code>engines</code> 属性，且属性值为数字。');",
        "assert(typeof motorBike.wheels === 'number', 'message: <code>motorBike</code> 应该有一个 <code>wheels</code> 属性，且属性值为数字。');",
        "assert(typeof motorBike.seats === 'number', 'message: <code>motorBike</code> 应该有一个 <code>seats</code> 属性，且属性值为数字。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c15feddfaeb2bdef",
      "title": "Construct JavaScript Objects with Functions",
      "description": [
        "除了上一种方法外，我们还可以使用<strong>构造函数</strong>来创建对象。",
        " <strong>构造函数</strong> 通常使用大写字母开头，以便把自己和其他普通函数区别开。",
        "下面便是一个 <strong>构造函数</strong> 了：",
        "<blockquote>var Car = function() {<br>&nbsp;&nbsp;this.wheels = 4;<br>&nbsp;&nbsp;this.engines = 1;<br>&nbsp;&nbsp;this.seats = 1;<br>};</blockquote>",
        "在 <strong> 构造函数 </strong> 中， <code>this</code> 指向被此 <strong>构造函数</strong> 创建出来的 <strong>对象</strong> 。所以，当我们在 <strong>构造函数</strong> 中写：",
        "<code>&nbsp;&nbsp;this.wheels = 4;</code>",
        "这时，它创建出来的新<strong>对象</strong>将带有 <code>wheels</code> 属性，并且赋值为 <code>4</code>.",
        "你可以认为 <strong>构造函数</strong> 描述了它所创建出来的<strong>对象</strong>。",
        "让你的 <code>MotorBike</code> <strong>构造函数</strong> 描述一个具有 <code>wheels</code>, <code>engines</code> 和 <code>seats</code> 属性的 <strong>对象</strong> ，并且为这些属性设置值。"
      ],
      "challengeSeed": [
        "var Car = function() {",
        "  this.wheels = 4;",
        "  this.engines = 1;",
        "  this.seats = 1;",
        "};",
        "",
        "// 只能在这一行下面写代码",
        "",
        "var MotorBike = function() {",
        "",
        "};"
      ],
      "tail": [
        "(function() {return JSON.stringify(new MotorBike());})();"
      ],
      "solutions": [
        "var Car = function() {\n  this.wheels = 4;\n  this.engines = 1;\n  this.seats = 1;\n};\n\nvar myCar = new Car();\n\nvar MotorBike = function() {\n  this.engines = 1;\n  this.seats = 1;\n  this.wheels = 4;\n};\n\nvar myMotorBike = new MotorBike();"
      ],
      "tests": [
        "assert(typeof (new MotorBike()).engines === 'number', 'message: <code>MotorBike</code> 应该有一个 <code>engines</code> 属性，且属性值为数字。');",
        "assert(typeof (new MotorBike()).wheels === 'number', 'message: <code>MotorBike</code> 应该有一个 <code>wheels</code> 属性，且属性值为数字。');",
        "assert(typeof (new MotorBike()).seats === 'number', 'message: <code>MotorBike</code> 应该有一个 <code>seats</code> 属性，且属性值为数字。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c15feddfaeb4bdef",
      "title": "Make Instances of Objects with a Constructor Function",
      "description": [
        "现在，我们把上一节课我们写的 <strong>构造函数</strong> 在这里用起来！",
        "使用构造函数时，我们通过在它前面使用 <code>new</code> <strong>关键字</strong> 来对它进行调用，如下：",
        "<code>var myCar = new Car();</code>",
        "<code>myCar</code> 现在成为了 <code>Car</code> 的一个 <strong>实例</strong>（instance），它被 <strong>构造函数</strong> 描述成下面的样子：",
        "<blockquote>{<br>&nbsp;&nbsp;wheels: 4,<br>&nbsp;&nbsp;engines: 1,<br>&nbsp;&nbsp;seats: 1<br>}</blockquote>",
        "记住：要使用 <code>new</code> <strong>关键字</strong> 去调用构造函数。因为只有这样，Javascript才知道这是要去构造一个新 <strong>对象</strong> ，并且把构造函数中的 <code>this</code> 指向这个新对象。",
        "现在，当 <code>myCar</code> （即 <code>Car</code> 的一个 <strong>实例</strong> ）创建后，他可以像普通对象一样被使用，包括创建、访问、修改它的属性等，就像我们使用其他对象一样。如下：",
        "<code>myCar.turboType = \"twin\";</code>",
        "我们的 <code>myCar</code> 变量现在有了一个 <code>turboType</code> 属性了，且值为 <code>\"twin\"</code> 。",
        "在编辑器中，使用 <code>Car</code> 这个构造函数去创建一个新的 <strong>实例</strong> ，并且把这个实例赋值给 <code>myCar</code> 。",
        "然后给 <code>myCar</code> 创建一个 <code>nickname</code> 属性，且属性值为一个字符串"
      ],
      "challengeSeed": [
        "var Car = function() {",
        "  this.wheels = 4;",
        "  this.engines = 1;",
        "  this.seats = 1;",
        "};",
        "",
        "// 只能在这一行下面写代码",
        "",
        "var myCar;"
      ],
      "tail": [
        "(function() {return JSON.stringify(myCar);})();"
      ],
      "solutions": [
        "var Car = function() {\n  this.wheels = 4;\n  this.engines = 1;\n  this.seats = 1;\n};\n\nvar myCar = new Car();\n\nmyCar.nickname = \"Lucy\";"
      ],
      "tests": [
        "assert((new Car()).wheels === 4, 'message:  <strong>构造函数</strong> 中的 <code>wheels</code> 属性的值应该还是 <code>4</code> 不变。');",
        "assert(typeof (new Car()).nickname === 'undefined', 'message: <strong>构造函数</strong> 中不应该有 <code>nickname</code> 属性。');",
        "assert(myCar.wheels === 4, 'message: <code>myCar</code> 中的 <code>wheels</code> 属性的值应该等于 <code>4</code> ');",
        "assert(typeof myCar.nickname === 'string', 'message: <code>myCar</code> 中的 <code>nickname</code> 属性应该是一个字符串(String)。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "563cfb55594311ffcb333c70",
      "title": "Make Unique Objects by Passing Parameters to our Constructor",
      "description": [
        "我们之前写的 <code>构造函数</code> 很好，但是我们不想总是创建相同的对象，怎么办呢？",
        "为了解决这个问题，我们要向 <code>构造函数</code> 中添加 <code>参数</code> 。像下面这样：",
        "<blockquote>var Car = function(wheels, seats, engines) {<br>&nbsp;&nbsp;this.wheels = wheels;<br>&nbsp;&nbsp;this.seats = seats;<br>&nbsp;&nbsp;this.engines = engines;<br>};</blockquote>",
        "现在，我们可以在调用 <code>构造函数</code> 时传入一组 <code>参数</code> 了。",
        "<code>var myCar = new Car(6, 3, 1);</code>",
        "这段代码将会使用这一组 <code>参数</code> 来创建出下面的对象：",
        "<blockquote>{<br>&nbsp;&nbsp;wheels: 6,<br>&nbsp;&nbsp;seats: 3,<br>&nbsp;&nbsp;engines: 1<br>}</blockquote>",
        "现在该你试试了！改动 <code>Car</code> 的 <code>构造函数</code> ，使它能够通过使用 <code>参数</code> 来为 <code>wheels</code> 、 <code>seats</code> 、 <code>engines</code> 属性进行赋值。",
        "然后调用你刚刚改写过的 <code>构造函数</code> ，并传入三个 <code>参数</code> ，我们就能看到创建的新对象赋值给了 <code>myCar</code> 。"
      ],
      "challengeSeed": [
        "var Car = function() {",
        "  //Change this constructor",
        "  this.wheels = 4;",
        "  this.seats = 1;",
        "  this.engines = 1;",
        "};",
        "",
        "//Try it out here",
        "var myCar;"
      ],
      "tail": [
        "(function() {return JSON.stringify(myCar);})();"
      ],
      "solutions": [
        "var Car = function(wheels,seats,engines) {\n  this.wheels = wheels;\n  this.seats = seats;\n  this.engines = engines;\n};\n\nvar myCar = new Car(4,1,1);"
      ],
      "tests": [
        "assert((function(){var testCar = new Car(3,1,2); return testCar.wheels === 3 && testCar.seats === 1 && testCar.engines === 2;})(), 'message: 调用 <code>new Car(3,1,2)</code> 时，应该创建一个对象，这个对象带有一个 <code>wheels</code> 属性，且值为 <code>3</code>，一个 <code>seats</code> 属性，且值为 <code>1</code>，和一个 <code>engines</code> 属性，且值为 <code>2</code>。');",
        "assert((function(){var testCar = new Car(4,4,2); return testCar.wheels === 4 && testCar.seats === 4 && testCar.engines === 2;})(), 'message: 调用 <code>new Car(4,4,2)</code> 时，应该创建一个对象，这个对象带有一个 <code>wheels</code> 属性，且值为 <code>4</code，一个 <code>seats</code> 属性，且值为 <code>4</code>，和一个 <code>engines</code> 属性，且值为 <code>2</code>.');",
        "assert((function(){var testCar = new Car(2,6,3); return testCar.wheels === 2 && testCar.seats === 6 && testCar.engines === 3;})(), 'message: 调用 <code>new Car(2,6,3)</code> 时，应该创建一个对象，这个对象带有一个 <code>wheels</code> 属性，且值为 <code>2</code>，一个 <code>seats</code> 属性，且值为<code>6</code>，和一个 <code>engines</code> 属性，且值为 <code>3</code>.');",
        "assert(typeof myCar.wheels === 'number' && typeof myCar.seats === 'number' && typeof myCar.engines === 'number', 'message: <code>myCar</code> 的 <code>wheels</code>、<code>seats</code>、 <code>engines</code> 属性的值应该是一个数字。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c15feddfaeb3bdef",
      "title": "Make Object Properties Private",
      "description": [
        "对象拥有自己的特征，称为 <code>属性</code>，对象还有自己的函数，称为 <code>方法</code> 。",
        "在前面的课程（构造函数）中，我们使用了 <code>this</code> 指向当前（将要被创建的）对象中的 <code>公有属性</code> 。",
        "我们也可以创建 <code>私有属性</code> 和 <code>私有方法</code> ，它们两个在对象外部是不可访问的。",
        "为了完成这个任务，我们在 <code>构造函数</code> 中，使用我们熟悉的 <code>var</code> 关键字去创建变量，来替代我们使用 <code>this</code> 创建 <code>属性</code> 。",
        "比如，我们想记录我们的car行驶的 <code>speed</code> ，但是我们希望外面的代码对 <code>speed</code> 的修改只能是加速或减速（而不是变成字符串、直接赋值成某个速度等其他操作），那么如何达到这类操作的目的呢？",
        "编辑器中的 <code>构造函数</code> 展示了如何实现这种控制模式。",
        "该你自己试试了！修改 <code>Bike</code> 的 <code>构造函数</code> ，使它有一个名为 <code>gear</code> 的 <code>私有属性</code> ，还有两个公有方法，叫做 <code>getGear</code> 和 <code>setGear</code>。其中 get 是获得、set 是设置的意思。这两个方法用来获得和设置 <code>gear</code> 的值。"
      ],
      "challengeSeed": [
        "var Car = function() {",
        "  // 这是一个私有方法",
        "  var speed = 10;",
        "",
        "  // 这些是公共方法",
        "  this.accelerate = function(change) {",
        "    speed += change;",
        "  };",
        "",
        "  this.decelerate = function() {",
        "    speed -= 5;",
        "  };",
        "",
        "  this.getSpeed = function() {",
        "    return speed;",
        "  };",
        "};",
        "",
        "var Bike = function() {",
        "",
        "  // 只能在这一行下面写代码",
        "",
        "};",
        "",
        "var myCar = new Car();",
        "",
        "var myBike = new Bike();"
      ],
      "tail": [
        "if(myBike.hasOwnProperty('getGear')){(function() {return JSON.stringify(myBike.getGear());})();}"
      ],
      "solutions": [
        "var Car = function() {\n  var speed = 10;\n\n  this.accelerate = function(change) {\n    speed += change;\n  };\n\n  this.decelerate = function() {\n    speed -= 5;\n  };\n\n  this.getSpeed = function() {\n    return speed;\n  };\n};\n\nvar Bike = function() {\n  var gear = 1;\n  \n  this.getGear = function() {\n    return gear;\n  };\n  \n  this.setGear = function(newGear) {\n    gear = newGear;\n  };\n};\n\nvar myCar = new Car();\n\nvar myBike = new Bike();"
      ],
      "tests": [
        "assert(typeof myBike.getGear !== 'undefined' && typeof myBike.getGear === 'function', 'message: <code>myBike</code> 的 <code>getGear</code> 方法在对象之外应该可以访问。');",
        "assert(typeof myBike.setGear !== 'undefined' && typeof myBike.setGear === 'function', 'message: <code>myBike</code> 的 <code>setGear</code> 方法在对象之外应该可以访问。 ');",
        "assert(typeof myBike.gear === 'undefined', 'message: <code>myBike.gear</code> 在外部访问时，应该保持  <code>undefined</code> ，即外部访问不到私有属性。');",
        "assert.strictEqual((function () { myBike.setGear(4); return myBike.getGear(); })(), 4, 'message: 当调用 <code>myBike.setGear(4)</code>时，<code>myBike.getGear()</code> 应该返回 <code>4</code> 。');",
        "assert.strictEqual((function () { myBike.setGear(3); return myBike.getGear(); })(), 3, 'message: 当调用 <code>myBike.setGear(3)</code> 时，<code>myBike.getGear()</code> 应该返回 <code>3</code> 。');",
        "assert.strictEqual((function () { myBike.setGear(1); return myBike.getGear(); })(), 1, 'message: 当调用 <code>myBike.setGear(1)</code> 时，<code>myBike.getGear()</code> 应该返回 <code>1</code> 。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c15feddfaeb7bdef",
      "title": "Iterate over Arrays with .map",
      "description": [
        " <code>map</code> 方法可以方便的迭代数组，例子：",
        "<blockquote>var timesFour = oldArray.map(function(val){<br>&nbsp;&nbsp;return val * 4;<br>});</blockquote>",
        "",
        " <code>map</code> 方法会迭代数组中的每一个元素，并根据回调函数来处理每一个元素，最后返回一个新数组。注意，这个方法不会改变原始数组。",
        "在我们的例子中，回调函数只有一个参数，即数组中元素的值 (<code>val</code> 参数) ，但其实，你的回调函数也可以支持多个参数，譬如：元素的索引<code>index</code>、原始数组<code>arr</code>。",
        "使用 <code>map</code> 方法来为 <code>oldArray</code> 中的每一项增加3，并且在 <code>newArray</code> 中保存它们。 <code>oldArray</code> 不应该被改变。"
      ],
      "challengeSeed": [
        "var oldArray = [1,2,3,4,5];",
        "",
        "// 只能在这一行下面写代码",
        "",
        "var newArray = oldArray;"
      ],
      "tail": [
        "(function() {return newArray;})();"
      ],
      "tests": [
        "assert.deepEqual(oldArray, [1,2,3,4,5], 'message: 你不应该改变原始数组。');",
        "assert.deepEqual(newArray, [4,5,6,7,8], 'message: 你应该为数组中的每一项加3.');",
        "assert(editor.getValue().match(/\\.map\\s*\\(/gi), 'message: 你应该使用 <code>map</code> 方法。');",
        "assert(editor.getValue().match(/\\[1\\,2\\,3\\,4\\,5\\]/gi), 'message: 你只能用 <code>map</code> 来更该数组。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c15feddfaeb8bdef",
      "title": "Condense arrays with .reduce",
      "description": [
        "数组方法 <code>reduce</code> 用来迭代一个数组，并且把它累积到一个值中。",
        "使用 <code>reduce</code> 方法时，你要传入一个回调函数，这个回调函数的参数是一个 <strong>累加器</strong> （比如例子中的 <code>previousVal</code>) 和当前值 (<code>currentVal</code>）。",
        "<code>reduce</code> 方法有一个可选的第二参数，它可以被用来设置累加器的初始值。如果没有在这定义初始值，那么初始值将变成数组中的第一项，而 <code>currentVal</code> 将从数组的第二项开始。",
        "下面的例子使用了 <code>reduce</code> 来让数组中的所有值相减：",
        "<blockquote>var singleVal = array.reduce(function(previousVal, currentVal) {<br>&nbsp;&nbsp;return previousVal - currentVal;<br>}, 0);</blockquote>",
        "使用 <code>reduce</code> 方法来让 <code>array</code> 中的所有值相加，并且把结果赋值给 <code>singleVal</code> 。"
      ],
      "challengeSeed": [
        "var array = [4,5,6,7,8];",
        "var singleVal = 0;",
        "",
        "// 只能在这一行下面写代码",
        "",
        "singleVal = array;"
      ],
      "tail": [
        "(function() {return singleVal;})();"
      ],
      "tests": [
        "assert(singleVal == 30, 'message: <code>singleVal</code> 应该等于 <code>array</code> 中所有数的和。');",
        "assert(editor.getValue().match(/\\.reduce\\s*\\(/gi), 'message: 你应该使用 <code>reduce</code> 方法。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c15feddfaeb9bdef",
      "title": "Filter Arrays with .filter",
      "description": [
        " <code>filter</code> 方法用来迭代一个数组，并且按给出的条件过滤出符合的元素。",
        "<code>filter</code> 方法传入一个回调函数，这个回调函数会携带一个参数，参数为当前迭代的项（我们叫它 <code>val</code> ）。",
        "回调函数返回 <code>true</code> 的项会保留在数组中，返回 <code>false</code> 的项会被过滤出数组。",
        "下面的代码示例展示了使用 <code>filter</code> 来移除数组中值等于5的项：",
        " <strong>注意：</strong> 我们忽略了第二参数和第三参数，因为例子中我们只需要第一参数就够了。",
        "<blockquote>array = array.filter(function(val) {<br>&nbsp;&nbsp;return val !== 5;<br>});</blockquote>",
        "使用 <code>filter</code> 来创建一个新数组，新数组的值是 <code>oldArray</code> 中值小于6的元素。不许改变原数组 <code>oldArray</code> 。"
      ],
      "challengeSeed": [
        "var oldArray = [1,2,3,4,5,6,7,8,9,10];",
        "",
        "// 只能在这一行下面写代码",
        "",
        "var newArray = oldArray;"
      ],
      "tail": [
        "(function() {return newArray;})();"
      ],
      "tests": [
        "assert.deepEqual(oldArray, [1,2,3,4,5,6,7,8,9,10], 'message: 你不应该改变原始数组。');",
        "assert.deepEqual(newArray, [1,2,3,4,5], 'message: 你应该保留数组中小于 6 的元素。 ');",
        "assert(editor.getValue().match(/array\\.filter\\s*\\(/gi), 'message: 你应该使用 <code>filter</code> 来创建新的数组。');",
        "assert(editor.getValue().match(/\\[1\\,2\\,3\\,4\\,5\\,6\\,7\\,8\\,9\\,10\\]/gi), 'message: 你应该使用 <code>filter</code> 来生成新数组中的值。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c16feddfaeb1bdef",
      "title": "Sort Arrays with .sort",
      "description": [
        "使用 <code>sort</code> 方法，你可以很容易的按字母顺序或数字顺序对数组中的元素进行排序。",
        "与我们之前用的数组方法仅仅返回一个新数组不同， <code>sort</code> 方法将改变原数组，返回被排序后的数组。",
        "<code>sort</code> 可以把比较函数作为参数传入。比较函数有返回值，当 <code>a</code> 小于 <code>b</code>，返回一个负数；当 <code>a</code> 大于 <code>b</code> ，返回一个正数；相等时返回0。",
        "如果没有传入比较函数，它将把值全部转成字符串，并按照字母顺序进行排序。",
        "下面的例子将展示 <code>sort</code> 的使用，传入的比较函数把元素按照从小到大的顺序进行排列：",
        "<blockquote>var array = [1, 12, 21, 2];<br>array.sort(function(a, b) {<br>&nbsp;&nbsp;return a - b;<br>});</blockquote>",
        "使用 <code>sort</code> 按照从大到小的顺序排序 <code>array</code> 。"
      ],
      "challengeSeed": [
        "var array = [1, 12, 21, 2];",
        "",
        "// 只能在这一行下面写代码",
        "",
        "array.sort();"
      ],
      "tail": [
        "(function() {return array;})();"
      ],
      "tests": [
        "assert.deepEqual(array, [21, 12, 2, 1], 'message: 你应该按照从大到小的顺序排序。');",
        "assert(editor.getValue().match(/\\[1,\\s*12,\\s*21,\\s*2\\];/gi), 'message: 你应该使用 <code>sort</code> 来改变数组。');",
        "assert(editor.getValue().match(/\\.sort\\s*\\(/g), 'message: 你应该使用 <code>sort</code> 方法。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c16feddfaeb2bdef",
      "title": "Reverse Arrays with .reverse",
      "description": [
        "你可以使用 <code>reverse</code> 方法来翻转数组。",
        "<blockquote>var myArray = [1, 2, 3];<br>myArray.reverse();</blockquote>",
        "<em>结果myArray 变成了 [3, 2, 1]</em>",
        "使用 <code>reverse</code> 来翻转 <code>array</code> 数组。并赋值给 <code>newArray</code>."
      ],
      "challengeSeed": [
        "var array = [1,2,3,4,5,6,7];",
        "var newArray = [];",
        "",
        "// 只能在这一行下面写代码",
        "",
        "newArray = array;"
      ],
      "tail": [
        "(function() {return newArray;})();"
      ],
      "tests": [
        "assert.deepEqual(newArray, [7,6,5,4,3,2,1], 'message: 你应该反序数组。');",
        "assert(editor.getValue().match(/\\.reverse\\s*\\(\\)/gi), 'message: 你应该使用 <code>reverse</code> 方法。');",
        "assert(editor.getValue().match(/\\[1\\,2\\,3\\,4\\,5\\,6\\,7/gi), 'message: 你应该仅用 <code>reverse</code> 去修改 <code>array</code>。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c16feddfaeb3bdef",
      "title": "Concatenate Arrays with .concat",
      "description": [
        "<code>concat</code> 方法可以用来把两个数组的内容合并到一个数组中。",
        "<code>concat</code> 方法的参数应该是一个数组。参数中的数组会拼接在原数组的后面，并作为一个新数组返回。",
        "下面是一个拼接数组的例子，用<code>concat</code> 把 <code>otherArray</code> 拼接在 <code>oldArray</code> 的后面：",
        "<code>newArray = oldArray.concat(otherArray);</code>",
        "使用 <code>.concat()</code> 将 <code>concatMe</code> 拼接到 <code>oldArray</code> 后面，并且赋值给 <code>newArray</code>。"
      ],
      "challengeSeed": [
        "var oldArray = [1,2,3];",
        "var newArray = [];",
        "",
        "var concatMe = [4,5,6];",
        "",
        "// 只能在这一行下面写代码",
        "",
        "newArray = oldArray;"
      ],
      "tail": [
        "(function() {return newArray;})();"
      ],
      "tests": [
        "assert.deepEqual(newArray, [1,2,3,4,5,6], 'message: 你应该合并两个数组。');",
        "assert(editor.getValue().match(/\\.concat\\s*\\(/gi), 'message: 你应该使用 <code>concat</code> 方法来合并数组。');",
        "assert(editor.getValue().match(/\\[1\\,2\\,3\\]/gi) && editor.getValue().match(/\\[4\\,5\\,6\\]/gi), 'message: 你应该使用 <code>concat</code> 方法去修改数组。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c16feddfaeb4bdef",
      "title": "Split Strings with .split",
      "description": [
        "你可以使用 <code>split</code> 方法按指定分隔符将字符串分割为数组。",
        "你要给 <code>split</code> 方法传递一个参数，这个参数将会作为一个分隔符。",
        "下面的例子展示了 <code>split</code> 方法的使用，按照 <code>s</code> 字母进行分割：",
        "<code>var array = string.split('s');</code>",
        "使用 <code>split</code> 方法来把字符串 <code>string</code> 分割为数组 <code>array</code>。"
      ],
      "challengeSeed": [
        "var string = \"Split me into an array\";",
        "var array = [];",
        "",
        "// 只能在这一行下面写代码",
        "",
        "array = string;"
      ],
      "tail": [
        "(function() {return array;})();"
      ],
      "tests": [
        "assert(/\\.split\\(/gi, 'message: 你应该在字符串上使用 <code>split</code> 方法。');",
        "assert(typeof array === 'object' && array.length === 5, 'message: 你应该使用空格（ <code>\" \"</code> ）来分割字符串。 ');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c16feddfaeb5bdef",
      "title": "Join Strings with .join",
      "description": [
        "我们还可以使用 <code>join</code> 方法来把数组转换成字符串，里面的每一个元素可以用你指定的连接符来连接起来，这个连接符就是你要传入的参数。",
        "下面展示了使用 <code>join</code> 来将数组中的每一项放入字符串，并用 <code> and </code> 进行连接：",
        "<blockquote>var veggies = [\"Celery\", \"Radish\", \"Carrot\", \"Potato\"];<br>var salad = veggies.join(\" and \");<br>console.log(salad); // \"Celery and Radish and Carrot and Potato\" </blockquote>",
        "使用 <code>join</code> 方法，连接符为<code>' '</code>把数组 <code>joinMe</code> 转化成字符串 <code>joinedString</code>."
      ],
      "challengeSeed": [
        "var joinMe = [\"Split\",\"me\",\"into\",\"an\",\"array\"];",
        "var joinedString = '';",
        "",
        "// 只能在这一行下面写代码",
        "",
        "joinedString = joinMe;"
      ],
      "tail": [
        "(function() {return joinedString;})();"
      ],
      "tests": [
        "assert(typeof joinedString === 'string' && joinedString === \"Split me into an array\", 'message: 你应该使用空格来分隔元素。');",
        "assert(/\\.join\\(/gi, 'message: 你应该在数组上使用 <code>join</code> 方法。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    }
  ]
}
