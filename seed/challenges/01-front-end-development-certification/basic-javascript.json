{
  "name": "Basic JavaScript",
  "time": "10 hours",
  "order": 6,
  "helpRoom": "HelpJavaScript",
  "challenges": [
    {
      "id": "bd7123c9c441eddfaeb4bdef",
      "title": "Comment your JavaScript Code",
      "description": [
        "注释的代码块在JavaScript之中是不会运行的。注释是一个非常好的方式让你自己以及其他人明白这段代码是怎么运行的。",
        "JavaScript中的注释方式有以下两种：",
        "使用 <code>//</code> 来告诉JavaScript来忽略当前行的代码",
        "<blockquote>// This is an in-line comment.</blockquote>",
        "你也可以使用多行注释来注释你的代码，以<code>/*</code>开始，用<code>*/</code>来结束，就像下面这样：",
        "<blockquote>/* This is a <br>   multi-line comment */</blockquote>",
        "<strong>最佳实践</strong><br>你应该给你写的代码添加注释，来让你的代码看起来更加地清晰易懂。良好的注释能够清晰地传达你写的代码的意图&mdash;对于那些读你的代码的人来说<em>以及</em>未来你看到它的时候，还能理解这段代码的意图。",
        "<h4>任务</h4>",
        "尝试创建这两种类型的注释。"
      ],
      "challengeSeed": [
        ""
      ],
      "solutions": [
        "// Fake Comment\n/* Another Comment */"
      ],
      "tests": [
        "assert(code.match(/(\\/\\/)...../g), 'message: 创建一个 <code>//</code> 样式的注释, 被注释的文本至少要包含5个字符.');",
        "assert(code.match(/(\\/\\*)[\\w\\W]{5,}(?=\\*\\/)/gm), 'message: 创建一个 <code>/* */</code> 样式的注释, 被注释的文本至少要包含5个字符.');",
        "assert(code.match(/(\\*\\/)/g), 'message: 确保你有使用<code>*/</code>关闭注释.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c443eddfaeb5bdef",
      "title": "Declare JavaScript Variables",
      "description": [
        "在计算机科学中, <code>data</code>(数据)就是一切，因为它对于计算机的意义重大。JavaScript提供七种不同的<dfn>data types</dfn>(数据类型)，它们是<code>undefined</code>（未定义）, <code>null</code>（空）, <code>boolean</code>（布尔型）, <code>string</code>（字符串）, <code>symbol</code>(符号), <code>number</code>（数字）, and <code>object</code>（对象）。",
        "举个例子, 计算机能够分辨不同的数字, 例如数字 <code>12</code>和 <code>strings</code>，<code>\"12\"</code>和<code>\"dog\"</code>, 或<code>\"123 cats\"</code>, 都是字母的集合。 计算机能够精确地操作数字， 但是对于字符串却无能为力。",
        "<code>Variables</code>（变量）允许计算机以一种动态的形式来存储和操作数据，通过操作指向数据的指针而不是数据本身来避免了内存泄露，以上的七种数据类型都可以存储到一个变量（variable）中。",
        "<code>Variables</code> 非常类似于你在数学中使用的x,y变量, 这意味着它们都是以一个简单命名的名字来代替我们赋值给它的数据。计算机中的<code>variables</code>（变量）与数学中的变量不同的是，计算机可以在不同的时间存储不同类型的变量。",
        "通过在变量的前面使用关键字<code>var</code>，我们告诉 JavaScript 来创建或者 <dfn>declare</dfn>（声明）一个变量,就像这样：",
        "<blockquote>var ourName;</blockquote>",
        "上面代码的意思是创建一个名为<code>ourName</code>的<code>variable</code>（变量），在JavaScript中我们使用分号来结束一段声明。",
        "<code>Variable</code> （变量）的名字可以由数字、字母、<code>$</code> 或者 <code>_</code>组成，但是不能包含空格或者以数字为首。",
        "<h4>任务</h4>",
        "使用<code>var</code> 关键字来创建一个名为<code>myName</code>的变量。",
        "<strong>提示</strong><br>如果遇到困难了，请看下<code>ourName</code>的例子是怎么写的。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourName;",
        "",
        "// 请在这条注释以下定义 myName 变量",
        ""
      ],
      "tail": [
        "if(typeof myName !== \"undefined\"){(function(v){return v;})(myName);}"
      ],
      "solutions": [
        "var myName;"
      ],
      "tests": [
        "assert(/var\\s+myName\\s*;/.test(code), 'message: 你需要使用<code>var</code>关键字定义一个变量<code>myName</code>, 并使用分号结尾。');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244a8",
      "title": "Storing Values with the Equal Operator",
      "description": [
        "在JavaScript中，你可以通过assignment(分配)操作符把一个值存储到变量中。",
        "<code>myVariable = 5;</code>",
        "把<code>Number</code>数字<code>5</code>赋给变量<code>myVariable</code>。",
        "赋值过程是从右到左进行的。所有 <code>=</code> 操作符右边的值都会被赋到左边的变量。",
        "<blockquote>myVar = 5;<br>myNum = myVar;</blockquote>",
        "数值 <code>5</code> 被赋给变量 <code>myVar</code> 中， 然后变量 <code>myVar</code> 又赋给变量 <code>myNum</code> ，这样子 <code>myNum</code> 变量中的值也是 <code>5</code> 了。",
        "<h4>任务</h4>",
        "把数值 <code>7</code> 赋给变量 <code>a</code>。",
        "把变量 <code>a</code> 中的内容赋给变量 <code>b</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 初始化变量",
        "var a;",
        "var b = 2;",
        "",
        "// 请把你的代码写在这条注释以下",
        ""
      ],
      "tail": [
        "(function(a,b){return \"a = \" + a + \", b = \" + b;})(a,b);"
      ],
      "solutions": [
        "var a;\nvar b = 2;\na = 7;\nb = a;"
      ],
      "tests": [
        "assert(/var a;/.test(code) && /var b = 2;/.test(code), 'message: 不要修改注释上方的代码');",
        "assert(typeof a === 'number' && a === 7, 'message: <code>a</code> 的值应该是 7');",
        "assert(typeof b === 'number' && b === 7, 'message: <code>b</code> 的值应该是 7');",
        "assert(/b\\s*=\\s*a\\s*;/g.test(code), 'message: 你需要用<code>=</code>把<code>a</code>的值赋给<code>b</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244a9",
      "title": "Initializing Variables with the Equal Operator",
      "description": [
        "通常地我们会在<dfn>initialize</dfn>开始声明变量的时候就会给变量赋一个初始值。",
        "<code>var myVar = 0;</code>",
        "创建一个名为 <code>myVar</code> 的变量并指定一个初始值 <code>0</code>。",
        "<h4>任务</h4>",
        "通过关键字 <code>var</code> 定义一个变量 <code>a</code> 并且给它一个初始值 <code>9</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 举例",
        "var ourVar = 19;",
        "",
        "// 请把你的代码写在这条注释以下",
        ""
      ],
      "tail": [
        "if(typeof a !== 'undefined') {(function(a){return \"a = \" + a;})(a);} else { (function() {return 'a is undefined';})(); }"
      ],
      "solutions": [
        "var a = 9;"
      ],
      "tests": [
        "assert(/var\\s+a\\s*=\\s*9\\s*/.test(code), 'message: 你需要初始化 <code>a</code> 的值为 <code>9</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244aa",
      "title": "Understanding Uninitialized Variables",
      "description": [
        "当 JavaScript 中的变量被声明的时候，程序内部会给它一个初始值 <code>undefined</code>。当你对一个值为 <code>undefined</code> 的变量进行运算操作的时候，算出来的结果将会是 <code>NaN</code>，<code>NaN</code> 的意思是 <dfn>\"Not a Number\"</dfn>。当你用一个没有 <code>定义</code> 的变量来做字符串连接操作的时候，它会如实的输出<code>\"undefined\"</code>。",
        "<h4>任务</h4>",
        "定义3个变量 <code>a</code>、<code>b</code>、<code>c</code> ，并且分别给他们赋值：<code>5</code>、<code>10</code>、<code>\"I am a\"</code> ，这样它们就不会是 <code>undefined</code>（未定义的了）。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 初始化变量",
        "var a;",
        "var b;",
        "var c;",
        "",
        "// 请只修改这条注释以上的代码",
        "",
        "a = a + 1;",
        "b = b + 5;",
        "c = c + \" String!\";",
        ""
      ],
      "tail": [
        "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = '\" + c + \"'\"; })(a,b,c);"
      ],
      "solutions": [
        "var a = 5;\nvar b = 10;\nvar c = \"I am a\";\na = a + 1;\nb = b + 5;\nc = c + \" String!\";"
      ],
      "tests": [
        "assert(typeof a === 'number' && a === 6, 'message: <code>a</code> 应该是已经定义的, 并且值为 <code>6</code>');",
        "assert(typeof b === 'number' && b === 15, 'message: <code>b</code> 应该是已经定义的, 并且值为 <code>15</code>');",
        "assert(!/undefined/.test(c) && c === \"I am a String!\", 'message: <code>c</code> 不能包含 <code>undefined</code>, 并且值应该为 \"I am a String!\"');",
        "assert(/a = a \\+ 1;/.test(code) && /b = b \\+ 5;/.test(code) && /c = c \\+ \" String!\";/.test(code), 'message: 不要修改<code>// Do not change code below this line</code>下面的代码');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ab",
      "title": "Understanding Case Sensitivity in Variables",
      "description": [
        "在 JavaScript 中所有的变量都是大小写敏感的。这意味着你要区别对待大写字母和小写字母。",
        "<code>MYVAR</code>与<code>MyVar</code>和<code>myvar</code> 是截然不同的变量。这就有可能导致多个截然不同的变量却有着有相似的名字。正是由于以上原因所以强烈地建议你, <em>不要</em> 使用这一特性。（以免给自己带来麻烦）",
        "<h4>最佳实践</h4>",
        "使用 <dfn>驼峰命名法</dfn> 来书写一个 Javascript 变量，在 <dfn>驼峰命名法</dfn> 中，变量名的第一个单词的首写字母小写，后面的单词的第一个字母大写。",
        "<strong>举个栗子:</strong>",
        "<blockquote>var someVariable;<br>var anotherVariableName;<br>var thisVariableNameIsTooLong;</blockquote>",
        "<h4>任务</h4>",
        "修正声明的变量，让它们的命名符合 <dfn>驼峰命名法</dfn> 的规范。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 初始化变量",
        "var StUdLyCapVaR;",
        "var properCamelCase;",
        "var TitleCaseOver;",
        "",
        "// 给变量赋值",
        "STUDLYCAPVAR = 10;",
        "PRoperCAmelCAse = \"A String\";",
        "tITLEcASEoVER = 9000;"
      ],
      "solutions": [
        "var studlyCapVar;\nvar properCamelCase;\nvar titleCaseOver;\n\nstudlyCapVar = 10;\nproperCamelCase = \"A String\";\ntitleCaseOver = 9000;"
      ],
      "tests": [
        "assert(typeof studlyCapVar !== 'undefined' && studlyCapVar === 10, 'message: <code>studlyCapVar</code> 应该被定义并且值为 <code>10</code>');",
        "assert(typeof properCamelCase !== 'undefined' && properCamelCase === \"A String\", 'message: <code>properCamelCase</code> 应该被定义并且值为 <code>\"A String\"</code>');",
        "assert(typeof titleCaseOver !== 'undefined' && titleCaseOver === 9000, 'message: <code>titleCaseOver</code> 应该被定义并且值为 <code>9000</code>');",
        "assert(code.match(/studlyCapVar/g).length === 2, 'message: <code>studlyCapVar</code> 应该同时在声明和赋值时使用驼峰命名法');",
        "assert(code.match(/properCamelCase/g).length === 2, 'message: <code>properCamelCase</code> 应该同时在声明和赋值时使用驼峰命名法');",
        "assert(code.match(/titleCaseOver/g).length === 2, 'message: <code>titleCaseOver</code> 应该同时在声明和赋值时使用驼峰命名法');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb3bdef",
      "title": "Add Two Numbers with JavaScript",
      "description": [
        "现在让我们来尝试在JavaScript中做加法运算。",
        "JavaScript 中使用 <code>+</code> 号来让两个数字执行加法运算。",
        "",
        "<strong>举例</strong>",
        "<blockquote>myVar = 5 + 10; // 等于 15</blockquote>",
        "",
        "<h4>任务</h4>",
        "改变数字 <code>0</code> 让变量 sum 的值为 <code>20</code>."
      ],
      "challengeSeed": [
        "var sum = 10 + 0;",
        ""
      ],
      "tail": [
        "(function(z){return 'sum='+z;})(sum);"
      ],
      "solutions": [
        "var sum = 10 + 10;"
      ],
      "tests": [
        "assert(sum === 20, 'message: <code>sum</code> 应该等于 <code>20</code>');",
        "assert(/\\+/.test(code), 'message: 要使用 <code>+</code> 运算符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb4bdef",
      "title": "Subtract One Number from Another with JavaScript",
      "description": [
        "我们也可以在 JavaScript 中执行减法运算。",
        "JavaScript 中使用 <code>-</code> 来做减法运算。",
        "",
        "<strong>举例</strong>",
        "<blockquote>myVar = 12 - 6; // 等于 6</blockquote>",
        "",
        "<h4>任务</h4>",
        "改变数字 <code>0</code> 让变量 difference 的值为 <code>12</code>。"
      ],
      "challengeSeed": [
        "var difference = 45 - 0;",
        "",
        ""
      ],
      "tail": [
        "(function(z){return 'difference='+z;})(difference);"
      ],
      "solutions": [
        "var difference = 45 - 33;"
      ],
      "tests": [
        "assert(difference === 12, 'message: 需要使 <code>difference</code> 的值等于 12.');",
        "assert((code).match(/difference/g).length === 1,'message: 只能修改第一行代码');",
        "assert(/\\d+\\s*-\\s*\\d+/.test(code),'message: 使用 <code>-</code> 运算符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1231c1c11feddfaeb5bdef",
      "title": "Multiply Two Numbers with JavaScript",
      "description": [
        "我们也可在 JavaScript 中使用乘法运算。",
        "JavaScript 使用这个 <code>*</code> 符号来让两个数字相乘。",
        "",
        "<strong>举例</strong>",
        "<blockquote>myVar = 13 * 13; // 把 169 赋值给 myVar</blockquote>",
        "",
        "<h4>任务</h4>",
        "改变数值 <code>0</code> 来让变量 product 的值等于 <code>80</code>。"
      ],
      "challengeSeed": [
        "var product = 8 * 0;",
        "",
        ""
      ],
      "tail": [
        "(function(z){return 'product = '+z;})(product);"
      ],
      "solutions": [
        "var product = 8 * 10;"
      ],
      "tests": [
        "assert(product === 80,'message: 需要使 <code>product</code> 的值等于 80');",
        "assert(/\\*/.test(code), 'message: 使用 <code>*</code> 运算符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb6bdef",
      "title": "Divide One Number by Another with JavaScript",
      "description": [
        "我们可以在 JavaScript 中做除法运算。",
        "JavaScript 中使用 <code>/</code> 符号做除法运算。",
        "",
        "<strong>举例</strong>",
        "<blockquote>myVar = 16 / 2; // 把 8 赋值给 myVar</blockquote>",
        "",
        "<h4>任务</h4>",
        "改变数值<code>0</code>来让变量 <code>quotient</code> 的值等于<code>2</code>。"
      ],
      "challengeSeed": [
        "var quotient = 66 / 0;",
        "",
        ""
      ],
      "tail": [
        "(function(z){return 'quotient = '+z;})(quotient);"
      ],
      "solutions": [
        "var quotient = 66 / 33;"
      ],
      "tests": [
        "assert(quotient === 2, 'message: 需要使 <code>quotient</code> 的值等于 2.');",
        "assert(/\\d+\\s*\\/\\s*\\d+/.test(code), 'message: 使用 <code>/</code> 运算符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ac",
      "title": "Increment a Number with JavaScript",
      "description": [
        "使用 <code>++</code> ，我们可以很容易地对变量进行自增或者<code>+1</code>运算。",
        "<code>i++;</code>",
        "等效于",
        "<code>i = i + 1;</code>",
        "<strong>提示</strong><br><code>i++;</code>这种写法，省去了书写=符号的必要。",
        "<h4>任务</h4>",
        "重写代码，使用 <code>++</code> 来对变量 <code>myVar</code> 进行自增操作。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myVar = 87;",
        "",
        "// 请只修改这条注释以下的代码",
        "myVar = myVar + 1;",
        ""
      ],
      "tail": [
        "(function(z){return 'myVar = ' + z;})(myVar);"
      ],
      "solutions": [
        "var myVar = 87;\nmyVar++;"
      ],
      "tests": [
        "assert(myVar === 88, 'message: <code>myVar</code> 应该等于 <code>88</code>');",
        "assert(/myVar\\s*[+]{2}/.test(code), 'message: 使用 <code>++</code> 运算符');",
        "assert(/var myVar = 87;/.test(code), 'message: 不要修改注释上方的代码');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ad",
      "title": "Decrement a Number with JavaScript",
      "description": [
        "使用自减符号 <code>--</code> ，你可以很方便地对一个变量执行 <dfn>自减</dfn> 或者减一操作。",
        "<code>i--;</code>",
        "等效于",
        "<code>i = i - 1;</code>",
        "<strong>提示</strong><br><code>i--;</code>这种写法，省去了书写等号的必要。",
        "<h4>任务</h4>",
        "重写代码，使用 <code>--</code> 符号对 <code>myVar</code> 执行自减操作。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myVar = 11;",
        "",
        "// 请只修改这条注释以下的代码",
        "myVar = myVar - 1;",
        ""
      ],
      "tail": [
        "(function(z){return 'myVar = ' + z;})(myVar);"
      ],
      "solutions": [
        "var myVar = 11;\nmyVar--;"
      ],
      "tests": [
        "assert(myVar === 10, 'message: <code>myVar</code> 应该等于 <code>10</code>');",
        "assert(/myVar\\s*[-]{2}/.test(code), 'message: 对<code>myVar</code>使用 <code>--</code> 运算符 ');",
        "assert(/var myVar = 11;/.test(code), 'message: 不要修改上面的代码');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1391c1c11feddfaeb4bdef",
      "title": "Create Decimal Numbers with JavaScript",
      "description": [
        "我们也可以把小数存储到变量中。小数也被称作 <dfn>浮点数</dfn> 。",
        "<strong>提示</strong><br>不是所有的实数都可以用 <dfn>浮点数</dfn> 来表示。因为可能存在四舍五入的错误，<a href=\"https://en.wikipedia.org/wiki/Floating_point#Accuracy_problems\" target=\"_blank\">详情在这儿</a>。",
        "<h4>任务</h4>",
        "创建一个变量 <code>myDecimal</code> 并给它复制一个浮点数。 (e.g. <code>5.7</code>)。"
      ],
      "challengeSeed": [
        "var ourDecimal = 5.7;",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "(function(){if(typeof myDecimal !== \"undefined\"){return myDecimal;}})();"
      ],
      "solutions": [
        "var myDecimal = 9.9;"
      ],
      "tests": [
        "assert(typeof myDecimal === \"number\", 'message: <code>myDecimal</code> 应该是一个数字.');",
        "assert(myDecimal % 1 != 0, 'message: <code>myDecimal</code> 应该包含小数点'); "
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7993c9c69feddfaeb7bdef",
      "title": "Multiply Two Decimals with JavaScript",
      "description": [
        "在 JavaScript 中，你也可以用小数进行计算，就像整数一样。",
        "让我们把两个小数相乘，并得到它们相乘的结果（product）。",
        "<h4>任务</h4>",
        "改变 <code>0.0</code> 的数值让变量<code>product</code>的值等于 <code>5.0</code>。"
      ],
      "challengeSeed": [
        "var product = 2.0 * 0.0;",
        "",
        ""
      ],
      "tail": [
        "(function(y){return 'product = '+y;})(product);"
      ],
      "solutions": [
        "var product = 2.0 * 2.5;"
      ],
      "tests": [
        "assert(product === 5.0, 'message: <code>product</code> 的值应该等于 <code>5.0</code>.');",
        "assert(/\\*/.test(code), 'message: 需要使用 <code>*</code> 运算符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7993c9ca9feddfaeb7bdef",
      "title": "Divide one Decimal by Another with JavaScript",
      "description": [
        "现在让我们来用一个小数做除法操作。",
        "<h4>任务</h4>",
        "改变数值 <code>0.0</code> 的值让变量 <code>quotient</code> 的值等于 <code>2.2</code>."
      ],
      "challengeSeed": [
        "var quotient = 0.0 / 2.0;",
        "",
        ""
      ],
      "tail": [
        "(function(y){return 'quotient = '+y;})(quotient);"
      ],
      "solutions": [
        "var quotient = 4.4 / 2.0;"
      ],
      "tests": [
        "assert(quotient === 2.2, 'message: <code>quotient</code> 的值应该等于 <code>2.2</code>.');",
        "assert(/\\//.test(code), 'message: 需要使用 <code>/</code> 运算符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ae",
      "title": "Finding a Remainder in JavaScript",
      "description": [
        "现在我们用<code>%</code>运算符来取余。",
        "<strong>举例</strong>",
        "<blockquote>5 % 2 = 1</blockquote>",
        "<strong>用法</strong><br>在数学中，看一个数是奇数还是偶数，只需要看这个数除以2得到的余数是0还是1。  ",
        "<blockquote>17 % 2 = 1 (17 is 奇数)<br>48 % 2 = 0 (48 is 偶数)</blockquote>",
        "<h4>任务</h4>",
        "使用 <code>%</code> 操作符，计算11除以3剩下的余数，并把余数赋给变量remainder。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 请只修改这条注释以下的代码",
        "",
        "var remainder;",
        ""
      ],
      "tail": [
        "(function(y){return 'remainder = '+y;})(remainder);"
      ],
      "solutions": [
        "var remainder =  11 % 3;"
      ],
      "tests": [
        "assert(remainder === 2, 'message: <code>remainder</code> 的值应该等于 <code>2</code>');",
        "assert(/\\d+\\s*%\\s*\\d+/.test(code), 'message: 需要使用 <code>%</code> 运算符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244af",
      "title": "Assignment with Plus Equals",
      "description": [
        "在编程当中，通常通过赋值来修改变量的内容。请记住，先计算<code>=</code>右边，然后把计算出来的结果赋给左边。",
        "<code>myVar = myVar + 5;</code>",
        "以上是最常见的运算赋值语句，先运算、再赋值。",
        "还有一类操作符是一步到位既做运算也赋值的。",
        "这类操作符的其中一种就是 <code>+=</code> 运算符。",
        "<code>myVar += 5;</code> 也是把数值 <code>5</code> 加到变量 <code>myVar</code>上。",
        "<h4>任务</h4>",
        "使用 <code>+=</code> 操作符实现同样的效果。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var a = 3;",
        "var b = 17;",
        "var c = 12;",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "a = a + 12;",
        "b = 9 + b;",
        "c = c + 7;",
        ""
      ],
      "tail": [
        "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
      ],
      "solutions": [
        "var a = 3;\nvar b = 17;\nvar c = 12;\n\na += 12;\nb += 9;\nc += 7;"
      ],
      "tests": [
        "assert(a === 15, 'message: <code>a</code> 应该等于 <code>15</code>');",
        "assert(b === 26, 'message: <code>b</code> 应该等于 <code>26</code>');",
        "assert(c === 19, 'message: <code>c</code> 应该等于 <code>19</code>');",
        "assert(code.match(/\\+=/g).length === 3, 'message: 你应该对每个变量使用 <code>+=</code> 操作符');",
        "assert(/var a = 3;/.test(code) && /var b = 17;/.test(code) && /var c = 12;/.test(code), 'message: 不要修改上面的代码');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b0",
      "title": "Assignment with Minus Equals",
      "description": [
        "与 <code>+=</code> 操作符类似，<code>-=</code> 操作符用来对一个变量进行减法赋值操作。",
        "<code>myVar = myVar - 5;</code>",
        "将会从变量 <code>myVar</code> 中减去数值 <code>5</code>。也可以写成这种形式：",
        "<code>myVar -= 5;</code>",
        "<h4>任务</h4>",
        "使用 <code>-=</code> 操作符实现同样的效果。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var a = 11;",
        "var b = 9;",
        "var c = 3;",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "a = a - 6;",
        "b = b - 15;",
        "c = c - 1;",
        "",
        ""
      ],
      "tail": [
        "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
      ],
      "solutions": [
        "var a = 11;\nvar b = 9;\nvar c = 3;\n\na -= 6;\nb -= 15;\nc -= 1;\n\n"
      ],
      "tests": [
        "assert(a === 5, 'message: <code>a</code> 应该等于 <code>5</code>');",
        "assert(b === -6, 'message: <code>b</code> 应该等于 <code>-6</code>');",
        "assert(c === 2, 'message: <code>c</code> 应该等于 <code>2</code>');",
        "assert(code.match(/-=/g).length === 3, 'message: 应该对每个变量使用 <code>-=</code> 操作符');",
        "assert(/var a = 11;/.test(code) && /var b = 9;/.test(code) && /var c = 3;/.test(code), 'message: 不要修改上面的代码');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b1",
      "title": "Assignment with Times Equals",
      "description": [
        "<code>*=</code> 操作符是让变量与一个数相乘并赋值。",
        "<code>myVar = myVar * 5;</code>",
        "将会把变量 <code>myVar</code> 与数值 <code>5</code>相乘。也可以写作这样的形式: ",
        "<code>myVar *= 5;</code>",
        "<h4>任务</h4>",
        "使用 <code>*=</code>操作符实现同样的效果。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var a = 5;",
        "var b = 12;",
        "var c = 4.6;",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "a = a * 5;",
        "b = 3 * b;",
        "c = c * 10;",
        "",
        ""
      ],
      "tail": [
        "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
      ],
      "solutions": [
        "var a = 5;\nvar b = 12;\nvar c = 4.6;\n\na *= 5;\nb *= 3;\nc *= 10;"
      ],
      "tests": [
        "assert(a === 25, 'message: <code>a</code> 应该等于 <code>25</code>');",
        "assert(b === 36, 'message: <code>b</code> 应该等于 <code>36</code>');",
        "assert(c === 46, 'message: <code>c</code> 应该等于 <code>46</code>');",
        "assert(code.match(/\\*=/g).length === 3, 'message: 应该对每个变量使用 <code>*=</code> 操作符');",
        "assert(/var a = 5;/.test(code) && /var b = 12;/.test(code) && /var c = 4\\.6;/.test(code), 'message: 不要修改上面的代码');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b2",
      "title": "Assignment with Divided by Equals",
      "description": [
        "<code>/=</code> 操作符是让变量与另一个数相除并赋值。",
        "<code>myVar = myVar / 5;</code>",
        "会把变量 <code>myVar</code> 的值除于 <code>5</code>。等价于: ",
        "<code>myVar /= 5;</code>",
        "<h4>任务</h4>",
        "使用 <code>/=</code>操作符实现同样的效果。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var a = 48;",
        "var b = 108;",
        "var c = 33;",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "a = a / 12;",
        "b = b / 4;",
        "c = c / 11;",
        ""
      ],
      "tail": [
        "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
      ],
      "solutions": [
        "var a = 48;\nvar b = 108;\nvar c = 33;\n\na /= 12;\nb /= 4;\nc /= 11;"
      ],
      "tests": [
        "assert(a === 4, 'message: <code>a</code> 应该等于 <code>4</code>');",
        "assert(b === 27, 'message: <code>b</code> 应该等于 <code>27</code>');",
        "assert(c === 3, 'message: <code>c</code> 应该等于 <code>3</code>');",
        "assert(code.match(/\\/=/g).length === 3, 'message: 应该对每个变量使用 <code>/=</code> 操作符');",
        "assert(/var a = 48;/.test(code) && /var b = 108;/.test(code) && /var c = 33;/.test(code), 'message: 不要修改上面的代码');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b3",
      "title": "Convert Celsius to Fahrenheit",
      "description": [
        "为了测试你的学习效果，我们来做一个摄氏度转华氏度的小应用。",
        "从<code>Celsius</code>摄氏度转换为<code>Fahrenheit</code>华氏度的算法是：摄氏度的温度乘于9除于5，再加上32。",
        "创建一个变量 <code>fahrenheit</code>，然后计算出摄氏度对应的华氏度。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function convert(celsius) {",
        "  // 请把你的代码写在这条注释以下",
        "  ",
        "",
        "  // 请把你的代码写在这条注释以上",
        "    return fahrenheit;",
        "}",
        "",
        "convert(30);  // 你可以修改这一行来测试你的代码"
      ],
      "solutions": [
        "function convert(celsius) {\n  var fahrenheit = celsius * 9/5 + 32;\n  if ( typeof fahrenheit !== 'undefined' ) {\n  return fahrenheit;\n  } else {\n    return 'fahrenheit not defined';\n  }\n}"
      ],
      "tests": [
        "assert(typeof convert(0) === 'number', 'message: <code>convert(0)</code> 应该返回一个数字');",
        "assert(convert(-30) === -22, 'message: <code>convert(-30)</code> 应该返回 <code>-22</code>');",
        "assert(convert(-10) === 14, 'message: <code>convert(-10)</code> 应该返回 <code>14</code>');",
        "assert(convert(0) === 32, 'message: <code>convert(0)</code> 应该返回 <code>32</code>');",
        "assert(convert(20) === 68, 'message: <code>convert(20)</code> 应该返回 <code>68</code>');",
        "assert(convert(30) === 86, 'message: <code>convert(30)</code> 应该返回 <code>86</code>');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c444eddfaeb5bdef",
      "title": "Declare String Variables",
      "description": [
        "先前我们使用过的代码：",
        "<code>var myName = \"your name\";</code>",
        "<code>\"your name\"</code> 被称作 <dfn>字符串</dfn>。 字符串是用单或双引号包裹起来的一连串的零个或多个字符。",
        "<h4>任务</h4>",
        "创建两个新的 <code>字符串</code> 变量：<code>myFirstName</code> 和 <code>myLastName</code> 分别为它们赋上你的姓和名的值。"
      ],
      "challengeSeed": [
        "// 举例",
        "var firstName = \"Alan\";",
        "var lastName = \"Turing\";",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        "",
        ""
      ],
      "tail": [
        "if(typeof myFirstName !== \"undefined\" && typeof myLastName !== \"undefined\"){(function(){return myFirstName + ', ' + myLastName;})();}"
      ],
      "solutions": [
        "var myFirstName = \"Alan\";\nvar myLastName = \"Turing\";"
      ],
      "tests": [
        "assert((function(){if(typeof myFirstName !== \"undefined\" && typeof myFirstName === \"string\" && myFirstName.length > 0){return true;}else{return false;}})(), 'message: <code>myFirstName</code> 应该是一个字符串,并且至少包含一个字符.');",
        "assert((function(){if(typeof myLastName !== \"undefined\" && typeof myLastName === \"string\" && myLastName.length > 0){return true;}else{return false;}})(), 'message: <code>myLastName</code> 应该是一个字符串,并且至少包含一个字符.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b5",
      "title": "Escaping Literal Quotes in Strings",
      "description": [
        "当你定义一个字符串必须要用单引号或双引号来包裹它。那么当你需要在字符串中使用一个: <code>\"</code> 或者 <code>'</code> 时该怎么办呢?",
        "在 JavaScript 中，你可以通过在引号前面使用 <dfn>反斜杠</dfn> (<code>\\</code>) 来转义引号。",
        "<code>var sampleStr = \"Alan said, \\\"Peter is learning JavaScript\\\".\";</code>",
        "这标志着提醒 JavaScript 单引号或双引号并不是字符串的结尾，而是出现在字符串内的字符。所以，如果你要打印字符串到控制台，你将得到：",
        "<code>Alan said, \"Peter is learning JavaScript\".</code>",
        "<h4>任务</h4>",
        "使用 <dfn>反斜杠</dfn> 将一个字符串赋值给变量 <code>myStr</code>，以便如果你要打印到控制台，你会看到：",
        "<code>I am a \"double quoted\" string inside \"double quotes\"</code>"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myStr; // 请修改这一行",
        "",
        ""
      ],
      "tail": [
        "(function(){",
        "  if(typeof myStr === 'string') {",
        "    return \"myStr = \" + myStr;",
        "  } else {",
        "    return \"myStr is undefined\";",
        "  }",
        "})();"
      ],
      "solutions": [
        "var myStr = \"I am a \\\"double quoted\\\" string inside \\\"double quotes\\\"\";"
      ],
      "tests": [
        "assert(code.match(/\\\\\"/g).length === 4 && code.match(/[^\\\\]\"/g).length === 2, 'message: 你的代码中应该包含两个双引号 (<code>&quot;</code>) 以及四个转义的双引号 (<code>&#92;&quot;</code>) ');",
        "assert(myStr === \"I am a \\\"double quoted\\\" string inside \\\"double quotes\\\"\", 'message: <code>myStr</code> 应该的值应该为 (<code>\"I am a \"double quoted\" string inside \"double quotes\"\"</code>).');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b4",
      "title": "Quoting Strings with Single Quotes",
      "description": [
        "在 JavaScript 中的 <dfn>字符串</dfn> 要用单引号或双引号来包裹它，只要你在开始和结束都使用相同类型的引号，单引号和双引号的功能在JavaScript中是相同的。",
        "<code>\"This string has \\\"double quotes\\\" in it\"</code>",
        "当我们需要在字符串中使用与开头结尾相同的引号时，我们需要对引号进行 <dfn>转义</dfn> 。如果你有很多双引号的字符串，使用转义字符可能导致难以阅读。这时候可以使用单引号。",
        "<code>'This string has \"double quotes\" in it. And \"probably\" lots of them.'</code>",
        "<h4>任务</h4>",
        "更改myStr字符串的双引号为单引号，并移除转义符号。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myStr = \"<a href=\\\"http://www.example.com\\\" target=\\\"_blank\\\">Link</a>\";",
        "",
        ""
      ],
      "tail": [
        "(function() { return \"myStr = \" + myStr; })();"
      ],
      "solutions": [
        "var myStr = '<a href=\"http://www.example.com\" target=\"_blank\">Link</a>';"
      ],
      "tests": [
        "assert(!/\\\\/g.test(code), 'message: 移除所有的 <code>反斜线</code> (<code>\\</code>)');",
        "assert(code.match(/\"/g).length === 4 && code.match(/'/g).length === 2, 'message: 你的代码中应该包含两个单引号 <code>&#39;</code> 以及四个双引号 <code>&quot;</code>');",
        "assert(myStr === '<a href=\"http://www.example.com\" target=\"_blank\">Link</a>', 'message: 仅仅移除反斜线 <code>\\</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b6",
      "title": "Escape Sequences in Strings",
      "description": [
        "字符串中的转义序列",
        "引号不是字符串中唯一的可以被转义字符。下面是常见的转义序列列表:",
        "<table class=\"table table-striped\"><thead><tr><th>Code</th><th>Output</th></tr></thead><tbody><tr><td>\\'</td><td>单引号</td></tr><tr><td>\\\"</td><td>双引号</td></tr><tr><td>\\\\</td><td>反斜杠符</td></tr><tr><td>\\n</td><td>换行符</td></tr><tr><td>\\r</td><td>回车符</td></tr><tr><td>\\t</td><td>制表符</td></tr><tr><td>\\b</td><td>退格符</td></tr><tr><td>\\f</td><td>换页符</td></tr></tbody></table>",
        "<em>注意，如果你想要显示一个反斜杠就必须要转义它。</em>",
        "<h4>任务</h4>",
        "按照下面的顺序，并且用空格来分割：<br><code>反斜杠 制表符 退格符 回车符 换行符</code> 并把它赋值给变量 <code>myStr</code>"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myStr; // 请修改这一行",
        "",
        ""
      ],
      "tail": [
        "(function(){",
        "if (myStr !== undefined){",
        "return 'myStr = '+ JSON.stringify(myStr);}",
        "else{return null;}})();"
      ],
      "solutions": [
        "var myStr = \"\\\\ \\t \\b \\r \\n\";"
      ],
      "tests": [
        "assert(myStr === \"\\\\ \\t \\b \\r \\n\", 'message: <code>myStr</code> 应该包含被转义的字符, 并且按照 <code>反斜杠 制表符 退格符 回车符 换行符</code> 的顺序用空格分开');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b7",
      "title": "Concatenating Strings with Plus Operator",
      "description": [
        "在 JavaScript 中，当 <code>+</code> 操作符与 <code>字符串</code> 一起使用的时候，它被称作 <dfn>连接</dfn> 操作符。你可以通过和其他字符串<dfn>连接</dfn> 来创建一个新的字符串。",
        "<strong>举个例子</strong>",
        "<blockquote>'My name is Alan,' + ' I concatenate.'</blockquote>",
        "<strong>注意</strong><br>当心空格。连接操作不会添加两个字符串之外的空格，所以想加上空格的话，你需要自己在字符串里面添加。",
        "<h4>任务</h4>",
        "使用 <code>+</code> 操作，把字符串 <code>\"This is the start. \"</code> 和 <code>\"This is the end.\"</code> 连接起来并赋值给变量 <code>myStr</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 举例",
        "var ourStr = \"I come first. \" + \"I come second.\";",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var myStr;",
        "",
        ""
      ],
      "tail": [
        "(function(){",
        "  if(typeof myStr === 'string') {",
        "    return 'myStr = \"' + myStr + '\"';",
        "  } else {",
        "    return 'myStr is not a string';",
        "  }",
        "})();"
      ],
      "solutions": [
        "var ourStr = \"I come first. \" + \"I come second.\";\nvar myStr = \"This is the start. \" + \"This is the end.\";"
      ],
      "tests": [
        "assert(myStr === \"This is the start. This is the end.\", 'message: <code>myStr</code> 的值应该是 <code>This is the start. This is the end.</code>');",
        "assert(code.match(/([\"']).*([\"'])\\s*\\+\\s*([\"']).*([\"'])/g).length > 1, 'message: 使用 <code>+</code> 操作符构建 <code>myStr</code>');",
        "assert(/var\\s+myStr/.test(code), 'message: <code>myStr</code> 应该使用 <code>var</code> 关键字来声明.');",
        "assert(/myStr\\s*=/.test(code), 'message: 确保有给 <code>myStr</code> 赋值.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b8",
      "title": "Concatenating Strings with the Plus Equals Operator",
      "description": [
        "我们还可以使用 <code>+=</code> 运算符来 <dfn>连接</dfn> 字符串到现有字符串的结尾。对于那些非常长的字符串来说，这一操作是非常有用的。",
        "<strong>注意</strong><br>当心空格。连接操作不会添加两个字符串外面的空格，所以如果想要加上空格的话，你需要自己在字符串里面添加。",
        "<h4>任务</h4>",
        "通过使用 <code>+=</code> 操作符来连接这两个字符串:<br><code>\"This is the first sentence. \"</code> 和 <code>\"This is the second sentence.\"</code> 并赋给变量 <code>myStr</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 举例",
        "var ourStr = \"I come first. \";",
        "ourStr += \"I come second.\";",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var myStr;",
        "",
        ""
      ],
      "tail": [
        "(function(){",
        "  if(typeof myStr === 'string') {",
        "    return 'myStr = \"' + myStr + '\"';",
        "  } else {",
        "    return 'myStr is not a string';",
        "  }",
        "})();"
      ],
      "solutions": [
        "var ourStr = \"I come first. \";\nourStr += \"I come second.\";\n\nvar myStr = \"This is the first sentence. \";\nmyStr += \"This is the second sentence.\";"
      ],
      "tests": [
        "assert(myStr === \"This is the first sentence. This is the second sentence.\", 'message: <code>myStr</code> 的值应该是 <code>This is the first sentence. This is the second sentence.</code>');",
        "assert(code.match(/\\w\\s*\\+=\\s*[\"']/g).length > 1 && code.match(/\\w\\s*\\=\\s*[\"']/g).length > 1, 'message: 使用 <code>+=</code> 操作符创建 <code>myStr</code> 变量');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b9",
      "title": "Constructing Strings with Variables",
      "description": [
        "有时候你需要创建一个填字风格的字符串。",
        "通过使用连接运算符<code> + </code>，你可以插入一个或多个变量来组成一个字符串。",
        "<h4>任务</h4>",
        "把你的名字赋值给变量 <code>myName</code> ，然后把变量 <code>myName</code> 插入到字符串 <code>\"My name is \"</code> 和 <code>\" and I am swell!\"</code>之间，并把连接后的结果赋值给变量 <code>myStr</code>。 "
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 举例",
        "var ourName = \"Free Code Camp\";",
        "var ourStr = \"Hello, our name is \" + ourName + \", how are you?\";",
        "",
        "// 请只修改这条注释以下的代码",
        "var myName;",
        "var myStr;",
        "",
        ""
      ],
      "tail": [
        "(function(){",
        "  var output = [];",
        "  if(typeof myName === 'string') {",
        "    output.push('myName = \"' + myName + '\"');",
        "  } else {",
        "    output.push('myName is not a string');",
        "  }",
        "  if(typeof myStr === 'string') {",
        "    output.push('myStr = \"' + myStr + '\"');",
        "  } else {",
        "    output.push('myStr is not a string');",
        "  }",
        "  return output.join('\\n');",
        "})();"
      ],
      "solutions": [
        "var myName = \"Bob\";\nvar myStr = \"My name is \" + myName + \" and I am swell!\";"
      ],
      "tests": [
        "assert(typeof myName !== 'undefined' && myName.length > 2, 'message: <code>myName</code> 至少要包含三个字符');",
        "assert(code.match(/[\"']\\s*\\+\\s*myName\\s*\\+\\s*[\"']/g).length > 0, 'message: 使用两个 <code>+</code> 操作符创建 <code>myStr</code> 变量');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ed",
      "title": "Appending Variables to Strings",
      "description": [
        "我们不仅可以创建出多行的字符串，还可以使用加等号(<code>+=</code>)运算符来追加变量到字符串上。",
        "<h4>任务</h4>",
        "设置变量 <code>someAdjective</code> 的值，并使用 <code>+=</code> 运算符把它追加到变量 <code>myStr</code> 上。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 举例",
        "var anAdjective = \"awesome!\";",
        "var ourStr = \"Free Code Camp is \";",
        "ourStr += anAdjective;",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var someAdjective;",
        "var myStr = \"Learning to code is \";",
        ""
      ],
      "tail": [
        "(function(){",
        "  var output = [];",
        "  if(typeof someAdjective === 'string') {",
        "    output.push('someAdjective = \"' + someAdjective + '\"');",
        "  } else {",
        "    output.push('someAdjective is not a string');",
        "  }",
        "  if(typeof myStr === 'string') {",
        "    output.push('myStr = \"' + myStr + '\"');",
        "  } else {",
        "    output.push('myStr is not a string');",
        "  }",
        "  return output.join('\\n');",
        "})();"
      ],
      "solutions": [
        "var anAdjective = \"awesome!\";\nvar ourStr = \"Free Code Camp is \";\nourStr += anAdjective;\n\nvar someAdjective = \"neat\";\nvar myStr = \"Learning to code is \";\nmyStr += someAdjective;"
      ],
      "tests": [
        "assert(typeof someAdjective !== 'undefined' && someAdjective.length > 2, 'message: <code>someAdjective</code> 应该是一个至少包含三个字符的字符串');",
        "assert(code.match(/\\w\\s*\\+=\\s*someAdjective\\s*;/).length > 0, 'message: 使用 <code>+=</code> 操作符把 <code>someAdjective</code> 追加到 <code>myStr</code> 的后面');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c448eddfaeb5bdef",
      "title": "Find the Length of a String",
      "description": [
        "你可以通过在字符串变量或字符串后面写上 <code>.length</code> 来获得字符串变量 <code>字符串</code> 值的长度。",
        "<code>\"Alan Peter\".length; // 10</code>",
        "例如，我们创建了一个变量 <code>var firstName = \"Charles\"</code>，我们就可以通过使用 <code>firstName.length</code> 来获得 <code>\"Charles\"</code> 字符串的长度。",
        "<h4>任务</h4>",
        "使用 <code>.length</code> 属性来获得变量 <code>lastName</code> 的长度，并把它赋值给变量 <code>lastNameLength</code>。"
      ],
      "challengeSeed": [
        "// 举例",
        "var firstNameLength = 0;",
        "var firstName = \"Ada\";",
        "",
        "firstNameLength = firstName.length;",
        "",
        "// 初始化变量",
        "var lastNameLength = 0;",
        "var lastName = \"Lovelace\";",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "lastNameLength = lastName;",
        "",
        ""
      ],
      "tail": [
        "if(typeof lastNameLength !== \"undefined\"){(function(){return lastNameLength;})();}"
      ],
      "solutions": [
        "var firstNameLength = 0;\nvar firstName = \"Ada\";\nfirstNameLength = firstName.length;\n\nvar lastNameLength = 0;\nvar lastName = \"Lovelace\";\nlastNameLength = lastName.length;"
      ],
      "tests": [
        "assert((function(){if(typeof lastNameLength !== \"undefined\" && typeof lastNameLength === \"number\" && lastNameLength === 8){return true;}else{return false;}})(), 'message: <code>lastNameLength</code> 应该等于 8.');",
        "assert((function(){if(code.match(/\\.length/gi) && code.match(/\\.length/gi).length >= 2 && code.match(/var lastNameLength \\= 0;/gi) && code.match(/var lastNameLength \\= 0;/gi).length >= 1){return true;}else{return false;}})(), 'message: 你应该使用 <code>.length</code> 获取 <code>lastName</code> 的长度, 像这样: <code>lastName.length</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c549eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the First Character in a String",
      "description": [
        "[]叫中括号，{}叫大括号，()叫小括号。",
        "JavaScript中只有字符串类型，没有字符类型。那么如何获取到字符串中的某个字符呢？",
        "我们通过<code>[索引]</code> 来获得对应的字符。",
        "大多数现代编程语言，如JavaScript，不同于人类从1开始计数。它们是从0开始计数，这被称为 <dfn>基于零</dfn> 的索引。",
        "例如, 在单词 \"Charles\" 中索引0上的字符为 \"C\"，所以在 <code>var firstName = \"Charles\"</code> 中，你可以使用 <code>firstName[0]</code> 来获得第一个位置上的字符。",
        "<h4>任务</h4>",
        "使用<code>[索引]</code>来得到变量 <code>lastName</code> 中的第一个字符，并赋给变量 <code>firstLetterOfLastName</code> 。",
        "<strong>提示</strong><br>如果你遇到困难了，不妨看看变量 <code>firstLetterOfFirstName</code> 是如何赋值的。"
      ],
      "challengeSeed": [
        "// 举例",
        "var firstLetterOfFirstName = \"\";",
        "var firstName = \"Ada\";",
        "",
        "firstLetterOfFirstName = firstName[0];",
        "",
        "// 初始化变量",
        "var firstLetterOfLastName = \"\";",
        "var lastName = \"Lovelace\";",
        "",
        "// 请只修改这条注释以下的代码",
        "firstLetterOfLastName = lastName;",
        ""
      ],
      "tail": [
        "(function(v){return v;})(firstLetterOfLastName);"
      ],
      "solutions": [
        "var firstLetterOfLastName = \"\";\nvar lastName = \"Lovelace\";\n\n// Only change code below this line\nfirstLetterOfLastName = lastName[0];"
      ],
      "tests": [
        "assert(firstLetterOfLastName === 'L', 'message: <code>firstLetterOfLastName</code> 的值应该是 <code>L</code>.');",
        "assert(code.match(/firstLetterOfLastName\\s*=\\s*lastName\\s*\\[\\s*\\d+\\s*\\]/), 'message: 你应该使用括号');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ba",
      "title": "Understand String Immutability",
      "description": [
        "理解字符串的不可变性！当你搞懂不可变性后immutable.js对于你就是小菜一碟了。",
        "在 JavaScript 中，<code>字符串</code> 的值是 <dfn>不可变的</dfn>，这意味着一旦字符串被创建就不能被改变。",
        "例如，下面的代码：",
        "<blockquote>var myStr = \"Bob\";<br>myStr[0] = \"J\";</blockquote>",
        "是不会把变量 <code>myStr</code> 的值改变成 \"Job\" 的，因为变量 <code>myStr</code> 是不可变的。注意，这 <em>并不</em> 意味着 <code>myStr</code> 永远不能被改变，只是字符串字面量 <dfn>string literal</dfn> 的各个字符不能被改变。改变 <code>myStr</code> 中的唯一方法是重新给它赋一个值，就像这样：",
        "<blockquote>var myStr = \"Bob\";<br>myStr = \"Job\";</blockquote>",
        "<h4>任务</h4>",
        "把<code>myStr</code> 的值改为<code>Hello World</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 初始化变量",
        "var myStr = \"Jello World\";",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "myStr[0] = \"H\"; // 请修改这一行",
        "",
        ""
      ],
      "tail": [
        "(function(v){return \"myStr = \" + v;})(myStr);"
      ],
      "solutions": [
        "var myStr = \"Jello World\";\nmyStr = \"Hello World\";"
      ],
      "tests": [
        "assert(myStr === \"Hello World\", 'message: <code>myStr</code> 的值应该是 <code>Hello World</code>');",
        "assert(/myStr = \"Jello World\"/.test(code), 'message: 不要修改上面的代码');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c450eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Nth Character in a String",
      "description": [
        "你也可以使用 <code>[索引]</code>来获得一个字符串中的其他位置的字符。",
        "请记住，程序是从 <code>0</code> 开始计数，所以获取第一个字符实际上是[0]。",
        "<h4>任务</h4>",
        "让我们使用<code>[索引]</code>，把 <code>lastName</code> 变量的第三个字符赋值给 <code>thirdLetterOfLastName</code>。",
        "<strong>提示</strong><br>如果你遇到困难了，看看 <code>secondLetterOfFirstName</code> 变量是如何做的。"
      ],
      "challengeSeed": [
        "// 举例",
        "var firstName = \"Ada\";",
        "var secondLetterOfFirstName = firstName[1];",
        "",
        "// 初始化变量",
        "var lastName = \"Lovelace\";",
        "",
        "// 请只修改这条注释以下的代码",
        "var thirdLetterOfLastName = lastName;",
        "",
        ""
      ],
      "tail": [
        "(function(v){return v;})(thirdLetterOfLastName);"
      ],
      "solutions": [
        "var lastName = \"Lovelace\";\nvar thirdLetterOfLastName = lastName[2];"
      ],
      "tests": [
        "assert(thirdLetterOfLastName === 'v', 'message: <code>thirdLetterOfLastName</code> 的值应该是 <code>v</code>.');",
        "assert(code.match(/thirdLetterOfLastName\\s*=\\s*lastName\\s*\\[\\s*\\d+\\s*\\]/), 'message: 你应该使用括号');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c451eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Last Character in a String",
      "description": [
        "为了得到一个字符串的最后一个字符，你可以用<code>[字符串的长度减去一]</code>。",
        "例如，在 <code>var firstName = \"Charles\"</code> 中，你可以这样操作 <code>firstName[firstName.length - 1]</code> 来得到字符串的最后的一个字符。",
        "<h4>任务</h4>",
        "使用 <code>[索引]</code> 来取得 <code>lastName</code> 变量中的最后一个字符。",
        "<strong>提示</strong><br>如果你遇到困难了，不妨看看在 <code>lastLetterOfFirstName</code> 变量上是怎么做的。"
      ],
      "challengeSeed": [
        "// 举例",
        "var firstName = \"Ada\";",
        "var lastLetterOfFirstName = firstName[firstName.length - 1];",
        "",
        "// 初始化变量",
        "var lastName = \"Lovelace\";",
        "",
        "// 请只修改这条注释以下的代码",
        "var lastLetterOfLastName = lastName;",
        "",
        ""
      ],
      "tail": [
        "(function(v){return v;})(lastLetterOfLastName);"
      ],
      "solutions": [
        "var firstName = \"Ada\";\nvar lastLetterOfFirstName = firstName[firstName.length - 1];\n\nvar lastName = \"Lovelace\";\nvar lastLetterOfLastName = lastName[lastName.length - 1];"
      ],
      "tests": [
        "assert(lastLetterOfLastName === \"e\", 'message: <code>lastLetterOfLastName</code> 应该是 \"e\".');",
        "assert(code.match(/\\.length/g).length === 2, 'message: 你需要使用 <code>.length</code> 获取最后一个字符.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c452eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Nth-to-Last Character in a String",
      "description": [
        "我们既可以获取字符串的最后一个字符，也可以用获取字符串的倒数第N个字符。",
        "例如，你可以这样 <code>firstName[firstName.length - 3]</code> 操作来获得 <code>var firstName = \"Charles\"</code> 字符串中的倒数第三个字符。",
        "<h4>任务</h4>",
        "使用 <code>[索引]</code> 来获得 <code>lastName</code> 字符串中的倒数第二个字符。",
        "<strong>提示</strong><br>如果你遇到困难了，不妨看看 <code>thirdToLastLetterOfFirstName</code> 变量是如何做到的。"
      ],
      "challengeSeed": [
        "// 举例",
        "var firstName = \"Ada\";",
        "var thirdToLastLetterOfFirstName = firstName[firstName.length - 3];",
        "",
        "// 初始化变量",
        "var lastName = \"Lovelace\";",
        "",
        "// 请只修改这条注释以下的代码",
        "var secondToLastLetterOfLastName = lastName;",
        "",
        ""
      ],
      "tail": [
        "(function(v){return v;})(secondToLastLetterOfLastName);"
      ],
      "solutions": [
        "var firstName = \"Ada\";\nvar thirdToLastLetterOfFirstName = firstName[firstName.length - 3];\n\nvar lastName = \"Lovelace\";\nvar secondToLastLetterOfLastName = lastName[lastName.length - 2];"
      ],
      "tests": [
        "assert(secondToLastLetterOfLastName === 'c', 'message: <code>secondToLastLetterOfLastName</code> 应该是 \"c\".');",
        "assert(code.match(/\\.length/g).length === 2, 'message: 你需要使用 <code>.length</code> 获取倒数第二个字符.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244bb",
      "title": "Word Blanks",
      "description": [
        "<strong>填词造句</strong>",
        "现在，我们来用字符串的相关知识实现一个造句函数。",
        "通过使用提供的变量参数：名词<code>myNoun</code>、形容词<code>myAdjective</code>、动词<code>myVerb</code>、副词<code>myAdverb</code>，来创建一个新的句子 <code>result</code>。",
        "请注意，在英文中，句中的单词是必须用空格来分隔的",
        "举个例子，如果名词为 <code>\"dog\"</code>，形容词为 <code>\"big\"</code>，动词为 <code>\"run\"</code>，副词为<code>\"quickly\"</code>，那么函数返回值为 <code>\"dog big run quickly\"</code> 就是没问题的",
        "此外，为了句子通顺，你可以在包含所有传入单词的前提下自己添加一些其他单词。对于上面的例子，函数返回值为 <code>\"That big brown dog just run quickly\"</code> 也是没问题的"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {",
        "  var result = \"\";",
        "  // 请把你的代码写在这条注释以下",
        "  ",
        "",
        "  // 请把你的代码写在这条注释以上",
        "  return result;",
        "}",
        "",
        "wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\");  // 你可以修改这一行来测试你的代码"
      ],
      "tail": [
        "var test1 = wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\");",
        "var test2 = wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\");"
      ],
      "solutions": [
        "function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {\n  var result = \"\";\n\n  result = \"Once there was a \" + myNoun + \" which was very \" + myAdjective + \". \";\n  result += \"It \" + myVerb + \" \" + myAdverb + \" around the yard.\";\n\n  return result;\n}"
      ],
      "tests": [
        "assert(typeof wordBlanks(\"\",\"\",\"\",\"\") === 'string', 'message: <code>wordBlanks(\"\",\"\",\"\",\"\")</code> 应该返回一个字符串.');",
        "assert(/\\bdog\\b/.test(test1) && /\\bbig\\b/.test(test1) && /\\bran\\b/.test(test1) && /\\bquickly\\b/.test(test1),'message: <code>wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\")</code> 应该包含所有传入的单词并且单词之间要有间隔(可以添加任意修饰的单词).');",
        "assert(/\\bcat\\b/.test(test2) && /\\blittle\\b/.test(test2) && /\\bhit\\b/.test(test2) && /\\bslowly\\b/.test(test2),'message: <code>wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\")</code> 应该包含所有传入的单词并且单词之间要有间隔(可以添加任意修饰的单词).');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "bd7993c9c69feddfaeb8bdef",
      "title": "Store Multiple Values in one Variable using JavaScript Arrays",
      "description": [
        "使用 <code>数组</code>，我们可以在一个地方存储多个数据。",
        "你以左方括号<code>[</code>开始定义一个数组，以右方括号<code>]</code>结束定义，并把每个条目之间用逗号隔开，就像这样：<br><code>var sandwich = [\"peanut butter\", \"jelly\", \"bread\"]</code>。",
        "<h4>任务</h4>",
        "创建一个包含 <code>字符串</code> 和 <code>数字</code> 的数组 <code>myArray</code>。",
        "<strong>提示</strong><br>如果你遇到困难，请参考文本编辑器中的示例代码。"
      ],
      "challengeSeed": [
        "// 举例",
        "var array = [\"John\", 23];",
        "",
        "// 请只修改这条注释以下的代码",
        "var myArray = [];",
        ""
      ],
      "tail": [
        "(function(z){return z;})(myArray);"
      ],
      "solutions": [
        "var myArray = [\"The Answer\", 42];"
      ],
      "tests": [
        "assert(typeof myArray == 'object', 'message: <code>myArray</code> 应该是一个 <code>数组</code>.');",
        "assert(typeof myArray[0] !== 'undefined' && typeof myArray[0] == 'string', 'message: <code>myArray</code> 数组的第一个元素应该是一个 <code>字符串</code>.');",
        "assert(typeof myArray[1] !== 'undefined' && typeof myArray[1] == 'number', 'message: <code>myArray</code> 数组的第二个元素应该是一个 <code>数字</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb7bdef",
      "title": "Nest one Array within Another Array",
      "description": [
        "你也可以在数组中包含其他数组，就像这样: <code>[[\"Bulls\", 23], [\"White Sox\", 45]]</code>。这被称为一个 <dfn>多维数组<dfn>。",
        "<h4>任务</h4>",
        "创建一个名为 <code>myArray</code>的多维数组。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourArray = [[\"the universe\", 42], [\"everything\", 101010]];",
        "",
        "// 请只修改这条注释以下的代码",
        "var myArray = [];",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
      ],
      "solutions": [
        "var myArray = [[1,2,3]];"
      ],
      "tests": [
        "assert(Array.isArray(myArray) && myArray.some(Array.isArray), 'message: <code>myArray</code> 应该包含至少一个嵌入的数组');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392ca",
      "title": "Access Array Data with Indexes",
      "description": [
        "我们可以像操作字符串一样通过数组索引<code>[index]</code>来访问数组中的数据。",
        "数组索引的使用与字符串索引一样，不同的是，通过字符串的索引得到的是一个字符，通过数组索引得到的是一个条目。与字符串类似，数组也是 <dfn>基于零</dfn> 的索引，因此数组的第一个元素的索引是 <code>0</code>。",
        "<strong>例如</strong>",
        "<blockquote>var array = [1,2,3];<br>array[0]; // 等于 1<br>var data = array[1];  // 等于 2</blockquote>",
        "<h4>任务</h4>",
        "创建一个名为 <code>myData</code> 的变量，并把 <code>myArray</code> 的第一个索引上的值赋给它。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourArray = [1,2,3];",
        "var ourData = ourArray[0]; // ourData 的值为 1",
        "",
        "// 初始化变量",
        "var myArray = [1,2,3];",
        "",
        "// 请把你的代码写在这条注释以下",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\" && typeof myData !== \"undefined\"){(function(y,z){return 'myArray = ' + JSON.stringify(y) + ', myData = ' + JSON.stringify(z);})(myArray, myData);}"
      ],
      "solutions": [
        "var myArray = [1,2,3];\nvar myData = myArray[0];"
      ],
      "tests": [
        "assert((function(){if(typeof myArray != 'undefined' && typeof myData != 'undefined' && myArray[0] == myData){return true;}else{return false;}})(), 'message: 变量 <code>myData</code> 的值应该等于 <code>myArray</code> 的第一个值.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb8bdef",
      "title": "Modify Array Data With Indexes",
      "description": [
        "与字符串的数据不可变不同，数组的数据是可变的，并且可以自由地改变。",
        "<strong>例如</strong>",
        "<blockquote>var ourArray = [3,2,1];<br>ourArray[0] = 1; // ourArray等于 [1,2,1]</blockquote>",
        "<h4>任务</h4>",
        "修改数组 <code>myArray</code> 中索引0上的值为 <code>3</code>。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourArray = [1,2,3];",
        "ourArray[1] = 3; // ourArray 的值为 [1,3,3].",
        "",
        "// 初始化变量",
        "var myArray = [1,2,3];",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
      ],
      "solutions": [
        "var myArray = [1,2,3];\nmyArray[0] = 3;"
      ],
      "tests": [
        "assert((function(){if(typeof myArray != 'undefined' && myArray[0] == 3 && myArray[1] == 2 && myArray[2] == 3){return true;}else{return false;}})(), 'message: <code>myArray</code> 的值应该变成 [3,2,3].');",
        "assert((function(){if(code.match(/myArray\\[0\\]\\s?=\\s?/g)){return true;}else{return false;}})(), 'message: 你应该使用正确的索引修改 <code>myArray</code> 的值.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56592a60ddddeae28f7aa8e1",
      "title": "Access Multi-Dimensional Arrays With Indexes",
      "description": [
        "可以把 <dfn>多维</dfn> 数组看作成是一个 <em>数组中的数组</em>。当使用<code>[]</code>去访问数组的时候，第一个<code>[index]</code>访问的是第N个子数组，第二个<code>[index]</code>访问的是第N个子数组的第N个元素。",
        "<strong>例如</strong>",
        "<blockquote>var arr = [<br>    [1,2,3],<br>    [4,5,6],<br>    [7,8,9],<br>    [[10,11,12], 13, 14]<br>];<br>arr[0]; // 等于 [1,2,3]<br>arr[1][2]; // 等于 6<br>arr[3][0][1]; // 等于 11</blockquote>",
        "<h4>任务</h4>",
        "使用恰当的 <code>[index]</code> 访问 <code>myArray</code>，使得 <code>myData</code> 的值为 <code>8</code>"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 初始化变量",
        "var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];",
        "",
        "// 请只修改这条注释以下的代码",
        "var myData = myArray[0][0];",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\"){(function(){return \"myData: \" + myData + \" myArray: \" + JSON.stringify(myArray);})();}"
      ],
      "solutions": [
        "var myArray = [[1,2,3],[4,5,6], [7,8,9], [[10,11,12], 13, 14]];\nvar myData = myArray[2][1];"
      ],
      "tests": [
        "assert(myData === 8, 'message: <code>myData</code> 应该等于 <code>8</code>.');",
        "assert(/myArray\\[2\\]\\[1\\]/g.test(code), 'message: 你应该使用括号从 <code>myArray</code> 中取值.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392cb",
      "title": "Manipulate Arrays With push()",
      "description": [
        "一个简单的方法将数据追加到一个数组的末尾是通过 <code>push()</code> 函数。",
        "<code>.push()</code> 接受把一个或多个参数，并把它“推”入到数组的末尾。",
        "<blockquote>var arr = [1,2,3];<br>arr.push(4);<br>// 现在arr的值为 [1,2,3,4]</blockquote>",
        "<h4>任务</h4>",
        "把 <code>[\"dog\", 3]</code> “推”入到 <code>myArray</code> 变量的末尾。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourArray = [\"Stimpson\", \"J\", \"cat\"];",
        "ourArray.push([\"happy\", \"joy\"]); ",
        "// 经过 push 操作后，ourArray 的值为 [\"Stimpson\", \"J\", \"cat\", [\"happy\", \"joy\"]]",
        "",
        "// 初始化变量",
        "var myArray = [[\"John\", 23], [\"cat\", 2]];",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "(function(z){return 'myArray = ' + JSON.stringify(z);})(myArray);"
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"cat\", 2]];\nmyArray.push([\"dog\",3]);"
      ],
      "tests": [
        "assert((function(d){if(d[2] != undefined && d[0][0] == 'John' && d[0][1] == 23 && d[2][0] == 'dog' && d[2][1] == 3 && d[2].length == 2){return true;}else{return false;}})(myArray), 'message: <code>myArray</code> 现在应该等于 <code>[[\"John\", 23], [\"cat\", 2], [\"dog\", 3]]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392cc",
      "title": "Manipulate Arrays With pop()",
      "description": [
        "改变数组中数据的另一种方法是用 <code>.pop()</code> 函数。",
        "<code>.pop()</code> 函数用来“抛出”一个数组末尾的值。我们可以把这个“抛出”的值赋给一个变量存储起来。",
        "数组中任何类型的条目（数值，字符串，甚至是数组）可以被“抛出来” 。",
        "举个例子, 对于这段代码<br><code>var oneDown = [1, 4, 6].pop();</code><br>现在 <code>oneDown</code> 的值为 <code>6</code> ，数组变成了 <code>[1, 4]</code>。",
        "<h4>任务</h4>",
        "使用 <code>.pop()</code> 函数移除 <code>myArray</code> 中的最后一条，并且把“抛出”的值赋给 <code>removedFromMyArray</code>。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourArray = [1,2,3];",
        "var removedFromOurArray = ourArray.pop(); ",
        "// 经过 pop 操作之后，removedFromOurArray 的值为 3, ourArray 的值为 [1,2]",
        "",
        "// 初始化变量",
        "var myArray = [[\"John\", 23], [\"cat\", 2]];",
        "",
        "// 请只修改这条注释以下的代码",
        "var removedFromMyArray;",
        "",
        ""
      ],
      "tail": [
        "(function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);"
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"cat\", 2]];\nvar removedFromMyArray = myArray.pop();"
      ],
      "tests": [
        "assert((function(d){if(d[0][0] == 'John' && d[0][1] == 23 && d[2] == undefined){return true;}else{return false;}})(myArray), 'message: <code>myArray</code> 应该只包含 <code>[[\"John\", 23]]</code>.');",
        "assert((function(d){if(d[0] == 'cat' && d[1] == 2 && d[2] == undefined){return true;}else{return false;}})(removedFromMyArray), 'message: <code>removedFromMyArray</code> 应该只包含 <code>[\"cat\", 2]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392cd",
      "title": "Manipulate Arrays With shift()",
      "description": [
        "<code>pop()</code> 函数用来移出数组中最后一个元素。如果想要移出第一个元素要怎么办呢？",
        "这就是 <code>.shift()</code> 的用武之地。它的工作原理就像 <code>.pop()</code>，但它移除的是第一个元素，而不是最后一个。",
        "<h4>任务</h4>",
        "使用 <code>.shift()</code> 函数移出 <code>myArray</code> 中的第一项，并把“移出”的值赋给 <code>removedFromMyArray</code>。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourArray = [\"Stimpson\", \"J\", [\"cat\"]];",
        "removedFromOurArray = ourArray.shift();",
        "// 经过 shift 操作后，removedFromOurArray 的值为 \"Stimpson\"，ourArray 的值为 [\"J\", [\"cat\"]].",
        "",
        "// 初始化变量",
        "var myArray = [[\"John\", 23], [\"dog\", 3]];",
        "",
        "// 请只修改这条注释以下的代码",
        "var removedFromMyArray;",
        "",
        ""
      ],
      "tail": [
        "(function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);"
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"dog\", 3]];\n\n// Only change code below this line.\nvar removedFromMyArray = myArray.shift();"
      ],
      "tests": [
        "assert((function(d){if(d[0][0] == 'dog' && d[0][1] == 3 && d[1] == undefined){return true;}else{return false;}})(myArray), 'message: <code>myArray</code> 现在应该等于 <code>[[\"dog\", 3]]</code>.');",
        "assert((function(d){if(d[0] === 'John' && d[1] === 23 && typeof removedFromMyArray === 'object'){return true;}else{return false;}})(removedFromMyArray), 'message: <code>removedFromMyArray</code> 应该包含 <code>[\"John\", 23]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392ce",
      "title": "Manipulate Arrays With unshift()",
      "description": [
        "你不仅可以 <code>shift</code>（移出）数组中的第一个元素，你也可以 <code>unshift</code>（移入）一个元素到数组的头部。",
        "<code>.unshift()</code> 函数用起来就像 <code>.push()</code> 函数一样, 但不是在数组的末尾添加元素，而是在数组的头部添加元素。",
        "<h4>任务</h4>",
        "使用 <code>unshift()</code> 函数把<code>[\"Paul\",35]</code> 加入到 <code>myArray</code> 的头部。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourArray = [\"Stimpson\", \"J\", \"cat\"];",
        "ourArray.shift(); // 经过 shift 操作后，ourArray 的值为 [\"J\", \"cat\"]",
        "ourArray.unshift(\"Happy\"); ",
        "// 经过 unshift 操作后，ourArray 的值为 [\"Happy\", \"J\", \"cat\"]",
        "",
        "// 初始化变量",
        "var myArray = [[\"John\", 23], [\"dog\", 3]];",
        "myArray.shift();",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "(function(y, z){return 'myArray = ' + JSON.stringify(y);})(myArray);"
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\nmyArray.unshift([\"Paul\", 35]);"
      ],
      "tests": [
        "assert((function(d){if(typeof d[0] === \"object\" && d[0][0].toLowerCase() == 'paul' && d[0][1] == 35 && d[1][0] != undefined && d[1][0] == 'dog' && d[1][1] != undefined && d[1][1] == 3){return true;}else{return false;}})(myArray), 'message: <code>myArray</code> 现在应该包含 [[\"Paul\", 35], [\"dog\", 3]].');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244bc",
      "title": "Shopping List",
      "description": [
        "购物清单",
        "创建一个名叫 <code>myList</code>的购物清单，清单的数据格式就是多维数组。",
        "每个子数组中的第一个元素应该是购买的物品名称，第二个元素应该是物品的数量，类似于：",
        "<code>[\"Chocolate Bar\", 15]</code>",
        "任务：你的购物清单至少应该有5个子数组。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myList = [];",
        "",
        ""
      ],
      "tail": [
        "var count = 0;",
        "var isArray = false;",
        "var hasString = false;",
        "var hasNumber = false;",
        "(function(list){",
        "  if(Array.isArray(myList)) {",
        "    isArray = true;",
        "    if(myList.length > 0) {",
        "      hasString = true;",
        "      hasNumber = true;",
        "      myList.forEach(function(elem) {",
        "        if(typeof elem[0] !== 'string') {",
        "          hasString = false;",
        "        }",
        "        if(typeof elem[1] !== 'number') {",
        "          hasNumber = false;",
        "        }",
        "      });",
        "    }",
        "    count = myList.length;",
        "    return JSON.stringify(myList);",
        "  } else {",
        "    return \"myList is not an array\";",
        "  }",
        "",
        "})(myList);"
      ],
      "solutions": [
        "var myList = [\n  [\"Candy\", 10],\n  [\"Potatoes\", 12],\n  [\"Eggs\", 12],\n  [\"Catfood\", 1],\n  [\"Toads\", 9]\n];"
      ],
      "tests": [
        "assert(isArray, 'message: <code>myList</code> 应该一个数组');",
        "assert(hasString, 'message: 你的每个子数组的第一个元素的类型都应该是字符串');",
        "assert(hasNumber, 'message: 你的每个子数组的第二个元素的类型都应该是数字');",
        "assert(count > 4, 'message: 你的列表中至少要包含5个元素');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392cf",
      "title": "Write Reusable JavaScript with Functions",
      "description": [
        "在 JavaScript 中，我们可以把代码的重复部分抽取出来，放到一个<dfn>函数</dfn>（functions）中。",
        "这是一个函数（function）的例子：",
        "<blockquote>function functionName() {<br>  console.log(\"Hello World\");<br>}</blockquote>",
        "你可以通过函数名称<code>functionName</code>加上后面的小括号来调用这个函数（function），就像这样：",
        "<code>functionName();</code>",
        "每次调用函数时它会打印出消息的“Hello World”到开发的控制台上。所有的大括号之间的代码将在每次函数调用时执行。",
        "<h4>任务</h4>",
        "<ol><li>创建一个名为 <code>myFunction</code> 的函数，这个函数可以打印“Hi World”到开发控制台上。</li><li>调用这个函数。</li></ol>"
      ],
      "challengeSeed": [
        "// 举例",
        "function ourFunction() {",
        "  console.log(\"Heyya, World\");",
        "}",
        "",
        "ourFunction();",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "var logOutput = \"\";",
        "var originalConsole = console",
        "function capture() {",
        "    var nativeLog = console.log;",
        "    console.log = function (message) {",
        "        if(message && message.trim) logOutput = message.trim();",
        "        if(nativeLog.apply) {",
        "          nativeLog.apply(originalConsole, arguments);",
        "        } else {",
        "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
        "          nativeLog(nativeMsg);",
        "        }",
        "    };",
        "}",
        "",
        "function uncapture() {",
        "  console.log = originalConsole.log;",
        "}",
        "",
        "if (typeof myFunction !== \"function\") { ",
        "  (function() { return \"myFunction is not defined\"; })();",
        "} else {",
        "  capture();",
        "  myFunction();  ",
        "  uncapture();",
        "  (function() { return logOutput || \"console.log never called\"; })();",
        "}"
      ],
      "solutions": [
        "function myFunction() {\n  console.log(\"Hi World\");\n}\nmyFunction();"
      ],
      "tests": [
        "assert(typeof myFunction === 'function', 'message: <code>myFunction</code> 应该是一个函数');",
        "assert(\"Hi World\" === logOutput, 'message: <code>myFunction</code> 应该在控制台中输出 \"Hi World\"');",
        "assert(/^\\s*myFunction\\(\\)\\s*;/m.test(code), 'message: 在你定义 <code>myFunction</code> 之后记得调用它');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244bd",
      "title": "Passing Values to Functions with Arguments",
      "description": [
        "函数的参数<code>parameters</code>在函数中充当占位符(也叫形参)的作用，参数可以为一个或多个。调用一个函数时所传入的参数为实参，实参决定着形参真正的值。简单理解：形参即形式、实参即内容。",
        "这是带有两个参数的函数， <code>param1</code> 和 <code>param2</code>：",
        "<blockquote>function testFun(param1, param2) {<br>  console.log(param1, param2);<br>}</blockquote>",
        "接着我们调用 <code>testFun</code>：",
        "<code>testFun(\"Hello\", \"World\");</code>",
        "我们传递了两个参数， <code>\"Hello\"</code> 和 <code>\"World\"</code>。在函数内部，<code>param1</code> 等于“Hello”，<code>param2</code> 等于“World”。请注意，<code>testFun</code> 函数可以多次调用，每次调用时传递的参数会决定形参的实际值。",
        "<h4>任务</h4>",
        "<ol><li>创建一个名为 <code>myFunction</code> 的函数，它可以接收两个参数，计算参数的和，将结果输出到控制台。</li><li>调用这个函数。</li></ol>"
      ],
      "releasedOn": "January 1, 2016",
      "head": [
        "var logOutput = \"\";",
        "var originalConsole = console",
        "function capture() {",
        "    var nativeLog = console.log;",
        "    console.log = function (message) {",
        "        if(message) logOutput = JSON.stringify(message).trim();",
        "        if(nativeLog.apply) {",
        "          nativeLog.apply(originalConsole, arguments);",
        "        } else {",
        "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
        "          nativeLog(nativeMsg);",
        "        }",
        "    };",
        "}",
        "",
        "function uncapture() {",
        "  console.log = originalConsole.log;",
        "}",
        "",
        "capture();"
      ],
      "challengeSeed": [
        "// 举例",
        "function ourFunction(a, b) {",
        "  console.log(a - b);",
        "}",
        "ourFunction(10, 5); // 输出 5",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "uncapture();",
        "",
        "if (typeof myFunction !== \"function\") { ",
        "  (function() { return \"myFunction is not defined\"; })();",
        "} else {",
        "  (function() { return logOutput || \"console.log never called\"; })();",
        "}"
      ],
      "solutions": [
        "function myFunction(a, b) {\n  console.log(a + b);\n}\nmyFunction(10, 5);"
      ],
      "tests": [
        "assert(typeof myFunction === 'function', 'message: <code>myFunction</code> 应该是一个函数');",
        "if(typeof myFunction === \"function\") { capture(); myFunction(1,2); uncapture(); } assert(logOutput == 3, 'message: <code>myFunction(1,2)</code> 应该输出 <code>3</code>');",
        "if(typeof myFunction === \"function\") { capture(); myFunction(7,9); uncapture(); } assert(logOutput == 16, 'message: <code>myFunction(7,9)</code> 应该输出 <code>16</code>');",
        "assert(/^\\s*myFunction\\s*\\([\\w\\W]+\\)\\s*;/m.test(code), 'message: 在你定义 <code>myFunction</code> 之后记得调用它');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244be",
      "title": "Global Scope and Functions",
      "description": [
        "在 JavaScript 中， <dfn>作用域</dfn> 涉及到变量的作用范围。在函数外定义的变量具有 <dfn>全局</dfn> 作用域。这意味着，具有全局作用域的变量可以在代码的任何地方被调用。",
        "这些没有使用<code>var</code>关键字定义的变量，会被自动创建在全局作用域中，形成全局变量。当在代码其他地方无意间定义了一个变量，刚好变量名与全局变量相同，这时会产生意想不到的后果。因此你应该总是使用var关键字来声明你的变量。",
        "<h4>任务</h4>",
        "在函数外声明一个 <code>全局</code> 变量 <code>myGlobal</code>，并给它一个初始值 <code>10</code> ",
        "在函数 <code>fun1</code> 的内部，<strong>不</strong>使用 <code>var</code> 关键字来声明 <code>oopsGlobal</code>，并赋值为 <code>5</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "head": [
        "var logOutput = \"\";",
        "var originalConsole = console",
        "function capture() {",
        "    var nativeLog = console.log;",
        "    console.log = function (message) {",
        "        logOutput = message;",
        "        if(nativeLog.apply) {",
        "          nativeLog.apply(originalConsole, arguments);",
        "        } else {",
        "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
        "          nativeLog(nativeMsg);",
        "        }",
        "    };",
        "}",
        "",
        "function uncapture() {",
        "  console.log = originalConsole.log;",
        "}",
        "var oopsGlobal;",
        "capture();"
      ],
      "challengeSeed": [
        "// 请在这里定义变量",
        "",
        "",
        "function fun1() {",
        "  // 请在这里把 5 赋值给 oopsGlobal",
        "  ",
        "}",
        "",
        "// 请只修改这条注释以上的代码",
        "function fun2() {",
        "  var output = \"\";",
        "  if (typeof myGlobal != \"undefined\") {",
        "    output += \"myGlobal: \" + myGlobal;",
        "  }",
        "  if (typeof oopsGlobal != \"undefined\") {",
        "    output += \" oopsGlobal: \" + oopsGlobal;",
        "  }",
        "  console.log(output);",
        "}"
      ],
      "tail": [
        "fun1();",
        "fun2();",
        "uncapture();",
        "(function() { return logOutput || \"console.log never called\"; })();"
      ],
      "solutions": [
        "// Declare your variable here\nvar myGlobal = 10;\n\nfunction fun1() {\n  // Assign 5 to oopsGlobal Here\n  oopsGlobal = 5;\n}\n\n// Only change code above this line\nfunction fun2() {\n  var output = \"\";\n  if(typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if(typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}"
      ],
      "tests": [
        "assert(typeof myGlobal != \"undefined\", 'message: <code>myGlobal</code> 需要被定义');",
        "assert(myGlobal === 10, 'message: <code>myGlobal</code> 的值应该是 <code>10</code>');",
        "assert(/var\\s+myGlobal/.test(code), 'message: <code>myGlobal</code> 应该使用 <code>var</code> 关键字声明');",
        "assert(typeof oopsGlobal != \"undefined\" && oopsGlobal === 5, 'message: <code>oopsGlobal</code> 的值应该是 <code>5</code>');",
        "assert(!/var\\s+oopsGlobal/.test(code), 'message: 不要使用 <code>var</code>关键字声明 <code>oopsGlobal</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244bf",
      "title": "Local Scope and Functions",
      "description": [
        "在一个函数内声明的变量，以及该函数的参数都是局部变量，意味着它们只在该函数内可见。",
        "这是在函数 <code>myTest</code>内声明局部变量<code>loc</code> 的最佳例子：",
        "<blockquote>function myTest() {<br>  var loc = \"foo\";<br>  console.log(loc);<br>}<br>myTest(); // \"foo\"<br>console.log(loc); // \"undefined\"</blockquote>",
        "在函数外，<code>loc</code> 是未定义的。",
        "<h4>任务</h4>",
        "在函数 <code>myFunction</code> 内部声明一个局部变量 <code>myVar</code>，并删除外部console.log。"
      ],
      "releasedOn": "January 1, 2016",
      "head": [
        "var logOutput = \"\";",
        "var originalConsole = console",
        "function capture() {",
        "    var nativeLog = console.log;",
        "    console.log = function (message) {",
        "        logOutput = message;",
        "        if(nativeLog.apply) {",
        "          nativeLog.apply(originalConsole, arguments);",
        "        } else {",
        "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
        "          nativeLog(nativeMsg);",
        "        }",
        "    };",
        "}",
        "",
        "function uncapture() {",
        "  console.log = originalConsole.log;",
        "}",
        ""
      ],
      "challengeSeed": [
        "function myFunction() {",
        "  'use strict';",
        "  ",
        "  ",
        "  console.log(myVar);",
        "}",
        "myFunction();",
        "",
        "// 请先运行这段代码，并在左边的输出区域或浏览器的控制台中查看输出",
        "// 由于 myVar 在 myFunction 内外均没有定义，因此才会有报错",
        "console.log(myVar);",
        "",
        "// 现在，在 myFunction 中定义 myVar，并删掉 myFunction 外面的 console.log 那一行",
        ""
      ],
      "tail": [
        "typeof myFunction === 'function' && (capture(), myFunction(), uncapture());",
        "(function() { return logOutput || \"console.log never called\"; })();"
      ],
      "solutions": [
        "function myFunction() {\n  'use strict';\n  \n  var myVar;\n  console.log(myVar);\n}\nmyFunction();"
      ],
      "tests": [
        "assert(typeof myVar === 'undefined', 'message: 未找到全局的 <code>myVar</code> 变量');",
        "assert(/var\\s+myVar/.test(code), 'message: 需要定义局部的 <code>myVar</code> 变量');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c0",
      "title": "Global vs. Local Scope in Functions",
      "description": [
        "一个程序中有可能具有相同名称的 <dfn>局部</dfn> 变量 和 <dfn>全局</dfn> 变量。在这种情况下，<code>局部</code> 变量将会优先于 <code>全局</code> 变量。",
        "下面为例：",
        "<blockquote>var someVar = \"Hat\";<br>function myFun() {<br>  var someVar = \"Head\";<br>  return someVar;<br>}</blockquote>",
        "函数 <code>myFun</code> 将会返回 <code>\"Head\"</code>，因为 <code>局部变量</code> 优先级更高。",
        "<h4>任务</h4>",
        "给 <code>myFunction</code> 添加一个局部变量来覆盖 <code>outerWear</code> 的值为 <code>\"sweater\"</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 初始化变量",
        "var outerWear = \"T-Shirt\";",
        "",
        "function myFunction() {",
        "  // 请把你的代码写在这条注释以下",
        "  ",
        "  ",
        "  ",
        "  // 请把你的代码写在这条注释以上",
        "  return outerWear;",
        "}",
        "",
        "myFunction();"
      ],
      "solutions": [
        "var outerWear = \"T-Shirt\";\nfunction myFunction() {\n  var outerWear = \"sweater\";\n  return outerWear;\n}"
      ],
      "tests": [
        "assert(outerWear === \"T-Shirt\", 'message: 不要修改全局变量 <code>outerWear</code> 的值');",
        "assert(myFunction() === \"sweater\", 'message: <code>myFunction</code> 应该返回 <code>\"sweater\"</code>');",
        "assert(/return outerWear/.test(code), 'message: 不要修改 <code>return</code> 语句');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c2",
      "title": "Return a Value from a Function with Return",
      "description": [
        "我们可以把数据通过函数的 <dfn>参数</dfn> 来传入函数，也可以使用 <code>return</code> 语句把数据从一个函数中传出来。",
        "<strong>例如</strong>",
        "<blockquote>function plusThree(num) {<br>  return num + 3;<br>}<br>var answer = plusThree(5); // 8</blockquote>",
        "<code>plusThree</code> 带有一个为 <code>num</code> 的 <dfn>参数</dfn> 并且返回（returns）一个等于 <code>num + 3</code> 的值。",
        "<h4>任务</h4>",
        "创建一个函数 <code>timesFive</code> 接受一个参数, 把它乘于 <code>5</code> 之后并返回（returns）。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 举例",
        "function minusSeven(num) {",
        "  return num - 7;",
        "}",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "(function() { if(typeof timesFive === 'function'){ return \"timesfive(5) === \" + timesFive(5); } else { return \"timesFive is not a function\"} })();"
      ],
      "solutions": [
        "function timesFive(num) {\n  return num * 5;\n}"
      ],
      "tests": [
        "assert(typeof timesFive === 'function', 'message: <code>timesFive</code> 应该是一个函数');",
        "assert(timesFive(5) === 25, 'message: <code>timesFive(5)</code> 应该返回 <code>25</code>');",
        "assert(timesFive(2) === 10, 'message: <code>timesFive(2)</code> 应该返回 <code>10</code>');",
        "assert(timesFive(0) === 0, 'message: <code>timesFive(0)</code> 应该返回 <code>0</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c3",
      "title": "Assignment with a Returned Value",
      "description": [
        "如果你还记得我们在这一节 <a href=\"waypoint-storing-values-with-the-equal-operator\" target=\"_blank\">Storing Values with the Equal Operator</a> 的讨论，赋值之前，先完成等号右边的操作。这意味着我们可把一个函数的返回值，赋值给一个变量。",
        "假设我们预先定义的函数 <code>sum</code> 其功能就是将两个数字相加，那么：",
        "<code>ourSum = sum(5, 12);</code>",
        "将调用 <code>sum</code> 函数，返回<code>return</code>了一个数值 <code>17</code>，然后把它赋值给了 <code>ourSum</code> 变量。",
        "<h4>任务</h4>",
        "调用 <code>process</code> 函数并给参数一个值 <code>7</code>，然后把返回的值赋值给变量 <code>processed</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 举例",
        "var changed = 0;",
        "",
        "function change(num) {",
        "  return (num + 5) / 3;",
        "}",
        "",
        "changed = change(10);",
        "",
        "// 初始化变量",
        "var processed = 0;",
        "",
        "function process(num) {",
        "  return (num + 3) / 5;",
        "}",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "(function(){return \"processed = \" + processed})();"
      ],
      "solutions": [
        "var processed = 0;\n\nfunction process(num) {\n  return (num + 3) / 5;\n}\n\nprocessed = process(7);"
      ],
      "tests": [
        "assert(processed === 2, 'message: <code>processed</code> 的值应该是 <code>2</code>');",
        "assert(/processed\\s*=\\s*process\\(\\s*7\\s*\\)\\s*;/.test(code), 'message: 你应该把 <code>process</code> 的结果赋值给 <code>processed</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c6",
      "title": "Stand in Line",
      "description": [
        "在计算机科学中 <dfn>队列</dfn>（queue）是一个抽象的数据结构，队列中的条目都是有秩序的。新的条目会被加到 <code>队列</code> 的末尾，旧的条目会从 <code>队列</code> 的头部被移出。",
        "写一个函数 <code>queue</code> ，用一个数组<code>arr</code>和一个数字<code>item</code>作为参数。数字<code>item</code>添加到数组的结尾，然后移出数组的第一个元素，最后队列函数应该返回被删除的元素。"
      ],
      "releasedOn": "January 1, 2016",
      "head": [
        "var logOutput = [];",
        "var originalConsole = console",
        "function capture() {",
        "    var nativeLog = console.log;",
        "    console.log = function (message) {",
        "        logOutput.push(message);",
        "        if(nativeLog.apply) {",
        "          nativeLog.apply(originalConsole, arguments);",
        "        } else {",
        "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
        "          nativeLog(nativeMsg);",
        "        }",
        "    };",
        "}",
        "",
        "function uncapture() {",
        "  console.log = originalConsole.log;",
        "}",
        "",
        "capture();"
      ],
      "challengeSeed": [
        "function queue(arr, item) {",
        "  // 请把你的代码写在这里",
        "  ",
        "  return item;  // 请修改这一行",
        "}",
        "",
        "// 初始化测试数据",
        "var testArr = [1,2,3,4,5];",
        "",
        "// 控制台输出",
        "console.log(\"Before: \" + JSON.stringify(testArr));",
        "console.log(queue(testArr, 6)); // 你可以修改这一行来测试你的代码",
        "console.log(\"After: \" + JSON.stringify(testArr));"
      ],
      "tail": [
        "uncapture();",
        "testArr = [1,2,3,4,5];",
        "(function() { return logOutput.join(\"\\n\");})();"
      ],
      "solutions": [
        "var testArr = [ 1,2,3,4,5];\n\nfunction queue(arr, item) {\n    arr.push(item);\n    return arr.shift();\n}"
      ],
      "tests": [
        "assert(queue([],1) === 1, 'message: <code>queue([], 1)</code> 应该返回 <code>1</code>');",
        "assert(queue([2],1) === 2, 'message: <code>queue([2], 1)</code> 应该返回 <code>2</code>');",
        "assert(queue([5,6,7,8,9],1) === 5, 'message: <code>queue([5,6,7,8,9], 1)</code> 应该返回 <code>5</code>');",
        "queue(testArr, 10); assert(testArr[4] === 10, 'message: 在 <code>queue(testArr, 10)</code> 之后, <code>testArr[4]</code> 的值应该是 <code>10</code>');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c441eddfaeb5bdef",
      "title": "Understanding Boolean Values",
      "description": [
        "另一种数据类型是<dfn>布尔</dfn>（Boolean）。<code>布尔</code> 值要么是<code>true</code> 要么是<code>false</code>。它非常像电路开关， <code>true</code> 是“开”，<code>false</code> 是“关”。这两种状态是互斥的。",
        "<strong>注意</strong><br><code>Boolean</code> 值绝不会写作被引号包裹起来的形式。<code>字符串</code> 的 <code>\"true\"</code> 和 <code>\"false\"</code> 不是 <code>布尔值</code>，在 JavaScript 中也没有特殊含义。",
        "<h4>任务</h4>",
        "修改 <code>welcomeToBooleans</code> 函数，让它返回 <code>true</code> 而不是 <code>false</code>。"
      ],
      "challengeSeed": [
        "function welcomeToBooleans() {",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "return false; // 请修改这一行",
        "",
        "// 请只修改这条注释以上的代码",
        "}"
      ],
      "tail": [
        "welcomeToBooleans();"
      ],
      "solutions": [
        "function welcomeToBooleans() {\n  return true; // Change this line\n}"
      ],
      "tests": [
        "assert(typeof welcomeToBooleans() === 'boolean', 'message: <code>welcomeToBooleans()</code> 函数应该返回一个布尔值 &#40;true/false&#41; ');",
        "assert(welcomeToBooleans() === true, 'message: <code>welcomeToBooleans()</code> 应该返回 true.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb3bdef",
      "title": "Use Conditional Logic with If Statements",
      "description": [
        "<code>If</code> 语句用于在代码中做条件判断。关键字 <code>if</code> 告诉 JavaScript 在小括号中的条件为真的情况下去执行定义在大括号里面的代码。这种条件被称为 <code>Boolean</code> 条件，因为他们只可能是 <code>true</code>（真）或 <code>false</code>（假）。",
        "当条件的计算结果为 <code>true</code>，程序执行大括号内的语句。当布尔条件的计算结果为 <code>false</code>，大括号内的代码将不会执行。",
        "<strong>伪代码</strong>",
        "<blockquote>if(<i>条件为真</i>){<br>  <i>语句被执行</i><br>}</blockquote>",
        "<strong>示例</strong>",
        "<blockquote>function test (myCondition) {<br>  if (myCondition) {<br>     return \"It was true\";<br>  }<br>  return \"It was false\";<br>}<br>test(true);  // 返回 \"It was true\"<br>test(false); // 返回 \"It was false\"</blockquote>",
        "当 <code>test</code> 被调用，并且传递进来的参数值为 <code>true</code>，<code>if</code> 语句会计算 <code>myCondition</code> 的结果，看它是真还是假。如果条件为 <code>true</code>，函数会返回 <code>\"It was true\"</code>。当 <code>test</code> 被调用，并且传递进来的参数值为 <code>false</code>，<code>myCondition</code> <em>不</em> 为 <code>true</code>，并且不执行大括号后面的语句，函数返回 <code>\"It was false\"</code>。",
        "<h4>任务</h4>",
        "在函数内部创建一个 <code>if</code> 语句，如果该参数 <code>wasThatTrue</code> 值为 <code>true</code>，返回 <code>\"That was true\"</code>，否则，并返回 <code>\"That was false\"</code>。"
      ],
      "challengeSeed": [
        "// 举例",
        "function ourFunction(isItTrue) {",
        "  if (isItTrue) { ",
        "    return \"Yes, it's true\";",
        "  }",
        "  return \"No, it's false\";",
        "}",
        "",
        "// 定义 myFunction",
        "function myFunction(wasThatTrue) {",
        "",
        "  // 请把你的代码写在这条注释以下",
        "  ",
        "  ",
        "  ",
        "  // 请把你的代码写在这条注释以上",
        "",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myFunction(true);"
      ],
      "solutions": [
        "function myFunction(wasThatTrue) {\n  if (wasThatTrue) {\n    return \"That was true\";\n  }\n  return \"That was false\";\n}"
      ],
      "tests": [
        "assert(typeof myFunction === \"function\", 'message: <code>myFunction</code> 应该是一个函数');",
        "assert(typeof myFunction(true) === \"string\", 'message: <code>myFunction(true)</code> 应该返回字符串');",
        "assert(typeof myFunction(false) === \"string\", 'message: <code>myFunction(false)</code> 应该返回字符串');",
        "assert(myFunction(true) === \"That was true\", 'message: <code>myFunction(true)</code> 应该返回 \"That was true\"');",
        "assert(myFunction(false) === \"That was false\", 'message: <code>myFunction(false)</code> 应该返回 \"That was false\"');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d0",
      "title": "Comparison with the Equality Operator",
      "description": [
        "在 JavaScript 中，有很多 <dfn>相互比较的操作</dfn>。所有这些操作符都返回一个 <code>true</code> 或 <code>false</code> 值。",
        "最基本的运算符是相等运算符：<code>==</code>。相等运算符比较两个值，如果它们是同等，返回 <code>true</code>，如果它们不等，返回 <code>false</code>。值得注意的是相等运算符不同于赋值运算符（<code>=</code>），赋值运算符是把等号右边的值赋给左边的变量。",
        "<blockquote>function equalityTest(myVal) {<br>  if (myVal == 10) {<br>     return \"Equal\";<br>  }<br>  return \"Not Equal\";<br>}</blockquote>",
        "如果 <code>myVal</code> 等于 <code>10</code>，相等运算符会返回 <code>true</code>，因此大括号里面的代码会被执行，函数将返回 <code>\"Equal\"</code>。否则，函数返回 <code>\"Not Equal\"</code>。",
        "在 JavaScript 中，为了让两个不同的 <code>数据类型</code>（例如 <code>数字</code> 和 <code>字符串</code>）的值可以作比较，它必须把一种类型转换为另一种类型。然而一旦这样做，它可以像下面这样来比较：",
        "<blockquote>   1   ==  1    // true<br>   1   ==  2    // false<br>   1   == '1'   // true<br>  \"3\"  ==  3    // true</blockquote>",
        "<h4>任务</h4>",
        "把 <code>相等运算符</code> 添加到指定的行，这样当 <code>val</code> 的值为<code>12</code>的时候，函数会返回\"Equal\"。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 定义 myTest",
        "function myTest(val) {",
        "  if (val) { // 请修改这一行",
        "    return \"Equal\";",
        "  }",
        "  return \"Not Equal\";",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val == 12) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
      ],
      "tests": [
        "assert(myTest(10) === \"Not Equal\", 'message: <code>myTest(10)</code> 应该返回 \"Not Equal\"');",
        "assert(myTest(12) === \"Equal\", 'message: <code>myTest(12)</code> 应该返回 \"Equal\"');",
        "assert(myTest(\"12\") === \"Equal\", 'message: <code>myTest(\"12\")</code> 应该返回 \"Equal\"');",
        "assert(code.match(/val\\s*==[\\s'\"\\d]+/g).length > 0, 'message: 你应该使用 <code>==</code> 运算符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d1",
      "title": "Comparison with the Strict Equality Operator",
      "description": [
        "严格相等运算符（<code>===</code>）是相对于相等操作符（<code>==</code>）的一种操作符。与相等操作符不同的是，它会同时比较元素的值和 <code>数据类型</code>。",
        "<strong>举个例子</strong>",
        "<blockquote>3 === 3   // true<br>3 === '3' // false</blockquote>",
        "<code>3</code> 是一个 <code>数字</code> 类型的，而<code>'3'</code> 是一个 <code>字符</code> 类型的，所以3不全等于'3'。",
        "<h4>任务</h4>",
        "在 <code>if</code> 语句值使用严格相等运算符，这样当 <code>val</code> 严格等于7的时候，函数会返回\"Equal\"。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 定义 myTest",
        "function myTest(val) {",
        "  if (val) { // 请修改这一行",
        "    return \"Equal\";",
        "  }",
        "  return \"Not Equal\";",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val === 7) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
      ],
      "tests": [
        "assert(myTest(10) === \"Not Equal\", 'message: <code>myTest(10)</code> 应该返回 \"Not Equal\"');",
        "assert(myTest(7) === \"Equal\", 'message: <code>myTest(7)</code> 应该返回 \"Equal\"');",
        "assert(myTest(\"7\") === \"Not Equal\", 'message: <code>myTest(\"7\")</code> 应该返回 \"Not Equal\"');",
        "assert(code.match(/val\\s*===\\s*\\d+/g).length > 0, 'message: 你应该使用 <code>===</code> 运算符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d2",
      "title": "Comparison with the Inequality Operator",
      "description": [
        "不相等运算符（<code>!=</code>）与相等运算符是相反的。这意味着不相等运算符中，如果“不为真”并且返回 <code>false</code> 的地方，在相等运算符中会返回<code>true</code>，<em>反之亦然</em>。与相等运算符类似，不相等运算符在比较的时候也会转换值的数据类型。",
        "<strong>例如</strong>",
        "<blockquote>1 != 2      // true<br>1 != \"1\"    // false<br>1 != '1'    // false<br>1 != true   // false<br>0 != false  // false</blockquote>",
        "<h4>任务</h4>",
        "在 <code>if</code> 语句中，添加不相等运算符 <code>!=</code>，这样函数在当 <code>val</code> 不等于  <code>99</code> 的时候，会返回 \"Not Equal\"。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 定义 myTest",
        "function myTest(val) {",
        "  if (val) { // 请修改这一行",
        "    return \"Not Equal\";",
        "  }",
        "  return \"Equal\";",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val != 99) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}"
      ],
      "tests": [
        "assert(myTest(99) === \"Equal\", 'message: <code>myTest(99)</code> 应该返回 \"Equal\"');",
        "assert(myTest(\"99\") === \"Equal\", 'message: <code>myTest(\"99\")</code> 应该返回 \"Equal\"');",
        "assert(myTest(12) === \"Not Equal\", 'message: <code>myTest(12)</code> 应该返回 \"Not Equal\"');",
        "assert(myTest(\"12\") === \"Not Equal\", 'message: <code>myTest(\"12\")</code> 应该返回 \"Not Equal\"');",
        "assert(myTest(\"bob\") === \"Not Equal\", 'message: <code>myTest(\"bob\")</code> 应该返回 \"Not Equal\"');",
        "assert(code.match(/(?!!==)!=/), 'message: 你应该使用 <code>!=</code> 运算符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d3",
      "title": "Comparison with the Strict Inequality Operator",
      "description": [
        "严格不相等运算符（<code>!==</code>）与全等运算符是相反的。这意味着严格不相等并返回 <code>false</code> 的地方，用严格相等运算符会返回 <code>true</code>，<em>反之亦然</em>。严格相等运算符不会转换值的数据类型。",
        "<strong>例如</strong>",
        "<blockquote>3 !== 3   // false<br>3 !== '3' // true<br>4 !== 3   // true</blockquote>",
        "<h4>任务</h4>",
        "在 <code>if</code> 语句中，添加严格不相等运算符 <code>!==</code>，这样如果 <code>val</code> 与 <code>17</code> 严格不相等的时候，函数会返回 \"Not Equal\"。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 定义 myTest",
        "function myTest(val) {",
        "  // 请只修改这条注释以下的代码",
        "  ",
        "  if (val) {",
        "",
        "  // 请只修改这条注释以上的代码",
        "",
        "    return \"Not Equal\";",
        "  }",
        "  return \"Equal\";",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val !== 17) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}"
      ],
      "tests": [
        "assert(myTest(17) === \"Equal\", 'message: <code>myTest(17)</code> 应该返回 \"Equal\"');",
        "assert(myTest(\"17\") === \"Not Equal\", 'message: <code>myTest(\"17\")</code> 应该返回n \"Not Equal\"');",
        "assert(myTest(12) === \"Not Equal\", 'message: <code>myTest(12)</code> 应该返回 \"Not Equal\"');",
        "assert(myTest(\"bob\") === \"Not Equal\", 'message: <code>myTest(\"bob\")</code> 应该返回 \"Not Equal\"');",
        "assert(code.match(/val\\s*!==\\s*\\d+/g).length > 0, 'message: 你应该使用 <code>!==</code> 运算符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d4",
      "title": "Comparison with the Greater Than Operator",
      "description": [
        "使用大于运算符（<code>&gt;</code>）来比较两个数字。如果大于运算符左边的数字大于右边的数字，将会返回 <code>true</code>。否则，它返回 <code>false</code>。",
        "与相等运算符一样，大于运算符在比较的时候，会转换值的数据类型。",
        "<strong>例如</strong>",
        "<blockquote> 5 > 3   // true<br> 7 > '3' // true<br> 2 > 3   // false<br>'1' > 9  // false</blockquote>",
        "<h4>任务</h4>",
        "添加 <code>大于</code> 运算符到指定的行，使得返回的语句是有意义的。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  if (val) {  // 请修改这一行",
        "    return \"Over 100\";",
        "  }",
        "  ",
        "  if (val) {  // 请修改这一行",
        "    return \"Over 10\";",
        "  }",
        "",
        "  return \"10 or Under\";",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val > 100) {  // Change this line\n    return \"Over 100\";\n  }\n  if (val > 10) {  // Change this line\n    return \"Over 10\";\n  }\n  return \"10 or Under\";\n}"
      ],
      "tests": [
        "assert(myTest(0) === \"10 or Under\", 'message: <code>myTest(0)</code> 应该返回 \"10 or Under\"');",
        "assert(myTest(10) === \"10 or Under\", 'message: <code>myTest(10)</code> 应该返回 \"10 or Under\"');",
        "assert(myTest(11) === \"Over 10\", 'message: <code>myTest(11)</code> 应该返回 \"Over 10\"');",
        "assert(myTest(99) === \"Over 10\", 'message: <code>myTest(99)</code> 应该返回 \"Over 10\"');",
        "assert(myTest(100) === \"Over 10\", 'message: <code>myTest(100)</code> 应该返回 \"Over 10\"');",
        "assert(myTest(101) === \"Over 100\", 'message: <code>myTest(101)</code> 应该返回 \"Over 100\"');",
        "assert(myTest(150) === \"Over 100\", 'message: <code>myTest(150)</code> 应该返回 \"Over 100\"');",
        "assert(code.match(/val\\s*>\\s*('|\")*\\d+('|\")*/g).length > 1, 'message: 你应该使用 <code>&gt;</code> 运算符至少两次');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d5",
      "title": "Comparison with the Greater Than Or Equal To Operator",
      "description": [
        "使用 <code>大于等于</code> 运算符（<code>&gt;=</code>）来比较两个数字的大小。如果大于等于运算符左边的数字比右边的数字大或者相等，它会返回 <code>true</code>。否则，它会返回 <code>false</code>。",
        "与相等运算符相似，<code>大于等于</code> 运算符在比较的时候会转换值的数据类型。",
        "<strong>例如</strong>",
        "<blockquote> 6  >=  6  // true<br> 7  >= '3' // true<br> 2  >=  3  // false<br>'7' >=  9  // false</blockquote>",
        "<h4>任务</h4>",
        "添加 <code>大于等于</code> 运算符到指定行，使得函数的返回语句有意义。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  if (val) {  // 请修改这一行",
        "    return \"20 or Over\";",
        "  }",
        "  ",
        "  if (val) {  // 请修改这一行",
        "    return \"10 or Over\";",
        "  }",
        "",
        "  return \"9 or Under\";",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val >= 20) {  // Change this line\n    return \"20 or Over\";\n  }\n  \n  if (val >= 10) {  // Change this line\n    return \"10 or Over\";\n  }\n\n  return \"9 or Under\";\n}"
      ],
      "tests": [
        "assert(myTest(0) === \"9 or Under\", 'message: <code>myTest(0)</code> 应该返回 \"9 or Under\"');",
        "assert(myTest(9) === \"9 or Under\", 'message: <code>myTest(9)</code> 应该返回 \"9 or Under\"');",
        "assert(myTest(10) === \"10 or Over\", 'message: <code>myTest(10)</code> 应该返回 \"10 or Over\"');",
        "assert(myTest(11) === \"10 or Over\", 'message: <code>myTest(11)</code> 应该返回 \"10 or Over\"');",
        "assert(myTest(19) === \"10 or Over\", 'message: <code>myTest(19)</code> 应该返回 \"10 or Over\"');",
        "assert(myTest(100) === \"20 or Over\", 'message: <code>myTest(100)</code> 应该返回 \"20 or Over\"');",
        "assert(myTest(21) === \"20 or Over\", 'message: <code>myTest(21)</code> 应该返回 \"20 or Over\"');",
        "assert(code.match(/val\\s*>=\\s*('|\")*\\d+('|\")*/g).length > 1, 'message: 你应该使用 <code>&gt;=</code> 运算符至少两次');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d6",
      "title": "Comparison with the Less Than Operator",
      "description": [
        "使用 <dfn>小于</dfn> 运算符（<code>&lt;</code>）比较两个数字的大小。如果小于运算符左边的数字比右边的数字小，它会返回 <code>true</code>。否则，他会返回 <code>false</code>。与相等运算符类似，<dfn>小于</dfn> 运算符在做比较的时候会转换值的数据类型。",
        "<strong>例如</strong>",
        "<blockquote>  2 &lt; 5  // true<br>'3' &lt; 7  // true<br>  5 &lt; 5  // false<br>  3 &lt; 2  // false<br>'8' &lt; 4  // false</blockquote>",
        "<h4>任务</h4>",
        "添加 <code>小于</code> 运算符到指定行，使得函数的返回语句有意义。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  if (val) {  // 请修改这一行",
        "    return \"Under 25\";",
        "  }",
        "  ",
        "  if (val) {  // 请修改这一行",
        "    return \"Under 55\";",
        "  }",
        "",
        "  return \"55 or Over\";",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val < 25) {  // Change this line\n    return \"Under 25\";\n  }\n  \n  if (val < 55) {  // Change this line\n    return \"Under 55\";\n  }\n\n  return \"55 or Over\";\n}"
      ],
      "tests": [
        "assert(myTest(0) === \"Under 25\", 'message: <code>myTest(0)</code> 应该返回 \"Under 25\"');",
        "assert(myTest(24) === \"Under 25\", 'message: <code>myTest(24)</code> 应该返回 \"Under 25\"');",
        "assert(myTest(25) === \"Under 55\", 'message: <code>myTest(25)</code> 应该返回 \"Under 55\"');",
        "assert(myTest(54) === \"Under 55\", 'message: <code>myTest(54)</code> 应该返回 \"Under 55\"');",
        "assert(myTest(55) === \"55 or Over\", 'message: <code>myTest(55)</code> 应该返回 \"55 or Over\"');",
        "assert(myTest(99) === \"55 or Over\", 'message: <code>myTest(99)</code> 应该返回 \"55 or Over\"');",
        "assert(code.match(/val\\s*<\\s*('|\")*\\d+('|\")*/g).length > 1, 'message: 你应该使用 <code>&lt;</code> 运算符至少两次');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d7",
      "title": "Comparison with the Less Than Or Equal To Operator",
      "description": [
        "使用 <code>小于等于</code> 运算符（<code>&lt;=</code>）比较两个数字的大小。如果在小于等于运算符，左边的数字小于或者等于右边的数字，它会返回 <code>true</code>。如果在小于等于运算符，左边的数字大于或者等于右边的数字，它会返回 <code>false</code>。与相等运算符类型，<code>小于等于</code> 运算符会转换数据类型。",
        "<strong>例如</strong>",
        "<blockquote>  4 &lt;= 5  // true<br>'7' &lt;= 7  // true<br>  5 &lt;= 5  // true<br>  3 &lt;= 2  // false<br>'8' &lt;= 4  // false</blockquote>",
        "<h4>任务</h4>",
        "添加 <code>小于等于</code> 运算符到指定行，使得函数的返回语句有意义。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  if (val) {  // 请修改这一行",
        "    return \"Smaller Than or Equal to 12\";",
        "  }",
        "  ",
        "  if (val) {  // 请修改这一行",
        "    return \"Smaller Than or Equal to 24\";",
        "  }",
        "",
        "  return \"25 or More\";",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(10);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  if (val <= 12) {  // Change this line\n    return \"Smaller Than or Equal to 12\";\n  }\n  \n  if (val <= 24) {  // Change this line\n    return \"Smaller Than or Equal to 24\";\n  }\n\n  return \"25 or More\";\n}"
      ],
      "tests": [
        "assert(myTest(0) === \"Smaller Than or Equal to 12\", 'message: <code>myTest(0)</code> 应该返回 \"Smaller Than or Equal to 12\"');",
        "assert(myTest(11) === \"Smaller Than or Equal to 12\", 'message: <code>myTest(11)</code> 应该返回 \"Smaller Than or Equal to 12\"');",
        "assert(myTest(12) === \"Smaller Than or Equal to 12\", 'message: <code>myTest(12)</code> 应该返回 \"Smaller Than or Equal to 12\"');",
        "assert(myTest(23) === \"Smaller Than or Equal to 24\", 'message: <code>myTest(23)</code> 应该返回 \"Smaller Than or Equal to 24\"');",
        "assert(myTest(24) === \"Smaller Than or Equal to 24\", 'message: <code>myTest(24)</code> 应该返回 \"Smaller Than or Equal to 24\"');",
        "assert(myTest(25) === \"25 or More\", 'message: <code>myTest(25)</code> 应该返回 \"25 or More\"');",
        "assert(myTest(55) === \"25 or More\", 'message: <code>myTest(55)</code> 应该返回 \"25 or More\"');",
        "assert(code.match(/val\\s*<=\\s*('|\")*\\d+('|\")*/g).length > 1, 'message: 你应该使用 <code>&lt;=</code> 运算符至少两次');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d8",
      "title": "Comparisons with the Logical And Operator",
      "description": [
        "有时你需要在一次判断中做多个操作。当且仅当运算符的左边和右边都是 <code>true</code>，<dfn>逻辑与</dfn> 运算符（<code>&&</code>）才会返回 <code>true</code>。",
        "同样的效果可以通过if语句的嵌套来实现：",
        "<blockquote>if (num > 5) {<br>  if (num < 10) {<br>    return \"Yes\";<br>  }<br>}<br>return \"No\";</blockquote>",
        "只有当 <code>num</code> 的值在6和9之间（包括6和9）才会返回 \"Yes\"。相同的逻辑可被写为：",
        "<blockquote>if (num > 5 && num < 10) {<br>  return \"Yes\";<br>}<br>return \"No\";</blockquote>",
        "<h4>任务</h4>",
        "结合两个if语句为一个语句，如果 <code>val</code> 小于或等于 <code>50</code> 并且大于或等于 <code>25</code>，返回 <code>\"Yes\"</code>。否则，将返回 <code>\"No\"</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  // 请只修改这条注释以下的代码",
        "",
        "  if (val) {",
        "    if (val) {",
        "      return \"Yes\";",
        "    }",
        "  }",
        "",
        "  // 请只修改这条注释以上的代码",
        "  return \"No\";",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val >= 25 && val <= 50) {\n    return \"Yes\";\n  }\n  return \"No\";\n}"
      ],
      "tests": [
        "assert(code.match(/&&/g).length === 1, 'message: 你应该使用 <code>&&</code> 运算符一次');",
        "assert(code.match(/if/g).length === 1, 'message: 你应该只有一个 <code>if</code> 表达式');",
        "assert(myTest(0) === \"No\", 'message: <code>myTest(0)</code> 应该返回 \"No\"');",
        "assert(myTest(24) === \"No\", 'message: <code>myTest(24)</code> 应该返回 \"No\"');",
        "assert(myTest(25) === \"Yes\", 'message: <code>myTest(25)</code> 应该返回 \"Yes\"');",
        "assert(myTest(30) === \"Yes\", 'message: <code>myTest(30)</code> 应该返回 \"Yes\"');",
        "assert(myTest(50) === \"Yes\", 'message: <code>myTest(50)</code> 应该返回 \"Yes\"');",
        "assert(myTest(51) === \"No\", 'message: <code>myTest(51)</code> 应该返回 \"No\"');",
        "assert(myTest(75) === \"No\", 'message: <code>myTest(75)</code> 应该返回 \"No\"');",
        "assert(myTest(80) === \"No\", 'message: <code>myTest(80)</code> 应该返回 \"No\"');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d9",
      "title": "Comparisons with the Logical Or Operator",
      "description": [
        "如果任何一个操作数是<code>true</code>，<dfn>逻辑或</dfn> 运算符 (<code>||</code>) 返回 <code>true</code>。反之，返回 <code>false</code>。",
        "举个例子：",
        "<blockquote>if (num > 10) {<br>  return \"No\";<br>}<br>if (num < 5) {<br>  return \"No\";<br>}<br>return \"Yes\";</blockquote>",
        "只有当<code>num</code>大于等于5或小于等于10时，函数返回\"Yes\"。相同的逻辑可以简写成：",
        "<blockquote>if (num > 10 || num < 5) {<br>  return \"No\";<br>}<br>return \"Yes\";</blockquote>",
        "<h4>任务</h4>",
        "结合两个if语句为一个语句，如果<code>val</code>不在10和20之间(包括10和20)，返回 <code>\"Outside\"</code>。反之，返回 <code>\"Inside\"</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  // 请只修改这条注释以下的代码",
        "",
        "  if (val) {",
        "    return \"Outside\";",
        "  }",
        "",
        "  if (val) {",
        "    return \"Outside\";",
        "  }",
        "",
        "  // 请只修改这条注释以上的代码",
        "  return \"Inside\";",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(15);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val < 10 || val > 20) {\n    return \"Outside\";\n  }\n  return \"Inside\";\n}"
      ],
      "tests": [
        "assert(code.match(/\\|\\|/g).length === 1, 'message: 你应该使用一次 <code>||</code> 操作符');",
        "assert(code.match(/if/g).length === 1, 'message: 你应该只有一个 <code>if</code> 表达式');",
        "assert(myTest(0) === \"Outside\", 'message: <code>myTest(0)</code> 应该返回 \"Outside\"');",
        "assert(myTest(9) === \"Outside\", 'message: <code>myTest(9)</code> 应该返回 \"Outside\"');",
        "assert(myTest(10) === \"Inside\", 'message: <code>myTest(10)</code> 应该返回 \"Inside\"');",
        "assert(myTest(15) === \"Inside\", 'message: <code>myTest(15)</code> 应该返回 \"Inside\"');",
        "assert(myTest(19) === \"Inside\", 'message: <code>myTest(19)</code> 应该返回 \"Inside\"');",
        "assert(myTest(20) === \"Inside\", 'message: <code>myTest(20)</code> 应该返回 \"Inside\"');",
        "assert(myTest(21) === \"Outside\", 'message: <code>myTest(21)</code> 应该返回 \"Outside\"');",
        "assert(myTest(25) === \"Outside\", 'message: <code>myTest(25)</code> 应该返回 \"Outside\"');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244da",
      "title": "Introducing Else Statements",
      "description": [
        "当<code>if</code>语句的条件为真，大括号里的代码执行，那如果条件为假呢？",
        "正常情况下什么也不会发生。",
        "写一个<code>else</code>语句，当条件为假时执行相应的代码。",
        "<blockquote>if (num > 10) {<br>  return \"Bigger than 10\";<br>} else {<br>  return \"10 or Less\";<br>}</blockquote>",
        "<h4>任务</h4>",
        "结合多个<code>if</code>语句为一个<code>if/else</code>语句。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  var result = \"\";",
        "  // 请只修改这条注释以下的代码",
        "  ",
        "  if (val > 5) {",
        "    result = \"Bigger than 5\";",
        "  }",
        "  ",
        "  if (val <= 5) {",
        "    result = \"5 or Smaller\";",
        "  }",
        "  ",
        "  // 请只修改这条注释以上的代码",
        "  return result;",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(4);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  var result = \"\";\n  if(val > 5) {\n    result = \"Bigger than 5\";\n  } else {\n    result = \"5 or Smaller\";\n  }\n  return result;\n}"
      ],
      "tests": [
        "assert(code.match(/if/g).length === 1, 'message: 你应该只有一个 <code>if</code> 表达式');",
        "assert(/else/g.test(code), 'message: 你应该使用一个 <code>else</code> 表达式');",
        "assert(myTest(4) === \"5 or Smaller\", 'message: <code>myTest(4)</code> 应该返回 \"5 or Smaller\"');",
        "assert(myTest(5) === \"5 or Smaller\", 'message: <code>myTest(5)</code> 应该返回 \"5 or Smaller\"');",
        "assert(myTest(6) === \"Bigger than 5\", 'message: <code>myTest(6)</code> 应该返回 \"Bigger than 5\"');",
        "assert(myTest(10) === \"Bigger than 5\", 'message: <code>myTest(10)</code> 应该返回 \"Bigger than 5\"');",
        "assert(/var result = \"\";/.test(code) && /return result;/.test(code), 'message: 不要修改上面和下面的代码');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244db",
      "title": "Introducing Else If Statements",
      "description": [
        "如果你有多个条件语句，你可以通过<code>else if</code>语句把 <code>if</code>语句链起来。",
        "<blockquote>if (num > 15) {<br>  return \"Bigger than 15\";<br>} else if (num < 5) {<br>  return \"Smaller than 5\";<br>} else {<br>  return \"Between 5 and 15\";<br>}</blockquote>",
        "<h4>任务</h4>",
        "使用<code>else if</code>实现同样的效果。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  if (val > 10) {",
        "    return \"Greater than 10\";",
        "  }",
        "  ",
        "  if (val < 5) {",
        "    return \"Smaller than 5\";",
        "  }",
        "  ",
        "  return \"Between 5 and 10\";",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(7);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  if(val > 10) {\n    return \"Greater than 10\";\n  } else if(val < 5) {\n    return \"Smaller than 5\";\n  } else {\n    return \"Between 5 and 10\";\n  }\n}"
      ],
      "tests": [
        "assert(code.match(/else/g).length > 1, 'message: 你应该至少有两个 <code>else</code> 表达式');",
        "assert(code.match(/if/g).length > 1, 'message: 你应该至少有两个 <code>if</code> 表达式');",
        "assert(myTest(0) === \"Smaller than 5\", 'message: <code>myTest(0)</code> 应该返回 \"Smaller than 5\"');",
        "assert(myTest(5) === \"Between 5 and 10\", 'message: <code>myTest(5)</code> 应该返回 \"Between 5 and 10\"');",
        "assert(myTest(7) === \"Between 5 and 10\", 'message: <code>myTest(7)</code> 应该返回 \"Between 5 and 10\"');",
        "assert(myTest(10) === \"Between 5 and 10\", 'message: <code>myTest(10)</code> 应该返回 \"Between 5 and 10\"');",
        "assert(myTest(12) === \"Greater than 10\", 'message: <code>myTest(12)</code> 应该返回 \"Greater than 10\"');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "5690307fddb111c6084545d7",
      "title": "Logical Order in If Else Statements",
      "description": [
        "<code>if</code>、<code>else if</code>语句中代码的执行顺序是很重要的。",
        "在条件判断语句中，代码的执行顺序是从上到下，所以你需要考虑清楚先执行哪一句，后执行哪一句。",
        "这有两个例子。",
        "第一个例子：",
        "<blockquote>function foo(x) {<br>  if (x < 1) {<br>    return \"Less than one\";<br>  } else if (x < 2) {<br>    return \"Less than two\";<br>  } else {<br>    return \"Greater than or equal to two\";<br>  }<br>}</blockquote>",
        "第二个例子更改了代码的执行顺序：",
        "<blockquote>function bar(x) {<br>  if (x < 2) {<br>    return \"Less than two\";<br>  } else if (x < 1) {<br>    return \"Less than one\";<br>  } else {<br>    return \"Greater than or equal to two\";<br>  }<br>}</blockquote>",
        "这两个函数看起来几乎一模一样，我们传一个值进去看看它们有什么区别。",
        "<blockquote>foo(0) // \"Less than one\"<br>bar(0) // \"Less than two\"</blockquote>",
        "<h4>任务</h4>",
        "更改函数的逻辑顺序以便通过所有的测试用例。"
      ],
      "challengeSeed": [
        "function myTest(val) {",
        "  if (val < 10) {",
        "    return \"Less than 10\";",
        "  } else if (val < 5) {",
        "    return \"Less than 5\";",
        "  } else {",
        "    return \"Greater than or equal to 10\";",
        "  }",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(7);"
      ],
      "solutions": [
        "function myTest(val) {\n  if(val < 5) {\n    return \"Less than 5\";            \n  } else if (val < 10) {\n    return \"Less than 10\";\n  } else {\n    return \"Greater than or equal to 10\";\n  }\n}"
      ],
      "tests": [
        "assert(myTest(4) === \"Less than 5\", 'message: <code>myTest(4)</code> 应该返回 \"Less than 5\"');",
        "assert(myTest(6) === \"Less than 10\", 'message: <code>myTest(6)</code> 应该返回 \"Less than 10\"');",
        "assert(myTest(11) === \"Greater than or equal to 10\", 'message: <code>myTest(11)</code> 应该返回 \"Greater than or equal to 10\"');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244dc",
      "title": "Chaining If Else Statements",
      "description": [
        "<code>if/else</code> 语句串联在一起可以实现复杂的逻辑，这是多个<code>if/else if</code> 语句串联在一起的伪代码：",
        "<blockquote>if (<em>condition1</em>) {<br>  <em>statement1</em><br>} else if (<em>condition2</em>) {<br>  <em>statement2</em><br>} else if (<em>condition3</em>) {<br>  <em>statement3</em><br>. . .<br>} else {<br>  <em>statementN</em><br>}</blockquote>",
        "<h4>任务</h4>",
        "把<code>if</code>/<code>else if</code>语句串联起来实现下面的逻辑：",
        "<code>num &lt;   5</code> - return \"Tiny\"<br><code>num &lt;  10</code> - return \"Small\"<br><code>num &lt; 15</code> - return \"Medium\"<br><code>num &lt; 20</code> - return \"Large\"<br><code>num >= 20</code>  - return \"Huge\""
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(num) {",
        "  // 请只修改这条注释以下的代码",
        "  ",
        "  ",
        "  return \"修改这里\";",
        "  // 请只修改这条注释以上的代码",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(7);"
      ],
      "solutions": [
        "function myTest(num) {\n  if (num < 5) {\n    return \"Tiny\";\n  } else if (num < 10) {\n    return \"Small\";\n  } else if (num < 15) {\n    return \"Medium\";\n  } else if (num < 20) {\n    return \"Large\";\n  } else {\n    return \"Huge\";\n  }\n}"
      ],
      "tests": [
        "assert(code.match(/else/g).length > 3, 'message: 你应该有至少4个 <code>else</code> 表达式');",
        "assert(code.match(/if/g).length > 3, 'message: 你应该有至少4个 <code>if</code> 表达式');",
        "assert(code.match(/return/g).length >= 5, 'message: 你应该有至少5个 <code>return</code> 表达式');",
        "assert(myTest(0) === \"Tiny\", 'message: <code>myTest(0)</code> 应该返回 \"Tiny\"');",
        "assert(myTest(4) === \"Tiny\", 'message: <code>myTest(4)</code> 应该返回 \"Tiny\"');",
        "assert(myTest(5) === \"Small\", 'message: <code>myTest(5)</code> 应该返回 \"Small\"');",
        "assert(myTest(8) === \"Small\", 'message: <code>myTest(8)</code> 应该返回 \"Small\"');",
        "assert(myTest(10) === \"Medium\", 'message: <code>myTest(10)</code> 应该返回 \"Medium\"');",
        "assert(myTest(14) === \"Medium\", 'message: <code>myTest(14)</code> 应该返回 \"Medium\"');",
        "assert(myTest(15) === \"Large\", 'message: <code>myTest(15)</code> 应该返回 \"Large\"');",
        "assert(myTest(17) === \"Large\", 'message: <code>myTest(17)</code> 应该返回 \"Large\"');",
        "assert(myTest(20) === \"Huge\", 'message: <code>myTest(20)</code> 应该返回 \"Huge\"');",
        "assert(myTest(25) === \"Huge\", 'message: <code>myTest(25)</code> 应该返回 \"Huge\"');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "5664820f61c48e80c9fa476c",
      "title": "Golf Code",
      "description": [
        "在高尔夫<code>golf</code>游戏中，每个洞都有自己的标准杆数<code>par</code>，代表着距离。根据你把球打进洞所挥杆的次数<code>strokes</code>，可以计算出你的高尔夫水平。",
        "函数将会传送2个参数，分别是标准杆数<code>par</code> 和 挥杆次数<code>strokes</code> ，根据下面的表格返回正确的水平段位。",
        "<table class=\"table table-striped\"><thead><tr><th>Strokes</th><th>Return</th></tr></thead><tbody><tr><td>1</td><td>\"Hole-in-one!\"</td></tr><tr><td>&lt;= par - 2</td><td>\"Eagle\"</td></tr><tr><td>par - 1</td><td>\"Birdie\"</td></tr><tr><td>par</td><td>\"Par\"</td></tr><tr><td>par + 1</td><td>\"Bogey\"</td></tr><tr><td>par + 2</td><td>\"Double Bogey\"</td></tr><tr><td>&gt;= par + 3</td><td>\"Go Home!\"</td></tr></tbody></table>",
        "<code>par</code> 和 <code>strokes</code> 必须是数字而且是正数。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function golfScore(par, strokes) {",
        "  // 请只修改这条注释以下的代码",
        "  ",
        "  ",
        "  return \"修改这里\";",
        "  // 请只修改这条注释以上的代码",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "golfScore(5, 4);"
      ],
      "solutions": [
        "function golfScore(par, strokes) {\n  if (strokes === 1) {\n    return \"Hole-in-one!\";\n  }\n  \n  if (strokes <= par - 2) {\n    return \"Eagle\";\n  }\n  \n  if (strokes === par - 1) {\n    return \"Birdie\";\n  }\n  \n  if (strokes === par) {\n    return \"Par\";\n  }\n  \n  if (strokes === par + 1) {\n    return \"Bogey\";\n  }\n  \n  if(strokes === par + 2) {\n    return \"Double Bogey\";\n  }\n  \n  return \"Go Home!\";\n}"
      ],
      "tests": [
        "assert(golfScore(4, 1) === \"Hole-in-one!\", 'message: <code>golfScore(4, 1)</code> 应该返回 \"Hole-in-one!\"');",
        "assert(golfScore(4, 2) === \"Eagle\", 'message: <code>golfScore(4, 2)</code> 应该返回 \"Eagle\"');",
        "assert(golfScore(5, 2) === \"Eagle\", 'message: <code>golfScore(5, 2)</code> 应该返回 \"Eagle\"');",
        "assert(golfScore(4, 3) === \"Birdie\", 'message: <code>golfScore(4, 3)</code> 应该返回 \"Birdie\"');",
        "assert(golfScore(4, 4) === \"Par\", 'message: <code>golfScore(4, 4)</code> 应该返回 \"Par\"');",
        "assert(golfScore(1, 1) === \"Hole-in-one!\", 'message: <code>golfScore(1, 1)</code> 应该返回 \"Hole-in-one!\"');",
        "assert(golfScore(5, 5) === \"Par\", 'message: <code>golfScore(5, 5)</code> 应该返回 \"Par\"');",
        "assert(golfScore(4, 5) === \"Bogey\", 'message: <code>golfScore(4, 5)</code> 应该返回 \"Bogey\"');",
        "assert(golfScore(4, 6) === \"Double Bogey\", 'message: <code>golfScore(4, 6)</code> 应该返回 \"Double Bogey\"');",
        "assert(golfScore(4, 7) === \"Go Home!\", 'message: <code>golfScore(4, 7)</code> 应该返回 \"Go Home!\"');",
        "assert(golfScore(5, 9) === \"Go Home!\", 'message: <code>golfScore(5, 9)</code> 应该返回 \"Go Home!\"');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244dd",
      "title": "Selecting from many options with Switch Statements",
      "description": [
        "如果你有非常多的选项需要选择，可以使用switch语句。根据不同的参数值会匹配上不同的case分支，语句会从第一个匹配的case分支开始执行，直到碰到break就结束。",
        "这是一个伪代码案例：",
        "<blockquote>switch (num) {<br>  case value1:<br>    statement1;<br>    break;<br>  case value2:<br>    statement2;<br>    break;<br>...<br>  case valueN:<br>    statementN;<br>    break;<br>}</blockquote>",
        "测试<code>case</code> 值使用严格相等运算符进行比较，break关键字告诉javascript停止执行语句。如果没有break关键字，下一个语句会继续执行。",
        "<h4>任务</h4>",
        "写一个测试 <code>val</code>的switch语句，并且根据下面的条件来设置不同的<code>answer</code>：<br><code>1</code> - \"alpha\"<br><code>2</code> - \"beta\"<br><code>3</code> - \"gamma\"<br><code>4</code> - \"delta\""
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  var answer = \"\";",
        "  // 请把你的代码写在这条注释以下",
        "  ",
        "  ",
        "  ",
        "  // 请把你的代码写在这条注释以上",
        "  return answer;  ",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(1);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  var answer = \"\";\n\n  switch (val) {\n    case 1:\n      answer = \"alpha\";\n      break;\n    case 2:\n      answer = \"beta\";\n      break;\n    case 3:\n      answer = \"gamma\";\n      break;\n    case 4:\n      answer = \"delta\";\n  }\n  return answer;  \n}"
      ],
      "tests": [
        "assert(myTest(1) === \"alpha\", 'message: <code>myTest(1) 应该有一个值为 \"alpha\"');",
        "assert(myTest(2) === \"beta\", 'message: <code>myTest(2) 应该有一个值为 \"beta\"');",
        "assert(myTest(3) === \"gamma\", 'message: <code>myTest(3) 应该有一个值为 \"gamma\"');",
        "assert(myTest(4) === \"delta\", 'message: <code>myTest(4) 应该有一个值为 \"delta\"');",
        "assert(!/else/g.test(code) || !/if/g.test(code), 'message: 不能使用任何 <code>if</code> 或 <code>else</code> 表达式');",
        "assert(code.match(/break/g).length > 2, 'message: 你应该有至少 3 个 <code>break</code> 表达式');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244de",
      "title": "Adding a default option in Switch statements",
      "description": [
        "在<code>switch</code> 语句中你可能无法用case来指定所有情况，这时你可以添加default语句。当再也找不到case匹配的时候default语句会执行，非常类似于if/else组合中的else语句。",
        "<code>default</code>语句应该是最后一个case。",
        "<blockquote>switch (num) {<br>  case value1:<br>    statement1;<br>    break;<br>  case value2:<br>    statement2;<br>    break;<br>...<br>  default:<br>    defaultStatement;<br>}</blockquote>",
        "<h4>任务</h4>",
        "写一个根据下面的条件来设置<code>answer</code>的switch语句：<br><code>\"a\"</code> - \"apple\"<br><code>\"b\"</code> - \"bird\"<br><code>\"c\"</code> - \"cat\"<br><code>default</code> - \"stuff\""
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  var answer = \"\";",
        "  // 请把你的代码写在这条注释以下",
        "  ",
        "  ",
        "  ",
        "  // 请把你的代码写在这条注释以上",
        "  return answer;  ",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(1);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  var answer = \"\";\n\n  switch(val) {\n    case \"a\":\n      answer = \"apple\";\n      break;\n    case \"b\":\n      answer = \"bird\";\n      break;\n    case \"c\":\n      answer = \"cat\";\n      break;\n    default:\n      answer = \"stuff\";\n  }\n  return answer;  \n}"
      ],
      "tests": [
        "assert(myTest(\"a\") === \"apple\", 'message: <code>myTest(\"a\") 应该有一个值为 \"apple\"');",
        "assert(myTest(\"b\") === \"bird\", 'message: <code>myTest(\"b\") 应该有一个值为 \"bird\"');",
        "assert(myTest(\"c\") === \"cat\", 'message: <code>myTest(\"c\") 应该有一个值为 \"cat\"');",
        "assert(myTest(\"d\") === \"stuff\", 'message: <code>myTest(\"d\") 应该有一个值为 \"stuff\"');",
        "assert(myTest(4) === \"stuff\", 'message: <code>myTest(4) 应该有一个值为 \"stuff\"');",
        "assert(!/else/g.test(code) || !/if/g.test(code), 'message: 不能使用任何 <code>if</code> 或 <code>else</code> 表达式');",
        "assert(code.match(/break/g).length > 2, 'message: 你应该有至少 3 个 <code>break</code> 表达式');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244df",
      "title": "Multiple Identical Options in Switch Statements",
      "description": [
        "如果<code>switch</code>语句中的<code>case</code>分支的<code>break</code> 语句漏掉了，后面的 <code>case</code>语句会一直执行直到遇到<code>break</code>。如果你有多个输入值和输出值一样，可以试试下面的<code>switch</code>语句：",
        "<blockquote>switch(val) {<br>  case 1:<br>  case 2:<br>  case 3:<br>    result = \"1, 2, or 3\";<br>    break;<br>  case 4:<br>    result = \"4 alone\";<br>}</blockquote>",
        "分支1、2、3将会产生相同的输出结果。",
        "<h4>任务</h4>",
        "写一个根据下面的范围来设置<code>answer</code> 的switch语句：<br><code>1-3</code> - \"Low\"<br><code>4-6</code> - \"Mid\"<br><code>7-9</code> - \"High\"",
        "<strong>提示</strong><br>你需要为每一个包含数字的范围准备一个<code>answer</code>语句。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  var answer = \"\";",
        "  // 请把你的代码写在这条注释以下",
        "  ",
        "  ",
        "  ",
        "  // 请把你的代码写在这条注释以上",
        "  return answer;  ",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(1);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  var answer = \"\";\n  \n  switch (val) {\n    case 1:\n    case 2:\n    case 3:\n      answer = \"Low\";\n      break;\n    case 4:\n    case 5:\n    case 6:\n      answer = \"Mid\";\n      break;\n    case 7:\n    case 8:\n    case 9:\n      answer = \"High\";\n  }\n  \n  return answer;  \n}"
      ],
      "tests": [
        "assert(myTest(1) === \"Low\", 'message: <code>myTest(1)</code> 应该返回 \"Low\"');",
        "assert(myTest(2) === \"Low\", 'message: <code>myTest(2)</code> 应该返回 \"Low\"');",
        "assert(myTest(3) === \"Low\", 'message: <code>myTest(3)</code> 应该返回 \"Low\"');",
        "assert(myTest(4) === \"Mid\", 'message: <code>myTest(4)</code> 应该返回 \"Mid\"');",
        "assert(myTest(5) === \"Mid\", 'message: <code>myTest(5)</code> 应该返回 \"Mid\"');",
        "assert(myTest(6) === \"Mid\", 'message: <code>myTest(6)</code> 应该返回 \"Mid\"');",
        "assert(myTest(7) === \"High\", 'message: <code>myTest(7)</code> 应该返回 \"High\"');",
        "assert(myTest(8) === \"High\", 'message: <code>myTest(8)</code> 应该返回 \"High\"');",
        "assert(myTest(9) === \"High\", 'message: <code>myTest(9)</code> 应该返回 \"High\"');",
        "assert(!/else/g.test(code) || !/if/g.test(code), 'message: 不要使用 <code>if</code> 或 <code>else</code> 表达式');",
        "assert(code.match(/case/g).length === 9, 'message: 你应该有 9 个 <code>case</code> 表达式');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244e0",
      "title": "Replacing If Else Chains with Switch",
      "description": [
        "如果你有多个选项需要选择，<code>switch</code> 语句写起来会比多个串联的<code>if</code>/<code>if else</code>语句容易些，譬如:",
        "<blockquote>if (val === 1) {<br>  answer = \"a\";<br>} else if (val === 2) {<br>  answer = \"b\";<br>} else {<br>  answer = \"c\";<br>}</blockquote>",
        "可以被下面替代：",
        "<blockquote>switch (val) {<br>  case 1:<br>    answer = \"a\";<br>    break;<br>  case 2:<br>    answer = \"b\";<br>    break;<br>  default:<br>    answer = \"c\";<br>}</blockquote>",
        "<h4>任务</h4>",
        "把串联的 <code>if</code>/<code>if else</code> 语句改成 <code>switch</code> 语句。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  var answer = \"\";",
        "  // 请只修改这条注释以下的代码",
        "  ",
        "  if (val === \"bob\") {",
        "    answer = \"Marley\";",
        "  } else if (val === 42) {",
        "    answer = \"The Answer\";",
        "  } else if (val === 1) {",
        "    answer = \"There is no #1\";",
        "  } else if (val === 99) {",
        "    answer = \"Missed me by this much!\";",
        "  } else if (val === 7) {",
        "    answer = \"Ate Nine\";",
        "  }",
        "  ",
        "  // 请只修改这条注释以上的代码",
        "  return answer;  ",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "myTest(7);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  var answer = \"\";\n\n  switch (val) {\n    case \"bob\":\n      answer = \"Marley\";\n      break;\n    case 42:\n      answer = \"The Answer\";\n      break;\n    case 1:\n      answer = \"There is no #1\";\n      break;\n    case 99:\n      answer = \"Missed me by this much!\";\n      break;\n    case 7:\n      answer = \"Ate Nine\";\n  }\n  return answer;  \n}"
      ],
      "tests": [
        "assert(!/else/g.test(code), 'message: 不要使用 <code>else</code> 表达式');",
        "assert(!/if/g.test(code), 'message: 不要使用 <code>if</code> 表达式');",
        "assert(code.match(/break/g).length >= 4, 'message: 你应该有至少 4 个 <code>break</code> 表达式');",
        "assert(myTest(\"bob\") === \"Marley\", 'message: <code>myTest(\"bob\")</code> 应该为 \"Marley\"');",
        "assert(myTest(42) === \"The Answer\", 'message: <code>myTest(42)</code> 应该为 \"The Answer\"');",
        "assert(myTest(1) === \"There is no #1\", 'message: <code>myTest(1)</code> 应该为 \"There is no #1\"');",
        "assert(myTest(99) === \"Missed me by this much!\", 'message: <code>myTest(99)</code> 应该为 \"Missed me by this much!\"');",
        "assert(myTest(7) === \"Ate Nine\", 'message: <code>myTest(7)</code> 应该为 \"Ate Nine\"');",
        "assert(myTest(\"John\") === \"\", 'message: <code>myTest(\"John\")</code> 应该为 \"\" (empty string)');",
        "assert(myTest(156) === \"\", 'message: <code>myTest(156)</code> 应该为 \"\" (empty string)');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "5679ceb97cbaa8c51670a16b",
      "title": "Returning Boolean Values from Functions",
      "description": [
        "你可能会回想起<a href=\"waypoint-comparison-with-the-equality-operator\" target=\"_blank\">Comparison with the Equality Operator</a> ，所有的比较操作符返回的都是一个boolean值，要么是 <code>true</code> 要么是<code>false</code> 。",
        "使用 <code>if/else</code>语句来做比较然后返回<code>true</code>或<code>false</code>已经成为大家的共识:",
        "<blockquote>function isEqual(a,b) {<br>  if (a === b) {<br>    return true;<br>  } else {<br>    return false;<br>  }<br>}</blockquote>",
        "因为<code>===</code> 总是返回 <code>true</code> 或 <code>false</code>，所以我们可以直接返回比较的结果：",
        "<blockquote>function isEqual(a,b) {<br>  return a === b;<br>}</blockquote>",
        "<h4>任务</h4>",
        "移除<code>isLess</code>函数的<code>if/else</code>语句但不影响函数的功能。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function isLess(a, b) {",
        "  // 请修改这部分代码",
        "  if (a < b) {",
        "    return true;",
        "  } else {",
        "    return false;",
        "  }",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "isLess(10, 15);"
      ],
      "tail": [
        ""
      ],
      "solutions": [
        "function isLess(a, b) {\n  return a < b;\n}"
      ],
      "tests": [
        "assert(isLess(10,15) === true, 'message: <code>isLess(10,15)</code> 应该返回 <code>true</code>');",
        "assert(isLess(15, 10) === false, 'message: <code>isLess(15,10)</code> 应该返回 <code>false</code>');",
        "assert(!/if|else/g.test(code), 'message: 不要使用 <code>if</code> 或 <code>else</code> 表达式');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c4",
      "title": "Return Early Pattern for Functions",
      "description": [
        "当代码执行到return语句时，函数返回一个结果就结束运行了，return后面的语句根本不会执行。",
        "<strong>举例</strong>",
        "<blockquote>function myFun() {<br>  console.log(\"Hello\");<br>  return \"World\";<br>  console.log(\"byebye\")<br>}<br>myFun();</blockquote>",
        "上面的代码输出\"Hello\"到控制台、返回 \"World\"，但没有输出<code>\"byebye\"</code>，因为函数遇到return语句就退出了。",
        "<h4>任务</h4>",
        "修改函数<code>abTest</code>当<code>a</code>或<code>b</code>小于0时，函数立即返回一个<code>undefined</code>并退出。",
        "<strong>提示</strong><br>记住<a href='understanding-uninitialized-variables' target='_blank'><code>undefined</code></a>，是一个关键字，而不是一个字符串。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 定义 abTest",
        "function abTest(a, b) {",
        "  // 请把你的代码写在这条注释以下",
        "  ",
        "  ",
        "  ",
        "  // 请把你的代码写在这条注释以上",
        "",
        "  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "abTest(2,2);"
      ],
      "tail": [
        ""
      ],
      "solutions": [
        "function abTest(a, b) {\n  if(a < 0 || b < 0) {\n    return undefined;\n  } \n  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}"
      ],
      "tests": [
        "assert(typeof abTest(2,2) === 'number' , 'message: <code>abTest(2,2)</code> 应该返回数字');",
        "assert(abTest(2,2) === 8 , 'message: <code>abTest(2,2)</code> 应该返回 <code>8</code>');",
        "assert(abTest(-2,2) === undefined , 'message: <code>abTest(-2,2)</code> 应该返回 <code>undefined</code>');",
        "assert(abTest(2,-2) === undefined , 'message: <code>abTest(2,-2)</code> 应该返回 <code>undefined</code>');",
        "assert(abTest(2,8) === 18 , 'message: <code>abTest(2,8)</code> 应该返回 <code>18</code>');",
        "assert(abTest(3,3) === 12 , 'message: <code>abTest(3,3)</code> 应该返回 <code>12</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "565bbe00e9cc8ac0725390f4",
      "title": "Counting Cards",
      "description": [
        "在赌场21点游戏中，玩家可以通过计算牌桌上已经发放的卡牌的高低值来让自己在游戏中保持优势，这就叫<a href='https://www.douban.com/note/273781969/' target='_blank'>21点算法</a>。",
        "根据下面的表格，每张卡牌都分配了一个值。如果卡牌的值<count>大于0，那么玩家应该追加赌注。反之，追加少许赌注甚至不追加赌注。",
        "<table class=\"table table-striped\"><thead><tr><th>Count Change</th><th>Cards</th></tr></thead><tbody><tr><td>+1</td><td>2, 3, 4, 5, 6</td></tr><tr><td>0</td><td>7, 8, 9</td></tr><tr><td>-1</td><td>10, 'J', 'Q', 'K','A'</td></tr></tbody></table>",
        "你需要写一个函数，实现21点算法，它根据参数 <code>card</code>的值来递增或递减变量<code>count</code>，函数返回一个由当前<code>count</code>和 <code>\"Bet\"</code>(<code>count>0</code>)或<code>\"Hold\"</code>(<code>count<=0</code>) 拼接的字符串。注意<code>count</code>和<code>\"Bet\"</code> 或 <code>\"Hold\"</code>应该用空格分开。",
        "<strong>例如：</strong><br><code>\"-3 Hold\"<br>\"5 Bet\"</code>",
        "<strong>提示</strong><br>既然card的值为7、8、9时，count值不变，那我们就可以忽略这种情况。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var count = 0;",
        "",
        "function cc(card) {",
        "  // 请把你的代码写在这条注释以下",
        "  ",
        "  ",
        "  return \"修改这里\";",
        "  // 请把你的代码写在这条注释以上",
        "}",
        "",
        "// 你可以在这里添加/删除 cc 方法的调用来测试结果",
        "// 提示: 左边只会显示最后一次执行的返回值",
        "cc(2); cc(3); cc(7); cc('K'); cc('A');"
      ],
      "solutions": [
        "var count = 0;\nfunction cc(card) {\n  switch(card) {\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n      count++;\n      break;\n    case 10:\n    case 'J':\n    case 'Q':\n    case 'K':\n    case 'A':\n      count--;\n  }\n  if(count > 0) {\n    return count + \" Bet\";\n  } else {\n    return count + \" Hold\";\n  }\n}"
      ],
      "tests": [
        "assert((function(){ count = 0; cc(2);cc(3);cc(4);cc(5);var out = cc(6); if(out === \"5 Bet\") {return true;} return false; })(), 'message: 卡牌序列 2, 3, 4, 5, 6 应该返回 <code>\"5 Bet\"</code>');",
        "assert((function(){ count = 0; cc(7);cc(8);var out = cc(9); if(out === \"0 Hold\") {return true;} return false; })(), 'message: 卡牌序列 7, 8, 9 应该返回 <code>\"0 Hold\"</code>');",
        "assert((function(){ count = 0; cc(10);cc('J');cc('Q');cc('K');var out = cc('A'); if(out === \"-5 Hold\") {return true;} return false; })(), 'message: 卡牌序列 10, J, Q, K, A 应该返回 <code>\"-5 Hold\"</code>');",
        "assert((function(){ count = 0; cc(3);cc(7);cc('Q');cc(8);var out = cc('A'); if(out === \"-1 Hold\") {return true;} return false; })(), 'message: 卡牌序列 3, 7, Q, 8, A 应该返回 <code>\"-1 Hold\"</code>');",
        "assert((function(){ count = 0; cc(2);cc('J');cc(9);cc(2);var out = cc(7); if(out === \"1 Bet\") {return true;} return false; })(), 'message: 卡牌序列 2, J, 9, 2, 7 应该返回 <code>\"1 Bet\"</code>');",
        "assert((function(){ count = 0; cc(3);cc(2);cc('A');cc(10);var out = cc('K'); if(out === \"-1 Hold\") {return true;} return false; })(), 'message: 卡牌序列 3, 2, A, 10, K 应该返回 <code>\"-1 Hold\"</code>');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392d0",
      "title": "Build JavaScript Objects",
      "description": [
        "你之前可能听说过对象 <code>object</code> 。",
        "对象和数组很相似，数组是通过索引来访问和修改数据，对象是通过属性来访问和修改数据的。",
        "这是一个示例对象：",
        "<blockquote>var cat = {<br>  \"name\": \"Whiskers\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"enemies\": [\"Water\", \"Dogs\"]<br>};</blockquote>",
        "对象适合用来存储结构化数据，就和真实世界的对象一模一样，比如一只猫。",
        "<h4>任务</h4>",
        "创建一个叫做<code>myDog</code>的对象，它里面有这些属性： <code>名称\"name\"</code>、 <code>腿\"legs\"</code>, <code>尾巴\"tails\"</code>、<code>朋友\"friends\"</code>。",
        "你可以设置对象属性为任何你想要的值，只要 <code>\"name\"</code> 是字符串、 <code>\"legs\"</code> 和 <code>\"tails\"</code> 是数字、<code>\"friends\"</code> 是数组。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourDog = {",
        "  \"name\": \"Camper\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"everything!\"]",
        "};",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var myDog = {",
        "  ",
        "  ",
        "  ",
        "  ",
        "};"
      ],
      "tail": [
        "(function(z){return z;})(myDog);"
      ],
      "solutions": [
        "var myDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]  \n};"
      ],
      "tests": [
        "assert((function(z){if(z.hasOwnProperty(\"name\") && z.name !== undefined && typeof z.name === \"string\"){return true;}else{return false;}})(myDog), 'message: <code>myDog</code> 应该包含 <code>name</code> 属性, 并且是一个字符串');",
        "assert((function(z){if(z.hasOwnProperty(\"legs\") && z.legs !== undefined && typeof z.legs === \"number\"){return true;}else{return false;}})(myDog), 'message: <code>myDog</code> 应该包含 <code>legs</code> 属性, 并且是一个数字');",
        "assert((function(z){if(z.hasOwnProperty(\"tails\") && z.tails !== undefined && typeof z.tails === \"number\"){return true;}else{return false;}})(myDog), 'message: <code>myDog</code> 应该包含 <code>tails</code> 属性, 并且是一个数字');",
        "assert((function(z){if(z.hasOwnProperty(\"friends\") && z.friends !== undefined && Array.isArray(z.friends)){return true;}else{return false;}})(myDog), 'message: <code>myDog</code> 应该包含 <code>friends</code> 属性, 并且是一个数组');",
        "assert((function(z){return Object.keys(z).length === 4;})(myDog), 'message: <code>myDog</code> 应该只包含给出的属性');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c7",
      "title": "Accessing Objects Properties with the Dot Operator",
      "description": [
        "有两种方式访问对象属性，一个是点操作符(<code>.</code>)，一个是中括号操作符(<code>[]</code>)。",
        "当你知道属性的名称的时候，使用点操作符。",
        "这是一个使用点操作符读取对象属性的例子：",
        "<blockquote>var myObj = {<br>  prop1: \"val1\",<br>  prop2: \"val2\"<br>};<br>var prop1val = myObj.prop1; // val1<br>var prop2val = myObj.prop2; // val2</blockquote>",
        "<h4>任务</h4>",
        "通过点操作符读取对象<code>testObj</code>，把<code>hat</code>的属性值赋给变量<code>hatValue</code>，把<code>shirt</code>的属性值赋给<code>shirtValue</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 初始化变量",
        "var testObj = {",
        "  \"hat\": \"ballcap\",",
        "  \"shirt\": \"jersey\",",
        "  \"shoes\": \"cleats\"",
        "};",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var hatValue = testObj;      // 请修改这一行",
        "var shirtValue = testObj;    // 请修改这一行"
      ],
      "tail": [
        "(function(a,b) { return \"hatValue = '\" + a + \"', shirtValue = '\" + b + \"'\"; })(hatValue,shirtValue);"
      ],
      "solutions": [
        "var testObj = {\n  \"hat\": \"ballcap\",\n  \"shirt\": \"jersey\",\n  \"shoes\": \"cleats\"\n};\n\nvar hatValue = testObj.hat;  \nvar shirtValue = testObj.shirt;"
      ],
      "tests": [
        "assert(typeof hatValue === 'string' , 'message: <code>hatValue</code> 应该是一个字符串');",
        "assert(hatValue === 'ballcap' , 'message: <code>hatValue</code> 的值应该是 <code>\"ballcap\"</code>');",
        "assert(typeof shirtValue === 'string' , 'message: <code>shirtValue</code> 应该是一个字符串');",
        "assert(shirtValue === 'jersey' , 'message: <code>shirtValue</code> 的值应该是 <code>\"jersey\"</code>');",
        "assert(code.match(/testObj\\.\\w+/g).length > 1, 'message: 你应该使用点操作符两次');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c8",
      "title": "Accessing Objects Properties with Bracket Notation",
      "description": [
        "第二种访问对象的方式就是中括号操作符(<code>[]</code>)，如果你想访问的属性的名称有一个空格，这时你只能使用中括号操作符(<code>[]</code>)。",
        "这是一个使用中括号操作符(<code>[]</code>)读取对象属性的例子：",
        "<blockquote>var myObj = {<br>  \"Space Name\": \"Kirk\",<br>  \"More Space\": \"Spock\"<br>};<br>myObj[\"Space Name\"]; // Kirk<br>myObj['More Space']; // Spock</blockquote>",
        "提示：属性名称中如果有空格，必须把属性名称用单引号或双引号包裹起来。",
        "<h4>任务</h4>",
        "用中括号操作符读取对象<code>testObj</code>的属性<code>\"an entree\"</code>值和属性<code>\"the drink\"</code>值。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 初始化变量",
        "var testObj = {",
        "  \"an entree\": \"hamburger\",",
        "  \"my side\": \"veggies\",",
        "  \"the drink\": \"water\"",
        "};",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var entreeValue = testObj;   // 请修改这一行",
        "var drinkValue = testObj;    // 请修改这一行"
      ],
      "tail": [
        "(function(a,b) { return \"entreeValue = '\" + a + \"', drinkValue = '\" + b + \"'\"; })(entreeValue,drinkValue);"
      ],
      "solutions": [
        "var testObj = {\n  \"an entree\": \"hamburger\",\n  \"my side\": \"veggies\",\n  \"the drink\": \"water\"\n};\nvar entreeValue = testObj[\"an entree\"];\nvar drinkValue = testObj['the drink'];"
      ],
      "tests": [
        "assert(typeof entreeValue === 'string' , 'message: <code>entreeValue</code> 应该是一个字符串');",
        "assert(entreeValue === 'hamburger' , 'message: <code>entreeValue</code> 的值应该是 <code>\"hamburger\"</code>');",
        "assert(typeof drinkValue === 'string' , 'message: <code>drinkValue</code> 应该是一个字符串');",
        "assert(drinkValue === 'water' , 'message: <code>drinkValue</code> 的值应该是 <code>\"water\"</code>');",
        "assert(code.match(/testObj\\s*?\\[('|\")[^'\"]+\\1\\]/g).length > 1, 'message: 你应该使用括号两次');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c9",
      "title": "Accessing Objects Properties with Variables",
      "description": [
        "中括号操作符的另一个使用方式是用变量来访问一个属性。当你需要遍历对象的属性列表或查表时，这种方式极为有用。",
        "这有一个使用变量来访问属性的例子：",
        "<blockquote>var someProp = \"propName\";<br>var myObj = {<br>  propName: \"Some Value\"<br >}<br>myObj[someProp]; // \"Some Value\"</blockquote>",
        "还有更多：",
        "<blockquote>var myDog = \"Hunter\";<br>var dogs = {<br>  Fido: \"Mutt\",\n  Hunter: \"Doberman\",\n  Snoopie: \"Beagle\"<br >}<br>var breed = dogs[myDog]; <br>console.log(breed)// \"Doberman\"</blockquote>",
        "提示：当我们通过变量名访问属性的时候，不需要给变量名包裹引号。因为实际上我们使用的是变量的值，而不是变量的名称。",
        "<h4>任务</h4>",
        "使用变量 <code>playerNumber</code>，通过中括号操作符找到 <code>testObj</code> 中 <code>playerNumber</code> 为 <code>16</code> 的值。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 初始化变量",
        "var testObj = {",
        "  12: \"Namath\",",
        "  16: \"Montana\",",
        "  19: \"Unitas\"",
        "};",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var playerNumber;       // 修改这一行",
        "var player = testObj;   // 修改这一行"
      ],
      "tail": [
        "if(typeof player !== \"undefined\"){(function(v){return v;})(player);}"
      ],
      "solutions": [
        "var testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\nvar playerNumber = 16;\nvar player = testObj[playerNumber];"
      ],
      "tests": [
        "assert(typeof playerNumber === 'number', 'message: <code>playerNumber</code> 应该是一个数字');",
        "assert(typeof player === 'string', 'message: <code>player</code> 变量应该是字符串');",
        "assert(player === 'Montana', 'message: <code>player</code> 的值应该是 \"Montana\"');",
        "assert(/testObj\\s*?\\[\\s*playerNumber\\s*\\]/.test(code),'message: 你应该使用括号访问 <code>testObj</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392d1",
      "title": "Updating Object Properties",
      "description": [
        "当你创建了一个对象后，你可以用点操作符或中括号操作符来更新对象的属性。",
        "举个例子，让我们看看 <code>ourDog</code>:",
        "<blockquote>var ourDog = {<br>  \"name\": \"Camper\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"friends\": [\"everything!\"]<br>};</blockquote>",
        "让我们更改它的名称为 \"Happy Camper\"，这有两种方式来更新对象的<code>name</code>属性：",
        "<code>ourDog.name = \"Happy Camper\";</code>",
        "<code>ourDog[\"name\"] = \"Happy Camper\";</code>",
        "<h4>任务</h4>",
        "更新 <code>myDog</code> 对象的<code>name</code>属性，让它的名字从 \"Coder\" 变成 \"Happy Coder\"。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourDog = {",
        "  \"name\": \"Camper\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"everything!\"]",
        "};",
        "",
        "ourDog.name = \"Happy Camper\";",
        "",
        "// 初始化变量",
        "var myDog = {",
        "  \"name\": \"Coder\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"Free Code Camp Campers\"]",
        "};",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "(function(z){return z;})(myDog);"
      ],
      "solutions": [
        "var myDog = {\n  \"name\": \"Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"Free Code Camp Campers\"]\n};\nmyDog.name = \"Happy Coder\";"
      ],
      "tests": [
        "assert(/happy coder/gi.test(myDog.name), 'message: 更新 <code>myDog</code> 的 <code>\"name\"</code> 属性, 使其等于 \"Happy Coder\".');",
        "assert(/\"name\": \"Coder\"/.test(code), 'message: 不要修改 <code>myDog</code> 的定义');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392d2",
      "title": "Add New Properties to a JavaScript Object",
      "description": [
        "你也可以像更改属性一样给对象添加属性。",
        "看看我们是如何给<code>ourDog</code>添加 <code>\"bark\"</code>属性：",
        "<code>ourDog.bark = \"bow-wow\";</code> ",
        "或者",
        "<code>ourDog[\"bark\"] = \"bow-wow\";</code>",
        "<h4>任务</h4>",
        "给<code>myDog</code>添加一个<code>\"bark\"</code> 属性，设置它的值为狗的声音，例如：\"woof\"。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourDog = {",
        "  \"name\": \"Camper\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"everything!\"]",
        "};",
        "",
        "ourDog.bark = \"bow-wow\";",
        "",
        "// 初始化变量",
        "var myDog = {",
        "  \"name\": \"Happy Coder\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"Free Code Camp Campers\"]",
        "};",
        "",
        "// 请把你的代码写在这条注释以下",
        ""
      ],
      "tail": [
        "(function(z){return z;})(myDog);"
      ],
      "solutions": [
        "var myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"Free Code Camp Campers\"]\n};\nmyDog.bark = \"Woof Woof\";"
      ],
      "tests": [
        "assert(myDog.bark !== undefined, 'message: 给 <code>myDog</code> 添加 <code>\"bark\"</code> 属性');",
        "assert(!/bark[^\\n]:/.test(code), 'message: 不能在 setup 的地方添加 <code>\"bark\"</code> 属性');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392d3",
      "title": "Delete Properties from a JavaScript Object",
      "description": [
        "我们同样可以删除对象的属性，例如：",
        "<code>delete ourDog.bark;</code>",
        "<h4>任务</h4>",
        "删除<code>myDog</code>对象的<code>\"tails\"</code>属性。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourDog = {",
        "  \"name\": \"Camper\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"everything!\"],",
        "  \"bark\": \"bow-wow\"",
        "};",
        "",
        "delete ourDog.bark;",
        "",
        "// 初始化变量",
        "var myDog = {",
        "  \"name\": \"Happy Coder\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"Free Code Camp Campers\"],",
        "  \"bark\": \"woof\"",
        "};",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "(function(z){return z;})(myDog);"
      ],
      "solutions": [
        "var ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"],\n  \"bark\": \"bow-wow\"\n};\n\nvar myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"Free Code Camp Campers\"],\n  \"bark\": \"woof\"\n};\n\ndelete myDog.tails;"
      ],
      "tests": [
        "assert(myDog.tails === undefined, 'message: 从 <code>myDog</code> 中删除 <code>\"tails\"</code> 属性');",
        "assert(code.match(/\"tails\": 1/g).length > 1, 'message: 不能修改 <code>myDog</code> 的 setup 部分');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ca",
      "title": "Using Objects for Lookups",
      "description": [
        "对象和字典一样，可以用来存储键/值对。如果你的数据跟对象一样，你可以用对象来查找你想要的值，而不是使用switch或if/else语句。当你知道你的输入数据在某个范围时，这种查找方式极为有效。",
        "这是简单的反向字母表：",
        "<blockquote>var alpha = {<br>  1:\"Z\",<br>  2:\"Y\",<br>  3:\"X\",<br>  4:\"W\",<br>  ...<br>  24:\"C\",<br>  25:\"B\",<br>  26:\"A\"<br>};<br>alpha[2]; // \"Y\"<br>alpha[24]; // \"C\"<br><br>var value = 2;<br>alpha[value]; // \"Y\"</blockquote>",
        "<h4>任务</h4>",
        "把switch语句转化为一个叫做lookup的对象。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 定义 phoneticLookup",
        "function phoneticLookup(val) {",
        "  var result = \"\";",
        "",
        "  // 请只修改这条注释以下的代码",
        "  switch(val) {",
        "    case \"alpha\": ",
        "      result = \"Adams\";",
        "      break;",
        "    case \"bravo\": ",
        "      result = \"Boston\";",
        "      break;",
        "    case \"charlie\": ",
        "      result = \"Chicago\";",
        "      break;",
        "    case \"delta\": ",
        "      result = \"Denver\";",
        "      break;",
        "    case \"echo\": ",
        "      result = \"Easy\";",
        "      break;",
        "    case \"foxtrot\": ",
        "      result = \"Frank\";",
        "  }",
        "",
        "  // 请只修改这条注释以上的代码",
        "  return result;",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "phoneticLookup(\"charlie\");"
      ],
      "solutions": [
        "function phoneticLookup(val) {\n  var result = \"\";\n\n  var lookup = {\n    alpha: \"Adams\",\n    bravo: \"Boston\",\n    charlie: \"Chicago\",\n    delta: \"Denver\",\n    echo: \"Easy\",\n    foxtrot: \"Frank\"\n  };\n\n  result = lookup[val];\n\n  return result;\n}"
      ],
      "tests": [
        "assert(phoneticLookup(\"alpha\") === 'Adams', 'message: <code>phoneticLookup(\"alpha\")</code> 应该等于 <code>\"Adams\"</code>');",
        "assert(phoneticLookup(\"bravo\") === 'Boston', 'message: <code>phoneticLookup(\"bravo\")</code> 应该等于 <code>\"Boston\"</code>');",
        "assert(phoneticLookup(\"charlie\") === 'Chicago', 'message: <code>phoneticLookup(\"charlie\")</code> 应该等于 <code>\"Chicago\"</code>');",
        "assert(phoneticLookup(\"delta\") === 'Denver', 'message: <code>phoneticLookup(\"delta\")</code> 应该等于 <code>\"Denver\"</code>');",
        "assert(phoneticLookup(\"echo\") === 'Easy', 'message: <code>phoneticLookup(\"echo\")</code> 应该等于 <code>\"Easy\"</code>');",
        "assert(phoneticLookup(\"foxtrot\") === 'Frank', 'message: <code>phoneticLookup(\"foxtrot\")</code> 应该等于 <code>\"Frank\"</code>');",
        "assert(typeof phoneticLookup(\"\") === 'undefined', 'message: <code>phoneticLookup(\"\")</code> 应该等于 <code>undefined</code>');",
        "assert(!/case|switch|if/g.test(code), 'message: 不能使用 <code>case</code>, <code>switch</code>, 或 <code>if</code> 语句'); "
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "567af2437cbaa8c51670a16c",
      "title": "Testing Objects for Properties",
      "description": [
        "有时检查一个对象属性是否存在是非常有用的，我们可以用<code>.hasOwnProperty(propname)</code>方法来检查对象是否有该属性。如果有返回<code>true</code>，反之返回 <code>false</code>。",
        "<strong>举例</strong>",
        "<blockquote>var myObj = {<br>  top: \"hat\",<br>  bottom: \"pants\"<br>};<br>myObj.hasOwnProperty(\"top\");    // true<br>myObj.hasOwnProperty(\"middle\"); // false</blockquote>",
        "<h4>任务</h4>",
        "修改函数<code>checkObj</code>检查<code>myObj</code>是否有<code>checkProp</code>属性，如果属性存在，返回属性对应的值，如果不存在，返回 <code>\"Not Found\"</code>。",
        "注意：如果你需要通过变量来访问对象的属性值，请用中括号操作符，点操作符不支持变量。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 初始化变量",
        "var myObj = {",
        "  gift: \"pony\",",
        "  pet: \"kitten\",",
        "  bed: \"sleigh\"",
        "};",
        "",
        "function checkObj(checkProp) {",
        "  // 请把你的代码写在这条注释以下",
        "  ",
        "  return \"修改这里\";",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "checkObj(\"gift\");"
      ],
      "tail": [
        ""
      ],
      "solutions": [
        "var myObj = {\n  gift: \"pony\",\n  pet: \"kitten\",\n  bed: \"sleigh\"\n};\nfunction checkObj(checkProp) {\n  if(myObj.hasOwnProperty(checkProp)) {\n    return myObj[checkProp];\n  } else {\n    return \"Not Found\";\n  }\n}"
      ],
      "tests": [
        "assert(checkObj(\"gift\") === \"pony\", 'message: <code>checkObj(\"gift\")</code> 应该返回 <code>\"pony\"</code>.');",
        "assert(checkObj(\"pet\") === \"kitten\", 'message: <code>checkObj(\"pet\")</code> 应该返回  <code>\"kitten\"</code>.');",
        "assert(checkObj(\"house\") === \"Not Found\", 'message: <code>checkObj(\"house\")</code> 应该返回 <code>\"Not Found\"</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244cb",
      "title": "Introducing JavaScript Object Notation (JSON)",
      "description": [
        "JavaScript Object Notation 简称 <code>JSON</code>，它使用JavaScript对象的格式来存储数据。JSON是灵活的，因为它允许 <dfn>数据结构</dfn> 是 <dfn>字符串</dfn>，<dfn>数字</dfn>，<dfn>布尔值</dfn>，<dfn>字符串</dfn>，和 <dfn>对象</dfn> 的任意组合。",
        "这里是一个JSON对象的示例：",
        "<blockquote>var ourMusic = [<br>  {<br>    \"artist\": \"Daft Punk\",<br>    \"title\": \"Homework\",<br>    \"release_year\": 1997,<br>    \"formats\": [ <br>      \"CD\", <br>      \"Cassette\", <br>      \"LP\" ],<br>    \"gold\": true<br>  }<br>];</blockquote>",
        "这是一个对象数组，并且对象有各种关于专辑的 <dfn>详细信息</dfn>。它也有一个嵌套的 <code>formats</code> 的数组。附加专辑记录可以被添加到数组的最上层。",
        "<strong>提示</strong><br>数组中有多个 JSON 对象的时候，对象与对象之间要用逗号隔开。",
        "<h4>任务</h4>",
        "添加一个新专辑到 <code>myMusic</code> 的JSON对象。添加 <code>artist</code> 和 <code>title</code> 字符串，<code>release_year</code> 数字和 <code>formats</code> 字符串数组。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myMusic = [",
        "  {",
        "    \"artist\": \"Billy Joel\",",
        "    \"title\": \"Piano Man\",",
        "    \"release_year\": 1973,",
        "    \"formats\": [ ",
        "      \"CS\", ",
        "      \"8T\", ",
        "      \"LP\" ],",
        "    \"gold\": true",
        "  }",
        "  // 请在这里添加专辑",
        "];",
        ""
      ],
      "tail": [
        "(function(x){ if (Array.isArray(x)) { return JSON.stringify(x); } return \"myMusic is not an array\"})(myMusic);"
      ],
      "solutions": [
        "var myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [ \n      \"CS\", \n      \"8T\", \n      \"LP\" ],\n    \"gold\": true\n  }, \n  {\n    \"artist\": \"ABBA\",\n    \"title\": \"Ring Ring\",\n    \"release_year\": 1973,\n    \"formats\": [ \n      \"CS\", \n      \"8T\", \n      \"LP\",\n    \"CD\",\n  ]\n  }\n];"
      ],
      "tests": [
        "assert(Array.isArray(myMusic), 'message: <code>myMusic</code> 应该是一个数组');",
        "assert(myMusic.length > 1, 'message: <code>myMusic</code> 应该至少包含两个元素');",
        "assert(typeof myMusic[1] === 'object', 'message: <code>myMusic[1]</code> 应该是一个对象');",
        "assert(Object.keys(myMusic[1]).length > 3, 'message: <code>myMusic[1]</code> 至少要包含四个属性');",
        "assert(myMusic[1].hasOwnProperty('artist') && typeof myMusic[1].artist === 'string', 'message: <code>myMusic[1]</code> 应该包含一个类型为字符串的 <code>artist</code> 属性');",
        "assert(myMusic[1].hasOwnProperty('title') && typeof myMusic[1].title === 'string', 'message: <code>myMusic[1]</code> 应该包含一个类型为字符串的 <code>title</code> 属性');",
        "assert(myMusic[1].hasOwnProperty('release_year') && typeof myMusic[1].release_year === 'number', 'message: <code>myMusic[1]</code> 应该包含一个类型为数字的 <code>release_year</code> 属性');",
        "assert(myMusic[1].hasOwnProperty('formats') && Array.isArray(myMusic[1].formats), 'message: <code>myMusic[1]</code> 应该包含一个类型为数组的 <code>formats</code> 属性');",
        "assert(myMusic[1].formats.every(function(item) { return (typeof item === \"string\")}) && myMusic[1].formats.length > 1, 'message: <code>formats</code> 应该是一个至少包含两个字符串元素的数组');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244cc",
      "title": "Accessing Nested Objects in JSON",
      "description": [
        "通过串联起来的点操作符或中括号操作符来访问JSON对象的嵌套属性。",
        "下面是一个嵌套的JSON对象：",
        "<blockquote>var ourStorage = {<br>  \"desk\": {<br>    \"drawer\": \"stapler\"<br>  },<br>  \"cabinet\": {<br>    \"top drawer\": { <br>      \"folder1\": \"a file\",<br>      \"folder2\": \"secrets\"<br>    },<br>    \"bottom drawer\": \"soda\"<br>  }<br>}<br>ourStorage.cabinet[\"top drawer\"].folder2;  // \"secrets\"<br>ourStorage.desk.drawer; // \"stapler\"</blockquote>",
        "<h4>任务</h4>",
        "检索JSON对象 <code>myStorage</code> 中嵌套属性 <code>glove box</code> 的值。因为属性的名字带有空格，请使用中括号操作符来访问属性的值。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 初始化变量",
        "var myStorage = {",
        "  \"car\": {",
        "    \"inside\": {",
        "      \"glove box\": \"maps\",",
        "      \"passenger seat\": \"crumbs\"",
        "     },",
        "    \"outside\": {",
        "      \"trunk\": \"jack\"",
        "    }",
        "  }",
        "};",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var gloveBoxContents = \"\"; // 请修改这一行",
        ""
      ],
      "tail": [
        "(function(x) { ",
        "  if(typeof x != 'undefined') { ",
        "    return \"gloveBoxContents = \" + x;",
        "  }",
        "  return \"gloveBoxContents is undefined\";",
        "})(gloveBoxContents);"
      ],
      "solutions": [
        "var myStorage = {  \n  \"car\":{  \n    \"inside\":{  \n      \"glove box\":\"maps\",\n      \"passenger seat\":\"crumbs\"\n    },\n    \"outside\":{  \n      \"trunk\":\"jack\"\n    }\n  }\n};\nvar gloveBoxContents = myStorage.car.inside[\"glove box\"];"
      ],
      "tests": [
        "assert(gloveBoxContents === \"maps\", 'message: <code>gloveBoxContents</code> 应该等于 \"maps\"');",
        "assert(/=\\s*myStorage\\.car\\.inside\\[(\"|')glove box\\1\\]/g.test(code), 'message: 使用点和方括号访问 <code>myStorage</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244cd",
      "title": "Accessing Nested Arrays in JSON",
      "description": [
        "正如我们在前面的例子所见，JSON对象可以嵌套对象和数组。与访问嵌套对象一样，用中括号操作符同样可以访问嵌套数组。",
        "下面是如何访问嵌套数组的例子：",
        "<blockquote>var ourPets = { <br>  \"cats\": [<br>    \"Meowzer\",<br>    \"Fluffy\",<br>    \"Kit-Cat\"<br>  ],<br>  \"dogs\": [<br>    \"Spot\",<br>    \"Bowser\",<br>    \"Frankie\"<br>  ]<br>};<br>ourPets.cats[1]; // \"Fluffy\"<br>ourPets.dogs[0]; // \"Spot\"</blockquote>",
        "<h4>任务</h4>",
        "使用点操作符和中括号操作符来检索变量 <code>myPlants</code> 的第二棵树。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 初始化变量",
        "var myPlants = [",
        "  { ",
        "    type: \"flowers\",",
        "    list: [",
        "      \"rose\",",
        "      \"tulip\",",
        "      \"dandelion\"",
        "    ]",
        "  },",
        "  {",
        "    type: \"trees\",",
        "    list: [",
        "      \"fir\",",
        "      \"pine\",",
        "      \"birch\"",
        "    ]",
        "  }  ",
        "];",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var secondTree = \"\"; // 请修改这一行",
        ""
      ],
      "tail": [
        "(function(x) { ",
        "  if(typeof x != 'undefined') { ",
        "    return \"secondTree = \" + x;",
        "  }",
        "  return \"secondTree is undefined\";",
        "})(secondTree);"
      ],
      "solutions": [
        "var myPlants = [\n  { \n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }  \n];\n\n// Only change code below this line\n\nvar secondTree = myPlants[1].list[1];"
      ],
      "tests": [
        "assert(secondTree === \"pine\", 'message: <code>secondTree</code> 应该等于 \"pine\"');",
        "assert(/=\\s*myPlants\\[1\\].list\\[1\\]/.test(code), 'message: 使用点和方括号访问 <code>myPlants</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb5bdef",
      "title": "Iterate with JavaScript For Loops",
      "description": [
        "一个条件语句只能执行一次代码，而一个循环语句可以多次执行代码。",
        "JavaScript 中最常见的循环就是“<code>for循环</code>”。",
        "for循环中的三个表达式用分号隔开：",
        "<code>for ([初始化]; [条件判断]; [计数器])</code>",
        "<code>初始化</code>语句只会在执行循环开始之前执行一次。它通常用于定义和设置你的循环变量。",
        "<code>条件判断</code>语句会在每一轮循环的开始执行，只要条件判断为 <code>true</code> 就会继续执行循环。当条件为 <code>false</code>的时候，循环将停止执行。这意味着，如果条件在一开始就为 <code>false</code>，这个循环将不会执行。",
        "<code>计数器</code>是在每一轮循环结束时执行，通常用于递增或递减。",
        "在下面的例子中，先初始化<code>i = 0</code>，条件 <code>i < 5</code> 为真，进入第一次循环，执行大括号里的代码，第一次循环结束。递增<code>i</code>的值，条件判断，就这样依次执行下去，直到条件判断为假，整个循环结束。",
        "<blockquote>var ourArray = [];<br>for (var i = 0; i < 5; i++) {<br>  ourArray.push(i);<br>}</blockquote>",
        "最终 <code>ourArray</code> 的值为 <code>[0,1,2,3,4]</code>.",
        "<h4>任务</h4>",
        "使用 <code>for</code> 循环把从 1 到 5 添加进 <code>myArray</code> 中。",
        "for循环就是if条件语句的进化版。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourArray = [];",
        "",
        "for (var i = 0; i < 5; i++) {",
        "  ourArray.push(i);",
        "}",
        "",
        "// 初始化变量",
        "var myArray = [];",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "if (typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
      ],
      "solutions": [
        "var ourArray = [];\nfor (var i = 0; i < 5; i++) {\n  ourArray.push(i);\n}\nvar myArray = [];\nfor (var i = 1; i < 6; i++) {\n  myArray.push(i);\n}"
      ],
      "tests": [
        "assert(code.match(/for\\s*\\(/g).length > 1, 'message: 你应该使用 <code>for</code> 循环');",
        "assert.deepEqual(myArray, [1,2,3,4,5], 'message: <code>myArray</code> 应该等于 <code>[1,2,3,4,5]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56104e9e514f539506016a5c",
      "title": "Iterate Odd Numbers With a For Loop",
      "description": [
        "for循环可以按照我们指定的顺序来迭代，通过更改我们的 <code>计数器</code>，我们可以按照偶数顺序来迭代。",
        "初始化 <code>i = 0</code>，当 <code>i < 10</code> 的时候继续循环。",
        "<code>i += 2</code> 让 <code>i</code> 每次循环之后增加2。",
        "<blockquote>var ourArray = [];<br>for (var i = 0; i < 10; i += 2) {<br>  ourArray.push(i);<br>}</blockquote>",
        "循环结束后，<code>ourArray</code> 的值为 <code>[0,2,4,6,8]</code>。",
        "改变 <code>计数器</code>，这样我们可以用奇数来数。",
        "<h4>任务</h4>",
        "写一个 <code>for</code> 循环，把从1到9的奇数添加到 <code>myArray</code>。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourArray = [];",
        "",
        "for (var i = 0; i < 10; i += 2) {",
        "  ourArray.push(i);",
        "}",
        "",
        "// 初始化变量",
        "var myArray = [];",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
      ],
      "solutions": [
        "var ourArray = [];\nfor (var i = 0; i < 10; i += 2) {\n  ourArray.push(i);\n}\nvar myArray = [];\nfor (var i = 1; i < 10; i += 2) {\n  myArray.push(i);\n}"
      ],
      "tests": [
        "assert(code.match(/for\\s*\\(/g).length > 1, 'message: 你应该使用 <code>for</code> 循环');",
        "assert.deepEqual(myArray, [1,3,5,7,9], 'message: <code>myArray</code> 应该等于 <code>[1,3,5,7,9]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56105e7b514f539506016a5e",
      "title": "Count Backwards With a For Loop",
      "description": [
        "for循环也可以逆向迭代，只要我们定义好合适的条件。",
        "为了能够从后往前两两倒数，我们需要改变我们的 <code>初始化</code>，<code>条件判断</code> 和 <code>计数器</code>。",
        "我们让 <code>i = 10</code>，并且当 <code>i > 0</code> 的时候才继续循环。我们使用 <code>i-=2</code> 来让 <code>i</code> 每次循环递减 2。",
        "<blockquote>var ourArray = [];<br>for (var i=10; i > 0; i-=2) {<br>  ourArray.push(i);<br>}</blockquote>",
        "循环结束后，<code>ourArray</code> 的值为 <code>[10,8,6,4,2]</code>。",
        "让我们改变 <code>初始化</code> 和 <code>计数器</code>，这样我们就可以按照奇数从后往前两两倒着数。",
        "<h4>任务</h4>",
        "使用一个 <code>for</code> 循环，把9到1的奇数添加进 <code>myArray</code>。"
      ],
      "challengeSeed": [
        "// 举例",
        "var ourArray = [];",
        "",
        "for (var i = 10; i > 0; i -= 2) {",
        "  ourArray.push(i);",
        "}",
        "",
        "// 初始化变量",
        "var myArray = [];",
        "",
        "// 请把你的代码写在这条注释以下",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
      ],
      "solutions": [
        "var ourArray = [];\nfor (var i = 10; i > 0; i -= 2) {\n  ourArray.push(i);\n}\nvar myArray = [];\nfor (var i = 9; i > 0; i -= 2) {\n  myArray.push(i);\n}"
      ],
      "tests": [
        "assert(code.match(/for\\s*\\(/g).length > 1, 'message: 你应该使用 <code>for</code> 循环');",
        "assert.deepEqual(myArray, [9,7,5,3,1], 'message: <code>myArray</code> 应该等于 <code>[9,7,5,3,1]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "5675e877dbd60be8ad28edc6",
      "title": "Iterate Through an Array with a For Loop",
      "description": [
        "迭代输出一个数组的每个元素是 JavaScript 中的常见需求， <code>for</code> 循环可以做到这一点。",
        "下面的代码将输出数组  <code>arr</code> 的每个元素到控制台：",
        "<blockquote>var arr = [10,9,8,7,6];<br>for (var i=0; i < arr.length; i++) {<br>   console.log(arr[i]);<br>}</blockquote>",
        "记住数组的索引从零开始的，这意味着数组的最后一个元素的下标是：数组的长度 - 1。我们这个循环的 <dfn>条件</dfn> 是 <code>i < arr.length</code>，当 <code>i</code> 的值为 长度-1 的时候循环就停止了。",
        "<h4>任务</h4>",
        "声明并初始化一个变量 <code>total</code> 为 <code>0</code>。使用 <code>for</code> 循环，使得 <code>total</code> 的值为 <code>myArr</code> 的数组中的每个元素的值的总和。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// 举例",
        "var ourArr = [ 9, 10, 11, 12];",
        "var ourTotal = 0;",
        "",
        "for (var i = 0; i < ourArr.length; i++) {",
        "  ourTotal += ourArr[i];",
        "}",
        "",
        "// 初始化变量",
        "var myArr = [ 2, 3, 4, 5, 6];",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "(function(){if(typeof total !== 'undefined') { return \"total = \" + total; } else { return \"total is undefined\";}})()"
      ],
      "solutions": [
        "var ourArr = [ 9, 10, 11, 12];\nvar ourTotal = 0;\n\nfor (var i = 0; i < ourArr.length; i++) {\n  ourTotal += ourArr[i];\n}\n\nvar myArr = [ 2, 3, 4, 5, 6];\nvar total = 0;\n\nfor (var i = 0; i < myArr.length; i++) {\n  total += myArr[i];\n}"
      ],
      "tests": [
        "assert(code.match(/var\\s*total\\s*=\\s*0\\s*;/), 'message: <code>total</code> 应该被声明, 并且初始化值为 0');",
        "assert(total === 20, 'message: <code>total</code> 应该等于 20');",
        "assert(code.match(/for\\s*\\(/g).length > 1 && code.match(/myArr\\s*\\[/), 'message: 你应该使用 <code>for</code> 循环在 <code>myArr</code> 中遍历');",
        "assert(!code.match(/total[\\s\\+\\-]*=\\s*(\\d(?!\\s*;)|[1-9])/g), 'message: 不能直接把 <code>total</code> 设置成 20');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244e1",
      "title": "Nesting For Loops",
      "description": [
        "如果你有一个二维数组，可以使用相同的逻辑，先遍历外面的数组，再遍历里面的子数组。下面是一个例子：",
        "<blockquote>var arr = [<br>  [1,2], [3,4], [5,6]<br>];<br>for (var i=0; i &lt; arr.length; i++) {<br>  for (var j=0; j &lt; arr[i].length; j++) {<br>    console.log(arr[i][j]);<br>  }<br>}</blockquote>",
        "一次输出 <code>arr</code> 中的每个子元素。提示，对于内部循环，我们可以通过 <code>arr[i]</code> 的 <code>.length</code> 来获得子数组的长度，因为 <code>arr[i]</code> 的本身就是一个数组。",
        "<h4>任务</h4>",
        "修改函数 <code>multiplyAll</code>，获得 <code>arr</code> 内部数组的每个数字相乘的结果 <code>product</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function multiplyAll(arr) {",
        "  var product = 1;",
        "  // 请把你的代码写在这条注释以下",
        "  ",
        "  // 请把你的代码写在这条注释以上",
        "  return product;",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "multiplyAll([[1,2],[3,4],[5,6,7]]);",
        ""
      ],
      "tail": [
        ""
      ],
      "solutions": [
        "function multiplyAll(arr) {\n  var product = 1;\n  for (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      product *= arr[i][j];\n    }\n  }\n  return product;\n}\n\nmultiplyAll([[1,2],[3,4],[5,6,7]]);"
      ],
      "tests": [
        "assert(multiplyAll([[1],[2],[3]]) === 6, 'message: <code>multiplyAll([[1],[2],[3]]);</code> 应该返回 <code>6</code>');",
        "assert(multiplyAll([[1,2],[3,4],[5,6,7]]) === 5040, 'message: <code>multiplyAll([[1,2],[3,4],[5,6,7]])</code> 应该返回 <code>5040</code>');",
        "assert(multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]]) === 54, 'message: <code>multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]]);)</code> 应该返回 <code>54</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb1bdef",
      "title": "Iterate with JavaScript While Loops",
      "description": [
        "另一种类型的 JavaScript 循环被称为<code>while循环</code>，因为它规定，当（while）条件为真，循环才会执行，反之不执行。",
        "<blockquote>var ourArray = [];<br>var i = 0;<br>while(i < 5) {<br>  ourArray.push(i);<br>  i++;<br>}</blockquote>",
        "<h4>任务</h4>",
        "通过一个 <code>while</code> 循环，把从 0 到 4 的值添加到 <code>myArray</code> 中。"
      ],
      "challengeSeed": [
        "// 初始化变量",
        "var myArray = [];",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
      ],
      "solutions": [
        "var myArray = [];\nvar i = 0;\nwhile(i < 5) {\n  myArray.push(i);\n  i++;\n}"
      ],
      "tests": [
        "assert(code.match(/while/g), 'message: 你应该使用 <code>while</code> 循环');",
        "assert.deepEqual(myArray, [0,1,2,3,4], 'message: <code>myArray</code> 应该等于 <code>[0,1,2,3,4]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "5688e62ea601b2482ff8422b",
      "title": "Profile Lookup",
      "description": [
        "我们有一个对象数组，里面存储着通讯录。",
        "函数 <code>lookUp</code> 有两个预定义参数：<code>firstName</code>值和<code>prop</code>属性 。",
        "函数将会检查通讯录中是否存在一个与传入的 <code>firstName</code> 相同的联系人。如果存在，那么还需要检查对应的联系人中是否存在 <code>prop</code>属性。",
        "如果它们都存在，函数返回<code>prop</code>属性对应的值。",
        "如果<code>firstName</code> 值不存在，返回 <code>\"No such contact\"</code>。",
        "如果<code>prop</code> 属性不存在，返回 <code>\"No such property\"</code>。",
        ""
      ],
      "releasedOn": "January 8, 2016",
      "challengeSeed": [
        "//初始化变量",
        "var contacts = [",
        "    {",
        "        \"firstName\": \"Akira\",",
        "        \"lastName\": \"Laine\",",
        "        \"number\": \"0543236543\",",
        "        \"likes\": [\"Pizza\", \"Coding\", \"Brownie Points\"]",
        "    },",
        "    {",
        "        \"firstName\": \"Harry\",",
        "        \"lastName\": \"Potter\",",
        "        \"number\": \"0994372684\",",
        "        \"likes\": [\"Hogwarts\", \"Magic\", \"Hagrid\"]",
        "    },",
        "    {",
        "        \"firstName\": \"Sherlock\",",
        "        \"lastName\": \"Holmes\",",
        "        \"number\": \"0487345643\",",
        "        \"likes\": [\"Intriguing Cases\", \"Violin\"]",
        "    },",
        "    {",
        "        \"firstName\": \"Kristian\",",
        "        \"lastName\": \"Vos\",",
        "        \"number\": \"unknown\",",
        "        \"likes\": [\"Javascript\", \"Gaming\", \"Foxes\"]",
        "    }",
        "];",
        "",
        "",
        "function lookUp(firstName, prop){",
        "// 请把你的代码写在这条注释以下",
        "",
        "// 请把你的代码写在这条注释以上",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "lookUp(\"Akira\", \"likes\");"
      ],
      "solutions": [
        "var contacts = [\n    {\n        \"firstName\": \"Akira\",\n        \"lastName\": \"Laine\",\n        \"number\": \"0543236543\",\n        \"likes\": [\"Pizza\", \"Coding\", \"Brownie Points\"]\n    },\n    {\n        \"firstName\": \"Harry\",\n        \"lastName\": \"Potter\",\n        \"number\": \"0994372684\",\n        \"likes\": [\"Hogwarts\", \"Magic\", \"Hagrid\"]\n    },\n    {\n        \"firstName\": \"Sherlock\",\n        \"lastName\": \"Holmes\",\n        \"number\": \"0487345643\",\n        \"likes\": [\"Intriguing Cases\", \"Violin\"]\n    },\n    {\n        \"firstName\": \"Kristian\",\n        \"lastName\": \"Vos\",\n        \"number\": \"unknown\",\n        \"likes\": [\"Javascript\", \"Gaming\", \"Foxes\"]\n    },\n];\n\n\n//Write your function in between these comments\nfunction lookUp(name, prop){\n    for(var i in contacts){\n      if(contacts[i].firstName === name) {\n        return contacts[i][prop] || \"No such property\";\n      }\n    }\n   return \"No such contact\";\n}\n//Write your function in between these comments\n\nlookUp(\"Akira\", \"likes\");"
      ],
      "tests": [
        "assert(lookUp('Kristian','lastName') === \"Vos\", 'message: <code>\"Kristian\", \"lastName\"</code> 应该返回 <code>\"Vos\"</code>');",
        "assert.deepEqual(lookUp(\"Sherlock\", \"likes\"), [\"Intriguing Cases\", \"Violin\"], 'message: <code>\"Sherlock\", \"likes\"</code> 应该返回 <code>[\"Intriguing Cases\", \"Violin\"]</code>');",
        "assert(typeof lookUp(\"Harry\", \"likes\") === \"object\", 'message: <code>\"Harry\",\"likes\"</code> 应该返回一个数组');",
        "assert(lookUp(\"Bob\", \"number\") === \"No such contact\", 'message: <code>\"Bob\", \"number\"</code> 应该返回 \"No such contact\"');",
        "assert(lookUp(\"Akira\", \"address\") === \"No such property\", 'message: <code>\"Akira\", \"address\"</code> 应该返回 \"No such property\"');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb9bdef",
      "title": "Generate Random Fractions with JavaScript",
      "description": [
        "计算机的行为只有两种：确定性和随机性。当你一步步地闯关来到这里就是确定行为，当你随意点了个链接就来到这里就是随机行为。",
        "而随机数最适合用来创建这种随机行为。",
        "<code>Math.random()</code>用来生成一个在0(包括0)到1(不包括1)之间的随机小数，因此<code>Math.random()</code>可能返回0但绝不会返回1。",
        "<strong>提示</strong><br>随后的函数都会在<code>return</code>执行前调用，所以我们可以直接返回<code>Math.random()</code>的值。",
        "<h4>任务</h4>",
        "更改<code>myFunction</code> 来生成一个随机数取代 <code>0</code>。"
      ],
      "challengeSeed": [
        "function myFunction() {",
        "",
        "  // 请把你的代码写在这条注释以下",
        "",
        "  return 0;",
        "",
        "  // 请把你的代码写在这条注释以上",
        "}"
      ],
      "tail": [
        "(function(){return myFunction();})();"
      ],
      "solutions": [
        "function myFunction() {\n  return Math.random();\n}"
      ],
      "tests": [
        "assert(typeof myFunction() === \"number\", 'message: <code>myFunction</code> 应该返回一个随机数');",
        "assert((myFunction()+''). match(/\\./g), 'message: <code>myFunction</code> 应该返回一个小数');",
        "assert(code.match(/Math\\.random/g).length >= 0, 'message: 需要使用 <code>Math.random</code> 生成随机的小数');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb1bdef",
      "title": "Generate Random Whole Numbers with JavaScript",
      "description": [
        "生成随机小数很棒，但随机数更有用的地方在于生成随机整数。",
        "<ol><li>用 <code>Math.random()</code> 生成一个随机小数。</li><li>把这个随机小数乘以 <code>20</code>。</li><li>用 <code>Math.floor()</code> 向下取整 获得它最近的整数。</li></ol>",
        "记住 <code>Math.random()</code> 永远不会返回 <code>1</code>。同时因为我们是在用 <code>Math.floor()</code> 向下取整，所以最终我们获得的结果不可能有 <code>20</code>。这确保了我们获得了一个在0到19之间的整数。",
        "把操作连缀起来，代码类似于下面：",
        "<code>Math.floor(Math.random() * 20);</code>",
        "我们先调用 <code>Math.random()</code>，把它的结果乘以20，然后把上一步的结果传给 <code>Math.floor()</code>，最终通过向下取整获得最近的整数。",
        "<h4>任务</h4>",
        "生成一个 <code>0</code> 到 <code>9</code>之间的随机整数。"
      ],
      "challengeSeed": [
        "var randomNumberBetween0and19 = Math.floor(Math.random() * 20);",
        "",
        "function myFunction() {",
        "",
        "  // 请把你的代码写在这条注释以下",
        "",
        "  return Math.random();",
        "}"
      ],
      "tail": [
        "(function(){return myFunction();})();"
      ],
      "solutions": [
        "var randomNumberBetween0and19 = Math.floor(Math.random() * 20);\n\nfunction myFunction() {\n  return Math.floor(Math.random() * 10);\n}"
      ],
      "tests": [
        "assert(typeof myFunction() === \"number\" && (function(){var r = myFunction();return Math.floor(r) === r;})(), 'message: <code>myFunction</code> 的结果应该是一个整数');",
        "assert(code.match(/Math.random/g).length > 1, 'message: 需要使用 <code>Math.random</code> 生成随机数字');",
        "assert(code.match(/\\(\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?\\*\\s*?10\\s*?\\)/g) || code.match(/\\(\\s*?10\\s*?\\*\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?\\)/g), 'message: 你应该将 <code>Math.random</code> 的结果乘以 10 来生成 0 到 9 之间的随机数');",
        "assert(code.match(/Math.floor/g).length > 1, 'message: 你需要使用 <code>Math.floor</code> 移除数字中的小数部分');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb2bdef",
      "title": "Generate Random Whole Numbers within a Range",
      "description": [
        "我们之前生成的随机数是在0到某个数之间，现在我们要生成的随机数是在两个指定的数之间。",
        "我们需要定义一个最小值和一个最大值。",
        "下面是我们将要使用的方法，仔细看看并尝试理解这行代码到底在干嘛：",
        "<code>Math.floor(Math.random() * (max - min + 1)) + min</code>",
        "<h4>任务</h4>",
        "创建一个叫<code>randomRange</code>的函数，参数为myMin和myMax，返回一个在<code>myMin</code>(包括myMin)和<code>myMax</code>(包括myMax)之间的随机数。"
      ],
      "challengeSeed": [
        "// 举例",
        "function ourFunction(ourMin, ourMax) {",
        "",
        "  return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;",
        "}",
        "",
        "ourFunction(1, 9);",
        "",
        "// 请把你的代码写在这条注释以下",
        "",
        "function randomRange(myMin, myMax) {",
        "",
        "  return 0; // 请修改这一行",
        "",
        "}",
        "",
        "// 你可以修改这一行来测试你的代码",
        "var myRandom = randomRange(5, 15);"
      ],
      "tail": [
        "var calcMin = 100;",
        "var calcMax = -100;",
        "for(var i = 0; i < 100; i++) {",
        "  var result = randomRange(5,15);",
        "  calcMin = Math.min(calcMin, result);",
        "  calcMax = Math.max(calcMax, result);",
        "}",
        "(function(){",
        "  if(typeof myRandom === 'number') {",
        "    return \"myRandom = \" + myRandom;",
        "  } else {",
        "    return \"myRandom undefined\";",
        "  }",
        "})();"
      ],
      "solutions": [
        "function randomRange(myMin, myMax) {\n  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;\n}"
      ],
      "tests": [
        "assert(calcMin === 5, 'message: <code>randomRange</code> 返回的随机数应该大于或等于 <code>myMin</code>.');",
        "assert(calcMax === 15, 'message: <code>randomRange</code> 返回的随机数应该小于或等于 <code>myMax</code>.');",
        "assert(randomRange(0,1) % 1 === 0 , 'message: <code>randomRange</code> 应该返回一个随机整数, 而不是小数');",
        "assert((function(){if(code.match(/myMax/g).length > 1 && code.match(/myMin/g).length > 2 && code.match(/Math.floor/g) && code.match(/Math.random/g)){return true;}else{return false;}})(), 'message: <code>randomRange</code> 应该使用 <code>myMax</code> 和 <code>myMin</code>, 并且返回两者之间的随机数');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb6bdef",
      "title": "Sift through Text with Regular Expressions",
      "description": [
        "<code>Regular expressions</code> 正则表达式被用来根据某种匹配模式来寻找<code>strings</code>中的某些单词。",
        "举例：如果我们想要找到字符串<code>The dog chased the cat</code>中单词 <code>the</code>，我们可以使用下面的正则表达式: <code>/the/gi</code>",
        "我们可以把这个正则表达式分成几段：",
        "<code>/</code> 是这个正则表达式的头部",
        "<code>the</code> 是我们想要匹配的模式",
        "<code>/</code> 是这个正则表达式的尾部",
        "<code>g</code> 代表着 <code>global</code>(全局)，意味着返回所有的匹配而不仅仅是第一个。",
        "<code>i</code> 代表着忽略大小写，意思是当我们寻找匹配的字符串的时候忽略掉字母的大小写。",
        "<h4>任务</h4>",
        "用全局、忽略大小写的模式选取字符串 <code>testString</code>中所有的单词 <code>and</code>。",
        "你可以尝试把 <code>.</code> 替换成 <code>and</code>。"
      ],
      "head": [
        ""
      ],
      "challengeSeed": [
        "// 初始化变量",
        "var testString = \"Ada Lovelace and Charles Babbage designed the first computer and the software that would have run on it.\";",
        "",
        "// 举例",
        "var expressionToGetSoftware = /software/gi;",
        "var softwareCount = testString.match(expressionToGetSoftware).length;",
        "  ",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var expression = /./gi;  // 请修改这一行",
        "",
        "// 请只修改这条注释以上的代码",
        "",
        "// 用 andCount 存储 testString 中匹配到 expression 的次数",
        "var andCount = testString.match(expression).length;",
        ""
      ],
      "tail": [
        "(function(){return andCount;})();"
      ],
      "solutions": [
        "var testString = \"Ada Lovelace and Charles Babbage designed the first computer and the software that would have run on it.\";\nvar expression = /and/gi;  // Change this Line\nvar andCount = testString.match(expression).length;"
      ],
      "tests": [
        "assert(andCount==2, 'message: 你的正则表达式应该找到两个 <code>and</code>');",
        "assert(code.match(/\\/and\\/gi/), 'message: 使用正则表达式在 <code>testString</code> 中找到单词 <code>and</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb7bdef",
      "title": "Find Numbers with Regular Expressions",
      "description": [
        "我们可以在正则表达式中使用特殊选择器来选取特殊类型的值。",
        "特殊选择器中的一种就是数字选择器<code>\\d</code>，意思是被用来获取一个字符串的数字。",
        "在JavaScript中, 数字选择器类似于: <code>/\\d/g</code>。",
        "在选择器后面添加一个加号标记(<code>+</code>)，例如：<code>/\\d+/g</code>，它允许这个正则表达式匹配一个或更多数字。",
        "尾部的<code>g</code>是'global'的简写，意思是允许这个正则表达式 找到所有的匹配而不是仅仅找到第一个匹配。",
        "<h4>任务</h4>",
        "用 <code>\\d</code> 选择器来选取字符串中的所有数字。"
      ],
      "head": [
        ""
      ],
      "challengeSeed": [
        "// 初始化变量",
        "var testString = \"There are 3 cats but 4 dogs.\";",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var expression = /.+/g;  // 请修改这一行",
        "",
        "// 请只修改这条注释以上的代码",
        "",
        "// 用 digitCount 存储 testString 中匹配到 expression 的次数",
        "var digitCount = testString.match(expression).length;"
      ],
      "tail": [
        "(function(){return digitCount;})();"
      ],
      "solutions": [
        "var testString = \"There are 3 cats but 4 dogs.\";\nvar expression = /\\d+/g;  // Change this line\nvar digitCount = testString.match(expression).length;"
      ],
      "tests": [
        "assert(digitCount === 2, 'message: 你的正则表达式应该在 <code>testString</code> 中找到两个数字');",
        "assert(code.match(/\\/\\\\d\\+\\//g), 'message: 使用 <code>/\\d+/g</code> 正则表达式在 <code>testString</code> 中查找数字');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb8bdef",
      "title": "Find Whitespace with Regular Expressions",
      "description": [
        "我们也可以使用正则表达式选择器 <code>\\s</code> 来选择一个字符串中的空白。",
        "空白字符有 <code>\" \"</code> (空格符)、<code>\\r</code> (回车符)、<code>\\n</code> (换行符)、<code>\\t</code> (制表符) 和 <code>\\f</code> (换页符)。",
        "空白正则表达式类似于：",
        "<code>/\\s+/g</code>",
        "<h4>任务</h4>",
        "用 <code>\\s</code> 选取句子中的所有空白字符。"
      ],
      "head": [
        ""
      ],
      "challengeSeed": [
        "// 初始化变量",
        "var testString = \"How many spaces are there in this sentence?\";",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var expression = /.+/g;  // 请修改这一行",
        "",
        "// 请只修改这条注释以上的代码",
        "",
        "// 用 spaceCount 存储 testString 中匹配到 expression 的次数",
        "var spaceCount = testString.match(expression).length;"
      ],
      "tail": [
        "(function(){return spaceCount;})();"
      ],
      "solutions": [
        "var testString = \"How many spaces are there in this sentence?\";\nvar expression = /\\s+/g;  // Change this line\nvar spaceCount = testString.match(expression).length;"
      ],
      "tests": [
        "assert(spaceCount === 7, 'message: 你的正则表达式应该在 <code>testString</code> 中找到七个空白');",
        "assert(code.match(/\\/\\\\s\\+\\//g), 'message: 使用 <code>/\\s+/g</code> 正则表达式在 <code>testString</code> 查找空白字符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c13feddfaeb3bdef",
      "title": "Invert Regular Expression Matches with JavaScript",
      "description": [
        "你可以用正则表达式选择器的大写版本 来转化任何匹配。",
        "举个例子：<code>\\s</code> 匹配任何空白字符，<code>\\S</code> 匹配任何非空白字符。",
        "<h4>任务</h4>",
        "用 <code>/\\S/g</code> 来匹配字符串<code>testString</code>中的所有非空白字符。"
      ],
      "head": [
        ""
      ],
      "challengeSeed": [
        "// 初始化变量",
        "var testString = \"How many non-space characters are there in this sentence?\";",
        "",
        "// 请只修改这条注释以下的代码",
        "",
        "var expression = /.+/g;  // 请修改这一行",
        "",
        "// 请只修改这条注释以上的代码",
        "",
        "// 用 nonSpaceCount 存储 testString 中匹配到 expression 的次数",
        "var nonSpaceCount = testString.match(expression).length;"
      ],
      "tail": [
        "(function(){return nonSpaceCount;})();"
      ],
      "solutions": [
        "var testString = \"How many non-space characters are there in this sentence?\";\nvar expression = /\\S/g;  \nvar nonSpaceCount = testString.match(expression).length;"
      ],
      "tests": [
        "assert(nonSpaceCount === 49, 'message: 你的正则表达式应该在 <code>testString</code> 中找到 49 个非空白的字符');",
        "assert(code.match(/\\/\\\\S\\/g/g), 'message: 使用 <code>/\\S/g</code> 正则表达式在 <code>testString</code> 中查找非空白字符');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb9bdef",
      "title": "Create a JavaScript Slot Machine",
      "description": [
        "现在把我们之前的所学的知识点结合起来完成一个老虎机游戏。",
        "这次我们生成3个随机数，范围在1到3之间。",
        "分别用 <code>slotOne</code>、<code>slotTwo</code>、<code>slotThree</code>来存储着3个随机数。",
        "用我们之前的所学来生成<a href='generate-random-whole-numbers-within-a-range' target='_blank'>随机数</a>)：",
        "<code>Math.floor(Math.random() * (3 - 1 + 1)) + 1;</code>"
      ],
      "challengeSeed": [
        "fccss",
        "  function runSlots() {",
        "    var slotOne;",
        "    var slotTwo;",
        "    var slotThree;",
        "   ",
        "    var images = [\"//i.imgur.com/9H17QFk.png\", \"//i.imgur.com/9RmpXTy.png\", \"//i.imgur.com/VJnmtt5.png\"];",
        "   ",
        "    // 请把你的代码写在这条注释以下",
        "    ",
        "    ",
        "    ",
        "    // 请把你的代码写在这条注释以上",
        "    ",
        "    ",
        "    if (slotOne !== undefined && slotTwo !== undefined && slotThree !== undefined) {",
        "      $(\".logger\").html(slotOne + \" \" + slotTwo + \" \" + slotThree);",
        "    }",
        "    ",
        "    ",
        "    $(\".logger\").append(\" Not A Win\")",
        "    return [slotOne, slotTwo, slotThree];",
        "  }",
        "",
        "  $(document).ready(function() {",
        "     $(\".go\").click(function() {",
        "       runSlots();",
        "     });",
        "   });",
        "fcces",
        " ",
        "<div>",
        " <div class = \"container inset\">",
        "   <div class = \"header inset\">",
        "     <img src=\"/images/freecodecamp_logo.svg\" alt=\"learn to code JavaScript at Free Code Camp logo\" class=\"img-responsive nav-logo\">",
        "     <h2>FCC Slot Machine</h2>",
        "   </div>",
        "   <div class = \"slots inset\">",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "   </div>",
        "   <br/>",
        "   <div class = \"outset\">",
        "     <button class = \"go inset\">",
        "       Go",
        "     </button>",
        "   </div>",
        "   <br/>",
        "   <div class = \"foot inset\">",
        "     <span class = \"logger\"></span>",
        "   </div>",
        " </div>",
        "</div>",
        "",
        "<style>",
        " .container {",
        "   background-color: #4a2b0f;",
        "   height: 400px;",
        "   width: 260px;",
        "   margin: 50px auto;",
        "   border-radius: 4px;",
        " }",
        " .header {",
        "   border: 2px solid #fff;",
        "   border-radius: 4px;",
        "   height: 55px;",
        "   margin: 14px auto;",
        "   background-color: #457f86",
        " }",
        " .header h2 {",
        "   height: 30px;",
        "   margin: auto;",
        " }",
        " .header h2 {",
        "   font-size: 14px;",
        "   margin: 0 0;",
        "   padding: 0;",
        "   color: #fff;",
        "   text-align: center;",
        " }",
        " .slots{",
        "   display: flex;",
        "   background-color: #457f86;",
        "   border-radius: 6px;",
        "   border: 2px solid #fff;",
        " }",
        " .slot{",
        "   flex: 1 0 auto;",
        "   background: white;",
        "   height: 75px;",
        "   margin: 8px;",
        "   border: 2px solid #215f1e;",
        "   border-radius: 4px;",
        " }",
        " .go {",
        "   width: 100%;",
        "   color: #fff;",
        "   background-color: #457f86;",
        "   border: 2px solid #fff;",
        "   border-radius: 2px;",
        "   box-sizing: none;",
        "   outline: none!important;",
        " }",
        " .foot {",
        "   height: 150px;",
        "   background-color: 457f86;",
        "   border: 2px solid #fff;",
        " }",
        " ",
        " .logger {",
        "   color: white;",
        "   margin: 10px;",
        " }",
        " ",
        " .outset {",
        "   -webkit-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "     box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        " ",
        " .inset {",
        "   -webkit-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        "</style>"
      ],
      "solutions": [
        ""
      ],
      "tests": [
        "assert(typeof(runSlots($(\".slot\"))[0]) === \"number\" && runSlots($(\".slot\"))[0] > 0 && runSlots($(\".slot\"))[0] < 4, '<code>slotOne</code> 应该是一个随机数')",
        "assert(typeof(runSlots($(\".slot\"))[1]) === \"number\" && runSlots($(\".slot\"))[1] > 0 && runSlots($(\".slot\"))[1] < 4, '<code>slotTwo</code> 应该是一个随机数')",
        "assert(typeof(runSlots($(\".slot\"))[2]) === \"number\" && runSlots($(\".slot\"))[2] > 0 && runSlots($(\".slot\"))[2] < 4, '<code>slotThree</code> 应该是一个随机数')"
      ],
      "type": "waypoint",
      "challengeType": 0,
      "isBeta": true
    },
    {
      "id": "cf1111c1c13feddfaeb1bdef",
      "title": "Add your JavaScript Slot Machine Slots",
      "description": [
        "现在我们的老虎机每次生存3个随机数，我们得去检查随机数是否全部相等的情况。",
        "如果全部相等，我们应该提示用户他们赢了，并返回中奖号码，否则我们应该返回null。",
        "<code>null</code> 是JavaScript中的一种数据类型，意味着空。",
        "当这3个随机数相等的时候，判定用户赢。让我们创建一个<code>if statement</code>，用多个条件按顺序来检查它们是否相等。类似于：",
        "<code>if (slotOne === slotTwo && slotTwo === slotThree){</code>",
        "<code>&nbsp;&nbsp;return slotOne;</code>",
        "<code>} else {</code>",
        "<code>}</code>",
        "当3个随机数都一样的时候，我们把 <code>\"It's A Win\"</code> 追加到class <code>logger</code>的html中。"
      ],
      "challengeSeed": [
        "fccss",
        "  function runSlots() {",
        "    var slotOne;",
        "    var slotTwo;",
        "    var slotThree;",
        "    ",
        "    var images = [\"//i.imgur.com/9H17QFk.png\", \"//i.imgur.com/9RmpXTy.png\", \"//i.imgur.com/VJnmtt5.png\"];",
        "    ",
        "    slotOne = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    slotTwo = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    slotThree = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    ",
        "    ",
        "    // 请把你的代码写在这条注释以下",
        "    ",
        "    ",
        "    ",
        "    // 请把你的代码写在这条注释以上",
        "    ",
        "    if (slotOne !== undefined && slotTwo !== undefined && slotThree !== undefined){",
        "      $(\".logger\").html(slotOne + \" \" + slotTwo + \" \" + slotThree);",
        "    }",
        "    ",
        "    $(\".logger\").append(\" Not A Win\");",
        "    ",
        "    return [slotOne, slotTwo, slotThree];",
        "  }",
        "",
        "  $(document).ready(function() {",
        "     $(\".go\").click(function() {",
        "       runSlots();",
        "     });",
        "   });",
        "fcces",
        " ",
        "<div>",
        " <div class = \"container inset\">",
        "   <div class = \"header inset\">",
        "     <img src=\"/images/freecodecamp_logo.svg\" alt=\"learn to code JavaScript at Free Code Camp logo\" class=\"img-responsive nav-logo\">",
        "     <h2>FCC Slot Machine</h2>",
        "   </div>",
        "   <div class = \"slots inset\">",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "   </div>",
        "   <br/>",
        "   <div class = \"outset\">",
        "     <button class = \"go inset\">",
        "       Go",
        "     </button>",
        "   </div>",
        "   <br/>",
        "   <div class = \"foot inset\">",
        "     <span class = \"logger\"></span>",
        "   </div>",
        " </div>",
        "</div>",
        "",
        "<style>",
        " .container {",
        "   background-color: #4a2b0f;",
        "   height: 400px;",
        "   width: 260px;",
        "   margin: 50px auto;",
        "   border-radius: 4px;",
        " }",
        " .header {",
        "   border: 2px solid #fff;",
        "   border-radius: 4px;",
        "   height: 55px;",
        "   margin: 14px auto;",
        "   background-color: #457f86",
        " }",
        " .header h2 {",
        "   height: 30px;",
        "   margin: auto;",
        " }",
        " .header h2 {",
        "   font-size: 14px;",
        "   margin: 0 0;",
        "   padding: 0;",
        "   color: #fff;",
        "   text-align: center;",
        " }",
        " .slots{",
        "   display: flex;",
        "   background-color: #457f86;",
        "   border-radius: 6px;",
        "   border: 2px solid #fff;",
        " }",
        " .slot{",
        "   flex: 1 0 auto;",
        "   background: white;",
        "   height: 75px;",
        "   margin: 8px;",
        "   border: 2px solid #215f1e;",
        "   border-radius: 4px;",
        " }",
        " .go {",
        "   width: 100%;",
        "   color: #fff;",
        "   background-color: #457f86;",
        "   border: 2px solid #fff;",
        "   border-radius: 2px;",
        "   box-sizing: none;",
        "   outline: none!important;",
        " }",
        " .foot {",
        "   height: 150px;",
        "   background-color: 457f86;",
        "   border: 2px solid #fff;",
        " }",
        " ",
        " .logger {",
        "   color: white;",
        "   margin: 10px;",
        " }",
        " ",
        " .outset {",
        "   -webkit-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "     box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        " ",
        " .inset {",
        "   -webkit-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        "</style>"
      ],
      "solutions": [
        ""
      ],
      "tests": [
        "assert((function(){var data = runSlots();return data === null || data.toString().length === 1;})(), 'message: 如果三个随机数都相等, 我们应该返回这个数字, 否则应该返回 <code>null</code>.')"
      ],
      "type": "waypoint",
      "challengeType": 0,
      "isBeta": true
    },
    {
      "id": "cf1111c1c13feddfaeb2bdef",
      "title": "Bring your JavaScript Slot Machine to Life",
      "description": [
        "让我们用 jQuery 选择器 <code>$(\".slot\")</code> 获得所有老虎机。",
        "一旦获取到所有老虎机，我们可以通过中括号操作符获取到每一个老虎机：",
        "<code>$($(\".slot\")[0]).html(slotOne);</code>",
        "jQuery将会获取到第一个老虎机，并更新它的HTML为正确的数字。",
        "任务：分别更新每个老虎机上的HTML为对应的数字。"
      ],
      "challengeSeed": [
        "fccss",
        "  function runSlots() {",
        "    var slotOne;",
        "    var slotTwo;",
        "    var slotThree;",
        "    ",
        "    var images = [\"//i.imgur.com/9H17QFk.png\", \"//i.imgur.com/9RmpXTy.png\", \"//i.imgur.com/VJnmtt5.png\"];",
        "    ",
        "    slotOne = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    slotTwo = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    slotThree = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    ",
        "    ",
        "    // 请把你的代码写在这条注释以下",
        "    ",
        "    ",
        "    ",
        "    // 请把你的代码写在这条注释以上",
        "    ",
        "    if (slotOne === slotTwo && slotTwo === slotThree) {",
        "      $(\".logger\").html(\" It's A Win\")",
        "      return null;",
        "    }",
        "    ",
        "    if (slotOne !== undefined && slotTwo !== undefined && slotThree !== undefined){",
        "      $(\".logger\").html(slotOne + \" \" + slotTwo + \" \" + slotThree);",
        "    }",
        "    ",
        "    $(\".logger\").append(\" Not A Win\");",
        "    ",
        "    ",
        "    return [slotOne, slotTwo, slotThree];",
        "  }",
        "",
        "  $(document).ready(function() {",
        "     $(\".go\").click(function() {",
        "       runSlots();",
        "     });",
        "   });",
        "fcces",
        " ",
        "<div>",
        " <div class = \"container inset\">",
        "   <div class = \"header inset\">",
        "     <img src=\"/images/freecodecamp_logo.svg\" alt=\"learn to code JavaScript at Free Code Camp logo\" class=\"img-responsive nav-logo\">",
        "     <h2>FCC Slot Machine</h2>",
        "   </div>",
        "   <div class = \"slots inset\">",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "   </div>",
        "   <br/>",
        "   <div class = \"outset\">",
        "     <button class = \"go inset\">",
        "       Go",
        "     </button>",
        "   </div>",
        "   <br/>",
        "   <div class = \"foot inset\">",
        "     <span class = \"logger\"></span>",
        "   </div>",
        " </div>",
        "</div>",
        "",
        "<style>",
        " .container {",
        "   background-color: #4a2b0f;",
        "   height: 400px;",
        "   width: 260px;",
        "   margin: 50px auto;",
        "   border-radius: 4px;",
        " }",
        " .header {",
        "   border: 2px solid #fff;",
        "   border-radius: 4px;",
        "   height: 55px;",
        "   margin: 14px auto;",
        "   background-color: #457f86",
        " }",
        " .header h2 {",
        "   height: 30px;",
        "   margin: auto;",
        " }",
        " .header h2 {",
        "   font-size: 14px;",
        "   margin: 0 0;",
        "   padding: 0;",
        "   color: #fff;",
        "   text-align: center;",
        " }",
        " .slots{",
        "   display: flex;",
        "   background-color: #457f86;",
        "   border-radius: 6px;",
        "   border: 2px solid #fff;",
        " }",
        " .slot{",
        "   flex: 1 0 auto;",
        "   background: white;",
        "   height: 75px;",
        "   margin: 8px;",
        "   border: 2px solid #215f1e;",
        "   border-radius: 4px;",
        "   text-align: center;",
        "   padding-top: 25px;",
        " }",
        " .go {",
        "   width: 100%;",
        "   color: #fff;",
        "   background-color: #457f86;",
        "   border: 2px solid #fff;",
        "   border-radius: 2px;",
        "   box-sizing: none;",
        "   outline: none!important;",
        " }",
        " .foot {",
        "   height: 150px;",
        "   background-color: 457f86;",
        "   border: 2px solid #fff;",
        " }",
        " ",
        " .logger {",
        "   color: white;",
        "   margin: 10px;",
        " }",
        " ",
        " .outset {",
        "   -webkit-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "     box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        " ",
        " .inset {",
        "   -webkit-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        "</style>"
      ],
      "solutions": [
        ""
      ],
      "tests": [
        "assert((function(){runSlots();if($($(\".slot\")[0]).html().replace(/\\s/gi, \"\") !== \"\" && $($(\".slot\")[1]).html().replace(/\\s/gi, \"\") !== \"\" && $($(\".slot\")[2]).html().replace(/\\s/gi, \"\") !== \"\"){return true;}else{return false;}})(), '你应该在老虎机对应的插槽中显示相应的摇奖结果')"
      ],
      "type": "waypoint",
      "challengeType": 0,
      "isBeta": true
    },
    {
      "id": "cf1111c1c11feddfaeb1bdff",
      "title": "Give your JavaScript Slot Machine some Stylish Images",
      "description": [
        "现在给我们的老虎机加点图片。",
        "我们已经为你准备好了图片<code>images</code>，我们可以通过不同的索引来获取每个图片。",
        "现在让我们设置第一个老虎机根据随机数来显示一张图片：",
        "<code>$($('.slot')[0]).html('&lt;img src = \"' + images[slotOne-1] + '\"&gt;');</code>",
        "任务：设置所有的老虎机根据随机数来显示对应的图片，最后点击RUN。"
      ],
      "challengeSeed": [
        "fccss",
        "  function runSlots() {",
        "    var slotOne;",
        "    var slotTwo;",
        "    var slotThree;",
        "    ",
        "    var images = [\"//i.imgur.com/9H17QFk.png\", \"//i.imgur.com/9RmpXTy.png\", \"//i.imgur.com/VJnmtt5.png\"];",
        "    ",
        "    slotOne = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    slotTwo = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    slotThree = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    ",
        "    ",
        "    // 请把你的代码写在这条注释以下",
        "    ",
        "    ",
        "    ",
        "    // 请把你的代码写在这条注释以上",
        "    ",
        "    if (slotOne === slotTwo && slotTwo === slotThree) {",
        "      $('.logger').html(\"It's A Win\");",
        "      return null;",
        "    }",
        "    ",
        "    if (slotOne !== undefined && slotTwo !== undefined && slotThree !== undefined){",
        "      $(\".logger\").html(slotOne + \" \" + slotTwo + \" \" + slotThree);",
        "    }",
        "    ",
        "    $('.logger').append(\" Not A Win\");",
        "    ",
        "    return [slotOne, slotTwo, slotThree];",
        "  }",
        "",
        "  $(document).ready(function() {",
        "     $('.go').click(function() {",
        "       runSlots();",
        "     });",
        "   });",
        "fcces",
        " ",
        "<div>",
        " <div class = 'container inset'>",
        "   <div class = 'header inset'>",
        "     <img src='/images/freecodecamp_logo.svg' alt='learn to code JavaScript at Free Code Camp logo' class='img-responsive nav-logo'>",
        "     <h2>FCC Slot Machine</h2>",
        "   </div>",
        "   <div class = 'slots inset'>",
        "     <div class = 'slot inset'>",
        "       ",
        "     </div>",
        "     <div class = 'slot inset'>",
        "       ",
        "     </div>",
        "     <div class = 'slot inset'>",
        "       ",
        "     </div>",
        "   </div>",
        "   <br/>",
        "   <div class = 'outset'>",
        "     <button class = 'go inset'>",
        "       Go",
        "     </button>",
        "   </div>",
        "   <br/>",
        "   <div class = 'foot inset'>",
        "     <span class = 'logger'></span>",
        "   </div>",
        " </div>",
        "</div>",
        "",
        "<style>",
        " .slot > img {",
        "  margin: 0!important;",
        "  height: 71px;",
        "  width: 50px;",
        " }",
        " .container {",
        "   background-color: #4a2b0f;",
        "   height: 400px;",
        "   width: 260px;",
        "   margin: 50px auto;",
        "   border-radius: 4px;",
        " }",
        " .header {",
        "   border: 2px solid #fff;",
        "   border-radius: 4px;",
        "   height: 55px;",
        "   margin: 14px auto;",
        "   background-color: #457f86",
        " }",
        " .header h2 {",
        "   height: 30px;",
        "   margin: auto;",
        " }",
        " .header h2 {",
        "   font-size: 14px;",
        "   margin: 0 0;",
        "   padding: 0;",
        "   color: #fff;",
        "   text-align: center;",
        " }",
        " .slots{",
        "   display: flex;",
        "   background-color: #457f86;",
        "   border-radius: 6px;",
        "   border: 2px solid #fff;",
        " }",
        " .slot{",
        "   flex: 1 0 auto;",
        "   background: white;",
        "   height: 75px;",
        "   width: 50px;",
        "   margin: 8px;",
        "   border: 2px solid #215f1e;",
        "   border-radius: 4px;",
        "   text-align: center;",
        " }",
        " .go {",
        "   width: 100%;",
        "   color: #fff;",
        "   background-color: #457f86;",
        "   border: 2px solid #fff;",
        "   border-radius: 2px;",
        "   box-sizing: none;",
        "   outline: none!important;",
        " }",
        " .foot {",
        "   height: 150px;",
        "   background-color: 457f86;",
        "   border: 2px solid #fff;",
        " }",
        " ",
        " .logger {",
        "   color: white;",
        "   margin: 10px;",
        " }",
        " ",
        " .outset {",
        "   -webkit-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "     box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        " ",
        " .inset {",
        "   -webkit-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        "</style>"
      ],
      "solutions": [
        ""
      ],
      "tests": [
        "assert((function(){runSlots();if($($(\".slot\")[0]).html().match(\/img\/).length == 1){return true;}else{return false;}})(), '你应该为 sloneOne 添加图片.')",
        "assert((function(){runSlots();if($($(\".slot\")[1]).html().match(\/img\/).length == 1){return true;}else{return false;}})(), '你应该为 sloneTwo 添加图片')",
        "assert((function(){runSlots();if($($(\".slot\")[2]).html().match(\/img\/).length == 1){return true;}else{return false;}})(), '你应该为 sloneThree 添加图片')"
      ],
      "type": "waypoint",
      "challengeType": 0,
      "isBeta": true
    }
  ]
}
